
I2C_BH1750+BME280+LCD1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b34c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800b460  0800b460  0001b460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8d8  0800b8d8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8d8  0800b8d8  0001b8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8e0  0800b8e0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8e0  0800b8e0  0001b8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8e4  0800b8e4  0001b8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b8e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001dc  0800bac4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  0800bac4  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e28a  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002460  00000000  00000000  0002e48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  000308f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000317f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dfd  00000000  00000000  00032600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b4d  00000000  00000000  0004c3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cffd  00000000  00000000  0005df4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eaf47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c4  00000000  00000000  000eaf98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b444 	.word	0x0800b444

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800b444 	.word	0x0800b444

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_ldivmod>:
 8001024:	b97b      	cbnz	r3, 8001046 <__aeabi_ldivmod+0x22>
 8001026:	b972      	cbnz	r2, 8001046 <__aeabi_ldivmod+0x22>
 8001028:	2900      	cmp	r1, #0
 800102a:	bfbe      	ittt	lt
 800102c:	2000      	movlt	r0, #0
 800102e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001032:	e006      	blt.n	8001042 <__aeabi_ldivmod+0x1e>
 8001034:	bf08      	it	eq
 8001036:	2800      	cmpeq	r0, #0
 8001038:	bf1c      	itt	ne
 800103a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800103e:	f04f 30ff 	movne.w	r0, #4294967295
 8001042:	f000 b9a9 	b.w	8001398 <__aeabi_idiv0>
 8001046:	f1ad 0c08 	sub.w	ip, sp, #8
 800104a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104e:	2900      	cmp	r1, #0
 8001050:	db09      	blt.n	8001066 <__aeabi_ldivmod+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <__aeabi_ldivmod+0x68>
 8001056:	f000 f835 	bl	80010c4 <__udivmoddi4>
 800105a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	db1b      	blt.n	80010a8 <__aeabi_ldivmod+0x84>
 8001070:	f000 f828 	bl	80010c4 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	4252      	negs	r2, r2
 8001086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108a:	4770      	bx	lr
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	f000 f817 	bl	80010c4 <__udivmoddi4>
 8001096:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109e:	b004      	add	sp, #16
 80010a0:	4240      	negs	r0, r0
 80010a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a6:	4770      	bx	lr
 80010a8:	4252      	negs	r2, r2
 80010aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ae:	f000 f809 	bl	80010c4 <__udivmoddi4>
 80010b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ba:	b004      	add	sp, #16
 80010bc:	4252      	negs	r2, r2
 80010be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c2:	4770      	bx	lr

080010c4 <__udivmoddi4>:
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	9e08      	ldr	r6, [sp, #32]
 80010ca:	460d      	mov	r5, r1
 80010cc:	4604      	mov	r4, r0
 80010ce:	4688      	mov	r8, r1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d14d      	bne.n	8001170 <__udivmoddi4+0xac>
 80010d4:	428a      	cmp	r2, r1
 80010d6:	4694      	mov	ip, r2
 80010d8:	d968      	bls.n	80011ac <__udivmoddi4+0xe8>
 80010da:	fab2 f282 	clz	r2, r2
 80010de:	b152      	cbz	r2, 80010f6 <__udivmoddi4+0x32>
 80010e0:	fa01 f302 	lsl.w	r3, r1, r2
 80010e4:	f1c2 0120 	rsb	r1, r2, #32
 80010e8:	fa20 f101 	lsr.w	r1, r0, r1
 80010ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f0:	ea41 0803 	orr.w	r8, r1, r3
 80010f4:	4094      	lsls	r4, r2
 80010f6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80010fa:	fbb8 f7f1 	udiv	r7, r8, r1
 80010fe:	fa1f fe8c 	uxth.w	lr, ip
 8001102:	fb01 8817 	mls	r8, r1, r7, r8
 8001106:	fb07 f00e 	mul.w	r0, r7, lr
 800110a:	0c23      	lsrs	r3, r4, #16
 800110c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001110:	4298      	cmp	r0, r3
 8001112:	d90a      	bls.n	800112a <__udivmoddi4+0x66>
 8001114:	eb1c 0303 	adds.w	r3, ip, r3
 8001118:	f107 35ff 	add.w	r5, r7, #4294967295
 800111c:	f080 811e 	bcs.w	800135c <__udivmoddi4+0x298>
 8001120:	4298      	cmp	r0, r3
 8001122:	f240 811b 	bls.w	800135c <__udivmoddi4+0x298>
 8001126:	3f02      	subs	r7, #2
 8001128:	4463      	add	r3, ip
 800112a:	1a1b      	subs	r3, r3, r0
 800112c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001130:	fb01 3310 	mls	r3, r1, r0, r3
 8001134:	fb00 fe0e 	mul.w	lr, r0, lr
 8001138:	b2a4      	uxth	r4, r4
 800113a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800113e:	45a6      	cmp	lr, r4
 8001140:	d90a      	bls.n	8001158 <__udivmoddi4+0x94>
 8001142:	eb1c 0404 	adds.w	r4, ip, r4
 8001146:	f100 33ff 	add.w	r3, r0, #4294967295
 800114a:	f080 8109 	bcs.w	8001360 <__udivmoddi4+0x29c>
 800114e:	45a6      	cmp	lr, r4
 8001150:	f240 8106 	bls.w	8001360 <__udivmoddi4+0x29c>
 8001154:	4464      	add	r4, ip
 8001156:	3802      	subs	r0, #2
 8001158:	2100      	movs	r1, #0
 800115a:	eba4 040e 	sub.w	r4, r4, lr
 800115e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001162:	b11e      	cbz	r6, 800116c <__udivmoddi4+0xa8>
 8001164:	2300      	movs	r3, #0
 8001166:	40d4      	lsrs	r4, r2
 8001168:	e9c6 4300 	strd	r4, r3, [r6]
 800116c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001170:	428b      	cmp	r3, r1
 8001172:	d908      	bls.n	8001186 <__udivmoddi4+0xc2>
 8001174:	2e00      	cmp	r6, #0
 8001176:	f000 80ee 	beq.w	8001356 <__udivmoddi4+0x292>
 800117a:	2100      	movs	r1, #0
 800117c:	e9c6 0500 	strd	r0, r5, [r6]
 8001180:	4608      	mov	r0, r1
 8001182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001186:	fab3 f183 	clz	r1, r3
 800118a:	2900      	cmp	r1, #0
 800118c:	d14a      	bne.n	8001224 <__udivmoddi4+0x160>
 800118e:	42ab      	cmp	r3, r5
 8001190:	d302      	bcc.n	8001198 <__udivmoddi4+0xd4>
 8001192:	4282      	cmp	r2, r0
 8001194:	f200 80fc 	bhi.w	8001390 <__udivmoddi4+0x2cc>
 8001198:	1a84      	subs	r4, r0, r2
 800119a:	eb65 0303 	sbc.w	r3, r5, r3
 800119e:	2001      	movs	r0, #1
 80011a0:	4698      	mov	r8, r3
 80011a2:	2e00      	cmp	r6, #0
 80011a4:	d0e2      	beq.n	800116c <__udivmoddi4+0xa8>
 80011a6:	e9c6 4800 	strd	r4, r8, [r6]
 80011aa:	e7df      	b.n	800116c <__udivmoddi4+0xa8>
 80011ac:	b902      	cbnz	r2, 80011b0 <__udivmoddi4+0xec>
 80011ae:	deff      	udf	#255	; 0xff
 80011b0:	fab2 f282 	clz	r2, r2
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	f040 8091 	bne.w	80012dc <__udivmoddi4+0x218>
 80011ba:	eba1 000c 	sub.w	r0, r1, ip
 80011be:	2101      	movs	r1, #1
 80011c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011c4:	fa1f fe8c 	uxth.w	lr, ip
 80011c8:	fbb0 f3f7 	udiv	r3, r0, r7
 80011cc:	fb07 0013 	mls	r0, r7, r3, r0
 80011d0:	0c25      	lsrs	r5, r4, #16
 80011d2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011d6:	fb0e f003 	mul.w	r0, lr, r3
 80011da:	42a8      	cmp	r0, r5
 80011dc:	d908      	bls.n	80011f0 <__udivmoddi4+0x12c>
 80011de:	eb1c 0505 	adds.w	r5, ip, r5
 80011e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80011e6:	d202      	bcs.n	80011ee <__udivmoddi4+0x12a>
 80011e8:	42a8      	cmp	r0, r5
 80011ea:	f200 80ce 	bhi.w	800138a <__udivmoddi4+0x2c6>
 80011ee:	4643      	mov	r3, r8
 80011f0:	1a2d      	subs	r5, r5, r0
 80011f2:	fbb5 f0f7 	udiv	r0, r5, r7
 80011f6:	fb07 5510 	mls	r5, r7, r0, r5
 80011fa:	fb0e fe00 	mul.w	lr, lr, r0
 80011fe:	b2a4      	uxth	r4, r4
 8001200:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001204:	45a6      	cmp	lr, r4
 8001206:	d908      	bls.n	800121a <__udivmoddi4+0x156>
 8001208:	eb1c 0404 	adds.w	r4, ip, r4
 800120c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001210:	d202      	bcs.n	8001218 <__udivmoddi4+0x154>
 8001212:	45a6      	cmp	lr, r4
 8001214:	f200 80b6 	bhi.w	8001384 <__udivmoddi4+0x2c0>
 8001218:	4628      	mov	r0, r5
 800121a:	eba4 040e 	sub.w	r4, r4, lr
 800121e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001222:	e79e      	b.n	8001162 <__udivmoddi4+0x9e>
 8001224:	f1c1 0720 	rsb	r7, r1, #32
 8001228:	408b      	lsls	r3, r1
 800122a:	fa22 fc07 	lsr.w	ip, r2, r7
 800122e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001232:	fa25 fa07 	lsr.w	sl, r5, r7
 8001236:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800123a:	fbba f8f9 	udiv	r8, sl, r9
 800123e:	fa20 f307 	lsr.w	r3, r0, r7
 8001242:	fb09 aa18 	mls	sl, r9, r8, sl
 8001246:	408d      	lsls	r5, r1
 8001248:	fa1f fe8c 	uxth.w	lr, ip
 800124c:	431d      	orrs	r5, r3
 800124e:	fa00 f301 	lsl.w	r3, r0, r1
 8001252:	fb08 f00e 	mul.w	r0, r8, lr
 8001256:	0c2c      	lsrs	r4, r5, #16
 8001258:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800125c:	42a0      	cmp	r0, r4
 800125e:	fa02 f201 	lsl.w	r2, r2, r1
 8001262:	d90b      	bls.n	800127c <__udivmoddi4+0x1b8>
 8001264:	eb1c 0404 	adds.w	r4, ip, r4
 8001268:	f108 3aff 	add.w	sl, r8, #4294967295
 800126c:	f080 8088 	bcs.w	8001380 <__udivmoddi4+0x2bc>
 8001270:	42a0      	cmp	r0, r4
 8001272:	f240 8085 	bls.w	8001380 <__udivmoddi4+0x2bc>
 8001276:	f1a8 0802 	sub.w	r8, r8, #2
 800127a:	4464      	add	r4, ip
 800127c:	1a24      	subs	r4, r4, r0
 800127e:	fbb4 f0f9 	udiv	r0, r4, r9
 8001282:	fb09 4410 	mls	r4, r9, r0, r4
 8001286:	fb00 fe0e 	mul.w	lr, r0, lr
 800128a:	b2ad      	uxth	r5, r5
 800128c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001290:	45a6      	cmp	lr, r4
 8001292:	d908      	bls.n	80012a6 <__udivmoddi4+0x1e2>
 8001294:	eb1c 0404 	adds.w	r4, ip, r4
 8001298:	f100 35ff 	add.w	r5, r0, #4294967295
 800129c:	d26c      	bcs.n	8001378 <__udivmoddi4+0x2b4>
 800129e:	45a6      	cmp	lr, r4
 80012a0:	d96a      	bls.n	8001378 <__udivmoddi4+0x2b4>
 80012a2:	3802      	subs	r0, #2
 80012a4:	4464      	add	r4, ip
 80012a6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012aa:	fba0 9502 	umull	r9, r5, r0, r2
 80012ae:	eba4 040e 	sub.w	r4, r4, lr
 80012b2:	42ac      	cmp	r4, r5
 80012b4:	46c8      	mov	r8, r9
 80012b6:	46ae      	mov	lr, r5
 80012b8:	d356      	bcc.n	8001368 <__udivmoddi4+0x2a4>
 80012ba:	d053      	beq.n	8001364 <__udivmoddi4+0x2a0>
 80012bc:	2e00      	cmp	r6, #0
 80012be:	d069      	beq.n	8001394 <__udivmoddi4+0x2d0>
 80012c0:	ebb3 0208 	subs.w	r2, r3, r8
 80012c4:	eb64 040e 	sbc.w	r4, r4, lr
 80012c8:	fa22 f301 	lsr.w	r3, r2, r1
 80012cc:	fa04 f707 	lsl.w	r7, r4, r7
 80012d0:	431f      	orrs	r7, r3
 80012d2:	40cc      	lsrs	r4, r1
 80012d4:	e9c6 7400 	strd	r7, r4, [r6]
 80012d8:	2100      	movs	r1, #0
 80012da:	e747      	b.n	800116c <__udivmoddi4+0xa8>
 80012dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012e0:	f1c2 0120 	rsb	r1, r2, #32
 80012e4:	fa25 f301 	lsr.w	r3, r5, r1
 80012e8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012ec:	fa20 f101 	lsr.w	r1, r0, r1
 80012f0:	4095      	lsls	r5, r2
 80012f2:	430d      	orrs	r5, r1
 80012f4:	fbb3 f1f7 	udiv	r1, r3, r7
 80012f8:	fb07 3311 	mls	r3, r7, r1, r3
 80012fc:	fa1f fe8c 	uxth.w	lr, ip
 8001300:	0c28      	lsrs	r0, r5, #16
 8001302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001306:	fb01 f30e 	mul.w	r3, r1, lr
 800130a:	4283      	cmp	r3, r0
 800130c:	fa04 f402 	lsl.w	r4, r4, r2
 8001310:	d908      	bls.n	8001324 <__udivmoddi4+0x260>
 8001312:	eb1c 0000 	adds.w	r0, ip, r0
 8001316:	f101 38ff 	add.w	r8, r1, #4294967295
 800131a:	d22f      	bcs.n	800137c <__udivmoddi4+0x2b8>
 800131c:	4283      	cmp	r3, r0
 800131e:	d92d      	bls.n	800137c <__udivmoddi4+0x2b8>
 8001320:	3902      	subs	r1, #2
 8001322:	4460      	add	r0, ip
 8001324:	1ac0      	subs	r0, r0, r3
 8001326:	fbb0 f3f7 	udiv	r3, r0, r7
 800132a:	fb07 0013 	mls	r0, r7, r3, r0
 800132e:	b2ad      	uxth	r5, r5
 8001330:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001334:	fb03 f00e 	mul.w	r0, r3, lr
 8001338:	42a8      	cmp	r0, r5
 800133a:	d908      	bls.n	800134e <__udivmoddi4+0x28a>
 800133c:	eb1c 0505 	adds.w	r5, ip, r5
 8001340:	f103 38ff 	add.w	r8, r3, #4294967295
 8001344:	d216      	bcs.n	8001374 <__udivmoddi4+0x2b0>
 8001346:	42a8      	cmp	r0, r5
 8001348:	d914      	bls.n	8001374 <__udivmoddi4+0x2b0>
 800134a:	3b02      	subs	r3, #2
 800134c:	4465      	add	r5, ip
 800134e:	1a28      	subs	r0, r5, r0
 8001350:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001354:	e738      	b.n	80011c8 <__udivmoddi4+0x104>
 8001356:	4631      	mov	r1, r6
 8001358:	4630      	mov	r0, r6
 800135a:	e707      	b.n	800116c <__udivmoddi4+0xa8>
 800135c:	462f      	mov	r7, r5
 800135e:	e6e4      	b.n	800112a <__udivmoddi4+0x66>
 8001360:	4618      	mov	r0, r3
 8001362:	e6f9      	b.n	8001158 <__udivmoddi4+0x94>
 8001364:	454b      	cmp	r3, r9
 8001366:	d2a9      	bcs.n	80012bc <__udivmoddi4+0x1f8>
 8001368:	ebb9 0802 	subs.w	r8, r9, r2
 800136c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001370:	3801      	subs	r0, #1
 8001372:	e7a3      	b.n	80012bc <__udivmoddi4+0x1f8>
 8001374:	4643      	mov	r3, r8
 8001376:	e7ea      	b.n	800134e <__udivmoddi4+0x28a>
 8001378:	4628      	mov	r0, r5
 800137a:	e794      	b.n	80012a6 <__udivmoddi4+0x1e2>
 800137c:	4641      	mov	r1, r8
 800137e:	e7d1      	b.n	8001324 <__udivmoddi4+0x260>
 8001380:	46d0      	mov	r8, sl
 8001382:	e77b      	b.n	800127c <__udivmoddi4+0x1b8>
 8001384:	4464      	add	r4, ip
 8001386:	3802      	subs	r0, #2
 8001388:	e747      	b.n	800121a <__udivmoddi4+0x156>
 800138a:	3b02      	subs	r3, #2
 800138c:	4465      	add	r5, ip
 800138e:	e72f      	b.n	80011f0 <__udivmoddi4+0x12c>
 8001390:	4608      	mov	r0, r1
 8001392:	e706      	b.n	80011a2 <__udivmoddi4+0xde>
 8001394:	4631      	mov	r1, r6
 8001396:	e6e9      	b.n	800116c <__udivmoddi4+0xa8>

08001398 <__aeabi_idiv0>:
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <BH1750_ReadLux>:
#include "bh1750.h"

static uint8_t buffer[2];

unsigned int BH1750_ReadLux()
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b097      	sub	sp, #92	; 0x5c
 80013a0:	af14      	add	r7, sp, #80	; 0x50
	unsigned int BH_H,BH_L;
	buffer[0] = OneTime_HResolution_Mode;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <BH1750_ReadLux+0x94>)
 80013a4:	2220      	movs	r2, #32
 80013a6:	701a      	strb	r2, [r3, #0]

	I2C_Write(hi2c2, BH1750_ADDRESS, buffer, 1);
 80013a8:	4c22      	ldr	r4, [pc, #136]	; (8001434 <BH1750_ReadLux+0x98>)
 80013aa:	2301      	movs	r3, #1
 80013ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <BH1750_ReadLux+0x94>)
 80013b0:	9312      	str	r3, [sp, #72]	; 0x48
 80013b2:	2323      	movs	r3, #35	; 0x23
 80013b4:	9311      	str	r3, [sp, #68]	; 0x44
 80013b6:	4668      	mov	r0, sp
 80013b8:	f104 0310 	add.w	r3, r4, #16
 80013bc:	2244      	movs	r2, #68	; 0x44
 80013be:	4619      	mov	r1, r3
 80013c0:	f006 fa7a 	bl	80078b8 <memcpy>
 80013c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013c8:	f000 ff22 	bl	8002210 <I2C_Write>
	I2C_Read(hi2c2, BH1750_ADDRESS, buffer, sizeof(buffer));
 80013cc:	4c19      	ldr	r4, [pc, #100]	; (8001434 <BH1750_ReadLux+0x98>)
 80013ce:	2302      	movs	r3, #2
 80013d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <BH1750_ReadLux+0x94>)
 80013d4:	9312      	str	r3, [sp, #72]	; 0x48
 80013d6:	2323      	movs	r3, #35	; 0x23
 80013d8:	9311      	str	r3, [sp, #68]	; 0x44
 80013da:	4668      	mov	r0, sp
 80013dc:	f104 0310 	add.w	r3, r4, #16
 80013e0:	2244      	movs	r2, #68	; 0x44
 80013e2:	4619      	mov	r1, r3
 80013e4:	f006 fa68 	bl	80078b8 <memcpy>
 80013e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013ec:	f000 ff3b 	bl	8002266 <I2C_Read>

	BH_H = buffer[0];
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <BH1750_ReadLux+0x94>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	607b      	str	r3, [r7, #4]
	BH_L = buffer[1];
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <BH1750_ReadLux+0x94>)
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	603b      	str	r3, [r7, #0]
	BH_H <<= 8;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	607b      	str	r3, [r7, #4]
	BH_H |= BH_L;
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4313      	orrs	r3, r2
 8001408:	607b      	str	r3, [r7, #4]
	return ((BH_H/1.2));				// Эту величину(в люксах) остается только вывести куда-либо
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7fe ffea 	bl	80003e4 <__aeabi_ui2d>
 8001410:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <BH1750_ReadLux+0x9c>)
 8001416:	f7ff f989 	bl	800072c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fb31 	bl	8000a88 <__aeabi_d2uiz>
 8001426:	4603      	mov	r3, r0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	200001f8 	.word	0x200001f8
 8001434:	20000224 	.word	0x20000224
 8001438:	3ff33333 	.word	0x3ff33333

0800143c <Error>:

BME280_CalibData CalibData;
//------------------------------------------------

static void Error()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	LED_OFF();
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001446:	4802      	ldr	r0, [pc, #8]	; (8001450 <Error+0x14>)
 8001448:	f002 f865 	bl	8003516 <HAL_GPIO_WritePin>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40011000 	.word	0x40011000

08001454 <I2Cx_WriteData>:
/*
 	 Также после функции ошибки добавим функции записи и чтения по определённому адресу байта для шины I2C
 */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af04      	add	r7, sp, #16
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
 800145e:	460b      	mov	r3, r1
 8001460:	717b      	strb	r3, [r7, #5]
 8001462:	4613      	mov	r3, r2
 8001464:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(&hi2c2, (Addr<<1), (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	b299      	uxth	r1, r3
 8001470:	797b      	ldrb	r3, [r7, #5]
 8001472:	b29a      	uxth	r2, r3
 8001474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <I2Cx_WriteData+0x4c>)
 8001486:	f002 fd01 	bl	8003e8c <HAL_I2C_Mem_Write>
 800148a:	4603      	mov	r3, r0
 800148c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) Error();
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <I2Cx_WriteData+0x44>
 8001494:	f7ff ffd2 	bl	800143c <Error>
}
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000224 	.word	0x20000224

080014a4 <I2Cx_ReadData>:
//------------------------------------------------

static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	4603      	mov	r3, r0
 80014ac:	460a      	mov	r2, r1
 80014ae:	80fb      	strh	r3, [r7, #6]
 80014b0:	4613      	mov	r3, r2
 80014b2:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c2, (Addr<<1), Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	b299      	uxth	r1, r3
 80014c2:	797b      	ldrb	r3, [r7, #5]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2301      	movs	r3, #1
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f107 030e 	add.w	r3, r7, #14
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <I2Cx_ReadData+0x54>)
 80014da:	f002 fdd1 	bl	8004080 <HAL_I2C_Mem_Read>
 80014de:	4603      	mov	r3, r0
 80014e0:	73fb      	strb	r3, [r7, #15]
	/*
   	   Здесь спец. функция для раюоты с памятью контроллеров, либо еепром. Указываем адрес устройства, адрес, в нашем
   	   случае адрес регистра размер адреса (8 бит), указатель на буффер и сколько оттуда считать и записать, то есть 1
	 */
	if(status != HAL_OK) Error();
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <I2Cx_ReadData+0x48>
 80014e8:	f7ff ffa8 	bl	800143c <Error>
	return value;
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000224 	.word	0x20000224

080014fc <I2Cx_ReadData16>:
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)	// Для чтения 2 байт
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af04      	add	r7, sp, #16
 8001502:	4603      	mov	r3, r0
 8001504:	603a      	str	r2, [r7, #0]
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	460b      	mov	r3, r1
 800150a:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c2, (Addr<<1), Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	b299      	uxth	r1, r3
 8001516:	797b      	ldrb	r3, [r7, #5]
 8001518:	b29a      	uxth	r2, r3
 800151a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	2302      	movs	r3, #2
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	4807      	ldr	r0, [pc, #28]	; (8001548 <I2Cx_ReadData16+0x4c>)
 800152c:	f002 fda8 	bl	8004080 <HAL_I2C_Mem_Read>
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) Error();
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <I2Cx_ReadData16+0x42>
 800153a:	f7ff ff7f 	bl	800143c <Error>
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000224 	.word	0x20000224

0800154c <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)	// Для чтения 3 байт
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af04      	add	r7, sp, #16
 8001552:	4603      	mov	r3, r0
 8001554:	603a      	str	r2, [r7, #0]
 8001556:	80fb      	strh	r3, [r7, #6]
 8001558:	460b      	mov	r3, r1
 800155a:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c2, (Addr<<1), Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	b299      	uxth	r1, r3
 8001566:	797b      	ldrb	r3, [r7, #5]
 8001568:	b29a      	uxth	r2, r3
 800156a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2303      	movs	r3, #3
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <I2Cx_ReadData24+0x4c>)
 800157c:	f002 fd80 	bl	8004080 <HAL_I2C_Mem_Read>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
  	if(status != HAL_OK) Error();
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <I2Cx_ReadData24+0x42>
 800158a:	f7ff ff57 	bl	800143c <Error>
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000224 	.word	0x20000224

0800159c <BME280_readRegister>:
//------------------------------------------------

uint8_t BME280_readRegister(uint8_t reg)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	I2Cx_ReadData(BME280_ADDRESS, reg);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4619      	mov	r1, r3
 80015aa:	2076      	movs	r0, #118	; 0x76
 80015ac:	f7ff ff7a 	bl	80014a4 <I2Cx_ReadData>
}
 80015b0:	bf00      	nop
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <BME280_writeRegister>:

static bool BME280_writeRegister(uint8_t reg, uint8_t value)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	460a      	mov	r2, r1
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	4613      	mov	r3, r2
 80015c8:	71bb      	strb	r3, [r7, #6]
	I2Cx_WriteData(BME280_ADDRESS, reg, value);
 80015ca:	79ba      	ldrb	r2, [r7, #6]
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	4619      	mov	r1, r3
 80015d0:	2076      	movs	r0, #118	; 0x76
 80015d2:	f7ff ff3f 	bl	8001454 <I2Cx_WriteData>
}
 80015d6:	bf00      	nop
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <BME280_readStatus>:

uint8_t BME280_readStatus(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	uint8_t res = BME280_readRegister(BME280_STATUS_REG) & 0x09;	// Почистили неустановленные биты.
 80015e6:	20f3      	movs	r0, #243	; 0xf3
 80015e8:	f7ff ffd8 	bl	800159c <BME280_readRegister>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f003 0309 	and.w	r3, r3, #9
 80015f2:	71fb      	strb	r3, [r7, #7]
	return res;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <BME280_reset>:

bool BME280_reset()
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
	if( !(BME280_writeRegister(BME280_RESET_REG, SOFT_RESET_VALUE)) ) return false;	// Проверка на успешность
 8001602:	21b6      	movs	r1, #182	; 0xb6
 8001604:	20e0      	movs	r0, #224	; 0xe0
 8001606:	f7ff ffd8 	bl	80015ba <BME280_writeRegister>
 800160a:	4603      	mov	r3, r0
 800160c:	f083 0301 	eor.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <BME280_reset+0x1c>
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <BME280_reset+0x1e>
	return true;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	bd80      	pop	{r7, pc}

08001620 <BME280_ReadReg_BE_U24>:

//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)	// Функция для чтения в правильном порядке байт
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	2076      	movs	r0, #118	; 0x76
 8001634:	f7ff ff8a 	bl	800154c <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0c1b      	lsrs	r3, r3, #16
 800163e:	b2da      	uxtb	r2, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001648:	431a      	orrs	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001654:	4313      	orrs	r3, r2
 8001656:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	601a      	str	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <BME280_ReadReg_BE_S16>:
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	6039      	str	r1, [r7, #0]
 8001670:	71fb      	strb	r3, [r7, #7]
	I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	2076      	movs	r0, #118	; 0x76
 800167a:	f7ff ff3f 	bl	80014fc <I2Cx_ReadData16>
	*(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	b29b      	uxth	r3, r3
 8001686:	b21a      	sxth	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	b29a      	uxth	r2, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	801a      	strh	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <BME280_ReadReg_U16>:
//------------------------------------------------
//------------------------------------------------

void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	6039      	str	r1, [r7, #0]
 80016ac:	71fb      	strb	r3, [r7, #7]
	I2Cx_ReadData16(BME280_ADDRESS, Reg, Value);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	2076      	movs	r0, #118	; 0x76
 80016b6:	f7ff ff21 	bl	80014fc <I2Cx_ReadData16>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	6039      	str	r1, [r7, #0]
 80016cc:	71fb      	strb	r3, [r7, #7]
	I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4619      	mov	r1, r3
 80016d4:	2076      	movs	r0, #118	; 0x76
 80016d6:	f7ff ff11 	bl	80014fc <I2Cx_ReadData16>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <BME280_ReadCoefficients>:
	*(uint32_t *) Value &= 0x00FFFFFF;			// Последний байт уберем, т.к нам нужно всего 20
}
//------------------------------------------------

void BME280_ReadCoefficients(void)
{
 80016e4:	b598      	push	{r3, r4, r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 80016e8:	4937      	ldr	r1, [pc, #220]	; (80017c8 <BME280_ReadCoefficients+0xe4>)
 80016ea:	2088      	movs	r0, #136	; 0x88
 80016ec:	f7ff ffd9 	bl	80016a2 <BME280_ReadReg_U16>

  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 80016f0:	4936      	ldr	r1, [pc, #216]	; (80017cc <BME280_ReadCoefficients+0xe8>)
 80016f2:	208a      	movs	r0, #138	; 0x8a
 80016f4:	f7ff ffe5 	bl	80016c2 <BME280_ReadReg_S16>

  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 80016f8:	4935      	ldr	r1, [pc, #212]	; (80017d0 <BME280_ReadCoefficients+0xec>)
 80016fa:	208c      	movs	r0, #140	; 0x8c
 80016fc:	f7ff ffe1 	bl	80016c2 <BME280_ReadReg_S16>

  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8001700:	4934      	ldr	r1, [pc, #208]	; (80017d4 <BME280_ReadCoefficients+0xf0>)
 8001702:	208e      	movs	r0, #142	; 0x8e
 8001704:	f7ff ffcd 	bl	80016a2 <BME280_ReadReg_U16>

  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8001708:	4933      	ldr	r1, [pc, #204]	; (80017d8 <BME280_ReadCoefficients+0xf4>)
 800170a:	2090      	movs	r0, #144	; 0x90
 800170c:	f7ff ffd9 	bl	80016c2 <BME280_ReadReg_S16>

  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8001710:	4932      	ldr	r1, [pc, #200]	; (80017dc <BME280_ReadCoefficients+0xf8>)
 8001712:	2092      	movs	r0, #146	; 0x92
 8001714:	f7ff ffd5 	bl	80016c2 <BME280_ReadReg_S16>

  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8001718:	4931      	ldr	r1, [pc, #196]	; (80017e0 <BME280_ReadCoefficients+0xfc>)
 800171a:	2094      	movs	r0, #148	; 0x94
 800171c:	f7ff ffd1 	bl	80016c2 <BME280_ReadReg_S16>

  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8001720:	4930      	ldr	r1, [pc, #192]	; (80017e4 <BME280_ReadCoefficients+0x100>)
 8001722:	2096      	movs	r0, #150	; 0x96
 8001724:	f7ff ffcd 	bl	80016c2 <BME280_ReadReg_S16>

  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8001728:	492f      	ldr	r1, [pc, #188]	; (80017e8 <BME280_ReadCoefficients+0x104>)
 800172a:	2098      	movs	r0, #152	; 0x98
 800172c:	f7ff ffc9 	bl	80016c2 <BME280_ReadReg_S16>

  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8001730:	492e      	ldr	r1, [pc, #184]	; (80017ec <BME280_ReadCoefficients+0x108>)
 8001732:	209a      	movs	r0, #154	; 0x9a
 8001734:	f7ff ffc5 	bl	80016c2 <BME280_ReadReg_S16>

  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8001738:	492d      	ldr	r1, [pc, #180]	; (80017f0 <BME280_ReadCoefficients+0x10c>)
 800173a:	209c      	movs	r0, #156	; 0x9c
 800173c:	f7ff ffc1 	bl	80016c2 <BME280_ReadReg_S16>

  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8001740:	492c      	ldr	r1, [pc, #176]	; (80017f4 <BME280_ReadCoefficients+0x110>)
 8001742:	209e      	movs	r0, #158	; 0x9e
 8001744:	f7ff ffbd 	bl	80016c2 <BME280_ReadReg_S16>

  CalibData.dig_H1 = BME280_readRegister(BME280_REGISTER_DIG_H1);
 8001748:	20a1      	movs	r0, #161	; 0xa1
 800174a:	f7ff ff27 	bl	800159c <BME280_readRegister>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <BME280_ReadCoefficients+0xe4>)
 8001754:	761a      	strb	r2, [r3, #24]

  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8001756:	4928      	ldr	r1, [pc, #160]	; (80017f8 <BME280_ReadCoefficients+0x114>)
 8001758:	20e1      	movs	r0, #225	; 0xe1
 800175a:	f7ff ffb2 	bl	80016c2 <BME280_ReadReg_S16>

  CalibData.dig_H3 = BME280_readRegister(BME280_REGISTER_DIG_H3);
 800175e:	20e3      	movs	r0, #227	; 0xe3
 8001760:	f7ff ff1c 	bl	800159c <BME280_readRegister>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <BME280_ReadCoefficients+0xe4>)
 800176a:	771a      	strb	r2, [r3, #28]

  CalibData.dig_H4 = (BME280_readRegister(BME280_REGISTER_DIG_H4) << 4) | (BME280_readRegister(BME280_REGISTER_DIG_H4+1) & 0xF);
 800176c:	20e4      	movs	r0, #228	; 0xe4
 800176e:	f7ff ff15 	bl	800159c <BME280_readRegister>
 8001772:	4603      	mov	r3, r0
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	b21c      	sxth	r4, r3
 8001778:	20e5      	movs	r0, #229	; 0xe5
 800177a:	f7ff ff0f 	bl	800159c <BME280_readRegister>
 800177e:	4603      	mov	r3, r0
 8001780:	b21b      	sxth	r3, r3
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	b21b      	sxth	r3, r3
 8001788:	4323      	orrs	r3, r4
 800178a:	b21a      	sxth	r2, r3
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <BME280_ReadCoefficients+0xe4>)
 800178e:	83da      	strh	r2, [r3, #30]

  CalibData.dig_H5 = (BME280_readRegister(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_readRegister(BME280_REGISTER_DIG_H5) >> 4);
 8001790:	20e6      	movs	r0, #230	; 0xe6
 8001792:	f7ff ff03 	bl	800159c <BME280_readRegister>
 8001796:	4603      	mov	r3, r0
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	b21c      	sxth	r4, r3
 800179c:	20e5      	movs	r0, #229	; 0xe5
 800179e:	f7ff fefd 	bl	800159c <BME280_readRegister>
 80017a2:	4603      	mov	r3, r0
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	4323      	orrs	r3, r4
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <BME280_ReadCoefficients+0xe4>)
 80017b0:	841a      	strh	r2, [r3, #32]

  CalibData.dig_H6 = (int8_t)BME280_readRegister(BME280_REGISTER_DIG_H6);
 80017b2:	20e7      	movs	r0, #231	; 0xe7
 80017b4:	f7ff fef2 	bl	800159c <BME280_readRegister>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b25a      	sxtb	r2, r3
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <BME280_ReadCoefficients+0xe4>)
 80017be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80017c2:	bf00      	nop
 80017c4:	bd98      	pop	{r3, r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000200 	.word	0x20000200
 80017cc:	20000202 	.word	0x20000202
 80017d0:	20000204 	.word	0x20000204
 80017d4:	20000206 	.word	0x20000206
 80017d8:	20000208 	.word	0x20000208
 80017dc:	2000020a 	.word	0x2000020a
 80017e0:	2000020c 	.word	0x2000020c
 80017e4:	2000020e 	.word	0x2000020e
 80017e8:	20000210 	.word	0x20000210
 80017ec:	20000212 	.word	0x20000212
 80017f0:	20000214 	.word	0x20000214
 80017f4:	20000216 	.word	0x20000216
 80017f8:	2000021a 	.word	0x2000021a

080017fc <BME280_SetFilter>:
//------------------------------------------------
void BME280_SetFilter(uint8_t filter)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = BME280_readRegister(BME280_CONFIG_REG) & ~BME280_FILTER_MSK;
 8001806:	20f5      	movs	r0, #245	; 0xf5
 8001808:	f7ff fec8 	bl	800159c <BME280_readRegister>
 800180c:	4603      	mov	r3, r0
 800180e:	f023 031c 	bic.w	r3, r3, #28
 8001812:	73fb      	strb	r3, [r7, #15]
	// очистили все биты на всякий, в которые будем писать
	reg |= filter & BME280_FILTER_MSK;		// Если вдруг во входном значении лишние значения, очистим их с помощью маски и лог. И
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	f003 031c 	and.w	r3, r3, #28
 800181c:	b25a      	sxtb	r2, r3
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4313      	orrs	r3, r2
 8001824:	b25b      	sxtb	r3, r3
 8001826:	73fb      	strb	r3, [r7, #15]
	BME280_writeRegister(BME280_CONFIG_REG, reg);
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	4619      	mov	r1, r3
 800182c:	20f5      	movs	r0, #245	; 0xf5
 800182e:	f7ff fec4 	bl	80015ba <BME280_writeRegister>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = BME280_readRegister(BME280_CONFIG_REG) & ~BME280_STBY_MSK;	// Очистим значение от предыдущих битов если они есть там
 8001844:	20f5      	movs	r0, #245	; 0xf5
 8001846:	f7ff fea9 	bl	800159c <BME280_readRegister>
 800184a:	4603      	mov	r3, r0
 800184c:	f003 031f 	and.w	r3, r3, #31
 8001850:	73fb      	strb	r3, [r7, #15]
	reg |= tsb & BME280_STBY_MSK;				// Если вдруг во входном значении лишние значения, очистим их с помощью маски и лог. И
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	f023 031f 	bic.w	r3, r3, #31
 800185a:	b25a      	sxtb	r2, r3
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001860:	4313      	orrs	r3, r2
 8001862:	b25b      	sxtb	r3, r3
 8001864:	73fb      	strb	r3, [r7, #15]
	BME280_writeRegister(BME280_CONFIG_REG,reg);
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	4619      	mov	r1, r3
 800186a:	20f5      	movs	r0, #245	; 0xf5
 800186c:	f7ff fea5 	bl	80015ba <BME280_writeRegister>
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t ovrsmp)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = BME280_readRegister(BME280_CTRL_MEAS_REG) & ~BME280_OSRS_T_MSK;	// Очистим значение от предыдущих битов если они есть там
 8001882:	20f4      	movs	r0, #244	; 0xf4
 8001884:	f7ff fe8a 	bl	800159c <BME280_readRegister>
 8001888:	4603      	mov	r3, r0
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	73fb      	strb	r3, [r7, #15]
	reg |= ovrsmp & BME280_OSRS_T_MSK;				// Если вдруг во входном значении лишние значения, очистим их с помощью маски и лог. И
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	f023 031f 	bic.w	r3, r3, #31
 8001898:	b25a      	sxtb	r2, r3
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4313      	orrs	r3, r2
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	73fb      	strb	r3, [r7, #15]
	BME280_writeRegister(BME280_CTRL_MEAS_REG, reg);
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	4619      	mov	r1, r3
 80018a8:	20f4      	movs	r0, #244	; 0xf4
 80018aa:	f7ff fe86 	bl	80015ba <BME280_writeRegister>
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <BME280_SetOversamplingPress>:
//------------------------------------------------
void BME280_SetOversamplingPress(uint8_t ovrsmp)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = BME280_readRegister(BME280_CTRL_MEAS_REG) & ~BME280_OSRS_P_MSK;	// Очистим значение от предыдущих битов если они есть там
 80018c0:	20f4      	movs	r0, #244	; 0xf4
 80018c2:	f7ff fe6b 	bl	800159c <BME280_readRegister>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f023 031c 	bic.w	r3, r3, #28
 80018cc:	73fb      	strb	r3, [r7, #15]
	reg |= ovrsmp & BME280_OSRS_P_MSK;				// Если вдруг во входном значении лишние значения, очистим их с помощью маски и лог. И
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	f003 031c 	and.w	r3, r3, #28
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018dc:	4313      	orrs	r3, r2
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	73fb      	strb	r3, [r7, #15]
	BME280_writeRegister(BME280_CTRL_MEAS_REG, reg);
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	4619      	mov	r1, r3
 80018e6:	20f4      	movs	r0, #244	; 0xf4
 80018e8:	f7ff fe67 	bl	80015ba <BME280_writeRegister>
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <BME280_SetOversamplingHum>:
//------------------------------------------------
static void BME280_SetOversamplingHum(uint8_t ovrsmp)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = BME280_readRegister(BME280_CTRL_HUM_REG) & ~BME280_OSRS_H_MSK;
 80018fe:	20f2      	movs	r0, #242	; 0xf2
 8001900:	f7ff fe4c 	bl	800159c <BME280_readRegister>
 8001904:	4603      	mov	r3, r0
 8001906:	f023 0307 	bic.w	r3, r3, #7
 800190a:	73fb      	strb	r3, [r7, #15]
	/*  В этот рег можно писать только после того, как записали значения в регистр CTRL_MEAS и задали оверсэмлинги	*/
	reg |= ovrsmp & BME280_OSRS_H_MSK;				// Если вдруг во входном значении лишние значения, очистим их с помощью маски и лог. И
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	b25a      	sxtb	r2, r3
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4313      	orrs	r3, r2
 800191c:	b25b      	sxtb	r3, r3
 800191e:	73fb      	strb	r3, [r7, #15]
	BME280_writeRegister(BME280_CTRL_HUM_REG, reg);
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	4619      	mov	r1, r3
 8001924:	20f2      	movs	r0, #242	; 0xf2
 8001926:	f7ff fe48 	bl	80015ba <BME280_writeRegister>

	reg = BME280_readRegister(BME280_CTRL_MEAS_REG);
 800192a:	20f4      	movs	r0, #244	; 0xf4
 800192c:	f7ff fe36 	bl	800159c <BME280_readRegister>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]
	BME280_writeRegister(BME280_CTRL_MEAS_REG, reg);
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	4619      	mov	r1, r3
 8001938:	20f4      	movs	r0, #244	; 0xf4
 800193a:	f7ff fe3e 	bl	80015ba <BME280_writeRegister>
	/*
	 	После занесения значений оверсемплинга влажности в соответствующий регистр мы считали и заново записали данные
	 	регистра F4. Мы это сделали потому, что существует такое требование, гласящее о том, что изменения регистра
	 	оверсемплинга влажности станут актуальными только после записи регистра CTRL_MEAS
	 */
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <BME280_SetMode>:

static void BME280_SetMode(uint8_t mode)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = BME280_readRegister(BME280_CTRL_MEAS_REG) & ~BME280_MODE_MSK;
 8001950:	20f4      	movs	r0, #244	; 0xf4
 8001952:	f7ff fe23 	bl	800159c <BME280_readRegister>
 8001956:	4603      	mov	r3, r0
 8001958:	f023 0303 	bic.w	r3, r3, #3
 800195c:	73fb      	strb	r3, [r7, #15]
	reg |= mode & BME280_MODE_MSK;
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	b25a      	sxtb	r2, r3
 8001968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196c:	4313      	orrs	r3, r2
 800196e:	b25b      	sxtb	r3, r3
 8001970:	73fb      	strb	r3, [r7, #15]
	BME280_writeRegister(BME280_CTRL_MEAS_REG, reg);
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	4619      	mov	r1, r3
 8001976:	20f4      	movs	r0, #244	; 0xf4
 8001978:	f7ff fe1f 	bl	80015ba <BME280_writeRegister>
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <BME280_readHum>:


float BME280_readHum()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
	float hum_float = 0.0f;
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
	uint32_t hum_raw;
	int32_t hum_raw_sign, v_x1_u32r;
	BME280_readTemp(); // must be done first to get t_fine
 8001990:	f000 f872 	bl	8001a78 <BME280_readTemp>
	BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA, &hum_raw);		// Прочитали сырое значение в правильном порядке байт
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	20fd      	movs	r0, #253	; 0xfd
 800199a:	f7ff fe64 	bl	8001666 <BME280_ReadReg_BE_S16>

	hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	60bb      	str	r3, [r7, #8]
	v_x1_u32r = (temper_int - ((int32_t)76800));
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <BME280_readHum+0xec>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80019ac:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	039a      	lsls	r2, r3, #14
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <BME280_readHum+0xf0>)
 80019b4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019b8:	051b      	lsls	r3, r3, #20
 80019ba:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <BME280_readHum+0xf0>)
 80019be:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019c2:	4619      	mov	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 80019ca:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80019cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019d0:	13db      	asrs	r3, r3, #15
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 80019d2:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <BME280_readHum+0xf0>)
 80019d4:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019d8:	4611      	mov	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	fb01 f202 	mul.w	r2, r1, r2
 80019e0:	1292      	asrs	r2, r2, #10
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80019e2:	4924      	ldr	r1, [pc, #144]	; (8001a74 <BME280_readHum+0xf0>)
 80019e4:	7f09      	ldrb	r1, [r1, #28]
 80019e6:	4608      	mov	r0, r1
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	fb00 f101 	mul.w	r1, r0, r1
 80019ee:	12c9      	asrs	r1, r1, #11
 80019f0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 80019f4:	fb01 f202 	mul.w	r2, r1, r2
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80019f8:	1292      	asrs	r2, r2, #10
 80019fa:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 80019fe:	491d      	ldr	r1, [pc, #116]	; (8001a74 <BME280_readHum+0xf0>)
 8001a00:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a04:	fb01 f202 	mul.w	r2, r1, r2
 8001a08:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001a0c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	13db      	asrs	r3, r3, #15
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	13d2      	asrs	r2, r2, #15
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.dig_H1)) >> 4));
 8001a22:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <BME280_readHum+0xf0>)
 8001a24:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_H1)) >> 4));
 8001a2a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a38:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a40:	bfa8      	it	ge
 8001a42:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a46:	607b      	str	r3, [r7, #4]
	hum_float = (v_x1_u32r>>12);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	131b      	asrs	r3, r3, #12
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f945 	bl	8000cdc <__aeabi_i2f>
 8001a52:	4603      	mov	r3, r0
 8001a54:	60fb      	str	r3, [r7, #12]
	hum_float /= 1024.0f;
 8001a56:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff fa46 	bl	8000eec <__aeabi_fdiv>
 8001a60:	4603      	mov	r3, r0
 8001a62:	60fb      	str	r3, [r7, #12]

	return hum_float;
 8001a64:	68fb      	ldr	r3, [r7, #12]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200001fc 	.word	0x200001fc
 8001a74:	20000200 	.word	0x20000200

08001a78 <BME280_readTemp>:

float BME280_readTemp()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
	float temp_float = 0.0f;
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
	//char str[20];
	uint32_t temper_raw;	// Для чтения регистров
	int32_t val1, val2;		// Для промежуточных измерений
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA, &temper_raw);	// Считаем 3 байта сразу
 8001a84:	463b      	mov	r3, r7
 8001a86:	4619      	mov	r1, r3
 8001a88:	20fa      	movs	r0, #250	; 0xfa
 8001a8a:	f7ff fdc9 	bl	8001620 <BME280_ReadReg_BE_U24>
	 	 Т. е идёт автоматическое смещение и нам не нужно ничего делать и заморачиваться массивами, чтобы каждый новый
	 	 элемент падал в +1 ячейку. Одно условие, чтобы данные не потерялись, в переменной, которую мы на вермя приводим к
	 	 типу (uint8_t *), было куда сдвигать, т.е тип должен быть 16,32 и тд бит
	 */

	temper_raw >>= 4;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	603b      	str	r3, [r7, #0]
						// Убрали часть, котоаря не учавствует
	/*	Теперь сдвинем всё это на 4 бита вправо, так как именно так у нас хранится сырое значение температуры и
	 * 		четыре самых младших бита не участвуют в показаниях	*/

	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <BME280_readTemp+0x98>)
 8001a9a:	8812      	ldrh	r2, [r2, #0]
 8001a9c:	0052      	lsls	r2, r2, #1
 8001a9e:	1a9b      	subs	r3, r3, r2
	((int32_t)CalibData.dig_T2)) >> 11;
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <BME280_readTemp+0x98>)
 8001aa2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
	((int32_t)CalibData.dig_T2)) >> 11;
 8001aaa:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001aac:	60bb      	str	r3, [r7, #8]

	/*val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
	((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
	((int32_t)CalibData.dig_T3)) >> 14;*/

	val2 = (int32_t)(((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <BME280_readTemp+0x98>)
 8001ab4:	8812      	ldrh	r2, [r2, #0]
 8001ab6:	1a9b      	subs	r3, r3, r2
	((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	0912      	lsrs	r2, r2, #4
 8001abc:	4914      	ldr	r1, [pc, #80]	; (8001b10 <BME280_readTemp+0x98>)
 8001abe:	8809      	ldrh	r1, [r1, #0]
 8001ac0:	1a52      	subs	r2, r2, r1
	val2 = (int32_t)(((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
	((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001ac6:	0b1b      	lsrs	r3, r3, #12
	((int32_t)CalibData.dig_T3)) >> 14;
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <BME280_readTemp+0x98>)
 8001aca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
	val2 = (int32_t)(((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001ad2:	139b      	asrs	r3, r3, #14
 8001ad4:	607b      	str	r3, [r7, #4]

	temper_int = val1 + val2;
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <BME280_readTemp+0x9c>)
 8001ade:	6013      	str	r3, [r2, #0]
	temp_float = ((temper_int * 5 + 128) >> 8);
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <BME280_readTemp+0x9c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3380      	adds	r3, #128	; 0x80
 8001aec:	121b      	asrs	r3, r3, #8
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f8f4 	bl	8000cdc <__aeabi_i2f>
 8001af4:	4603      	mov	r3, r0
 8001af6:	60fb      	str	r3, [r7, #12]
	temp_float /= 100.0f;
 8001af8:	4907      	ldr	r1, [pc, #28]	; (8001b18 <BME280_readTemp+0xa0>)
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff f9f6 	bl	8000eec <__aeabi_fdiv>
 8001b00:	4603      	mov	r3, r0
 8001b02:	60fb      	str	r3, [r7, #12]
	/*
		Взяли пример, как вычислить температуру из сырого значения регистров в int прямиком из даташита
	*/
	return temp_float;
 8001b04:	68fb      	ldr	r3, [r7, #12]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000200 	.word	0x20000200
 8001b14:	200001fc 	.word	0x200001fc
 8001b18:	42c80000 	.word	0x42c80000

08001b1c <BME280_readPress>:
//------------------------------------------------
float BME280_readPress()
{
 8001b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b20:	b0d0      	sub	sp, #320	; 0x140
 8001b22:	af00      	add	r7, sp, #0
	float press_float = 0.0f;
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;

	BME280_readTemp(); // must be done first to get t_fine. Участвует в расчётах давления
 8001b2c:	f7ff ffa4 	bl	8001a78 <BME280_readTemp>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA, &press_raw);
 8001b30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b34:	4619      	mov	r1, r3
 8001b36:	20f7      	movs	r0, #247	; 0xf7
 8001b38:	f7ff fd72 	bl	8001620 <BME280_ReadReg_BE_U24>
	press_raw >>= 4;		//последние 4 бита не участвуют
 8001b3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	val1 = ((int64_t) temper_int) - 128000;
 8001b46:	4bac      	ldr	r3, [pc, #688]	; (8001df8 <BME280_readPress+0x2dc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	17da      	asrs	r2, r3, #31
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	4691      	mov	r9, r2
 8001b50:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 8001b54:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b56:	f149 33ff 	adc.w	r3, r9, #4294967295
 8001b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b60:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 8001b64:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001b68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b6c:	fb03 f102 	mul.w	r1, r3, r2
 8001b70:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001b74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b78:	fb02 f303 	mul.w	r3, r2, r3
 8001b7c:	18ca      	adds	r2, r1, r3
 8001b7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b82:	fba3 4503 	umull	r4, r5, r3, r3
 8001b86:	1953      	adds	r3, r2, r5
 8001b88:	461d      	mov	r5, r3
 8001b8a:	4b9c      	ldr	r3, [pc, #624]	; (8001dfc <BME280_readPress+0x2e0>)
 8001b8c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	17da      	asrs	r2, r3, #31
 8001b94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b98:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001b9c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	fb03 f205 	mul.w	r2, r3, r5
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	fb04 f303 	mul.w	r3, r4, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	4602      	mov	r2, r0
 8001bb0:	fba4 ab02 	umull	sl, fp, r4, r2
 8001bb4:	445b      	add	r3, fp
 8001bb6:	469b      	mov	fp, r3
 8001bb8:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
 8001bbc:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8001bc0:	4b8e      	ldr	r3, [pc, #568]	; (8001dfc <BME280_readPress+0x2e0>)
 8001bc2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	17da      	asrs	r2, r3, #31
 8001bca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bce:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001bd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bd6:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001bda:	462a      	mov	r2, r5
 8001bdc:	fb02 f203 	mul.w	r2, r2, r3
 8001be0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001be4:	4621      	mov	r1, r4
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	441a      	add	r2, r3
 8001bec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	fba3 3101 	umull	r3, r1, r3, r1
 8001bf6:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8001bfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c02:	18d3      	adds	r3, r2, r3
 8001c04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001c08:	f04f 0000 	mov.w	r0, #0
 8001c0c:	f04f 0100 	mov.w	r1, #0
 8001c10:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8001c14:	462b      	mov	r3, r5
 8001c16:	0459      	lsls	r1, r3, #17
 8001c18:	4622      	mov	r2, r4
 8001c1a:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001c1e:	4623      	mov	r3, r4
 8001c20:	0458      	lsls	r0, r3, #17
 8001c22:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001c26:	1814      	adds	r4, r2, r0
 8001c28:	643c      	str	r4, [r7, #64]	; 0x40
 8001c2a:	414b      	adcs	r3, r1
 8001c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001c2e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001c32:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 8001c36:	4b71      	ldr	r3, [pc, #452]	; (8001dfc <BME280_readPress+0x2e0>)
 8001c38:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	17da      	asrs	r2, r3, #31
 8001c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c48:	f04f 0000 	mov.w	r0, #0
 8001c4c:	f04f 0100 	mov.w	r1, #0
 8001c50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c54:	00d9      	lsls	r1, r3, #3
 8001c56:	2000      	movs	r0, #0
 8001c58:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001c5c:	1814      	adds	r4, r2, r0
 8001c5e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001c60:	414b      	adcs	r3, r1
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c64:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001c68:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 8001c6c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001c70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c74:	fb03 f102 	mul.w	r1, r3, r2
 8001c78:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001c7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	18ca      	adds	r2, r1, r3
 8001c86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c8a:	fba3 3103 	umull	r3, r1, r3, r3
 8001c8e:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8001c92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c9a:	18d3      	adds	r3, r2, r3
 8001c9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001ca0:	4b56      	ldr	r3, [pc, #344]	; (8001dfc <BME280_readPress+0x2e0>)
 8001ca2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	17da      	asrs	r2, r3, #31
 8001caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cae:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001cb2:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8001cb6:	4622      	mov	r2, r4
 8001cb8:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	fb01 f202 	mul.w	r2, r1, r2
 8001cc2:	464d      	mov	r5, r9
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	4603      	mov	r3, r0
 8001cca:	fb03 f305 	mul.w	r3, r3, r5
 8001cce:	4413      	add	r3, r2
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4641      	mov	r1, r8
 8001cd4:	fba2 2101 	umull	r2, r1, r2, r1
 8001cd8:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001cdc:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8001ce0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001cea:	f04f 0000 	mov.w	r0, #0
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	0a18      	lsrs	r0, r3, #8
 8001cfa:	462a      	mov	r2, r5
 8001cfc:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001d00:	462b      	mov	r3, r5
 8001d02:	1219      	asrs	r1, r3, #8
 8001d04:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <BME280_readPress+0x2e0>)
 8001d06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	17da      	asrs	r2, r3, #31
 8001d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d12:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001d16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d1a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001d1e:	464a      	mov	r2, r9
 8001d20:	fb02 f203 	mul.w	r2, r2, r3
 8001d24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d28:	4644      	mov	r4, r8
 8001d2a:	fb04 f303 	mul.w	r3, r4, r3
 8001d2e:	441a      	add	r2, r3
 8001d30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d34:	4644      	mov	r4, r8
 8001d36:	fba3 3404 	umull	r3, r4, r3, r4
 8001d3a:	f8c7 40fc 	str.w	r4, [r7, #252]	; 0xfc
 8001d3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d46:	18d3      	adds	r3, r2, r3
 8001d48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8001d58:	464c      	mov	r4, r9
 8001d5a:	0323      	lsls	r3, r4, #12
 8001d5c:	46c4      	mov	ip, r8
 8001d5e:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001d62:	4644      	mov	r4, r8
 8001d64:	0322      	lsls	r2, r4, #12
 8001d66:	1884      	adds	r4, r0, r2
 8001d68:	633c      	str	r4, [r7, #48]	; 0x30
 8001d6a:	eb41 0303 	adc.w	r3, r1, r3
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d70:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001d74:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 8001d78:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001d7c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001d80:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8001d84:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001d88:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <BME280_readPress+0x2e0>)
 8001d8a:	88db      	ldrh	r3, [r3, #6]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d98:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001da2:	4641      	mov	r1, r8
 8001da4:	fb01 f202 	mul.w	r2, r1, r2
 8001da8:	464d      	mov	r5, r9
 8001daa:	4618      	mov	r0, r3
 8001dac:	4621      	mov	r1, r4
 8001dae:	4603      	mov	r3, r0
 8001db0:	fb03 f305 	mul.w	r3, r3, r5
 8001db4:	4413      	add	r3, r2
 8001db6:	4602      	mov	r2, r0
 8001db8:	4641      	mov	r1, r8
 8001dba:	fba2 2101 	umull	r2, r1, r2, r1
 8001dbe:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001dc2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001dc6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001dca:	4413      	add	r3, r2
 8001dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001ddc:	4629      	mov	r1, r5
 8001dde:	104a      	asrs	r2, r1, #1
 8001de0:	4629      	mov	r1, r5
 8001de2:	17cb      	asrs	r3, r1, #31
 8001de4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	if (val1 == 0) {
 8001de8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001dec:	4313      	orrs	r3, r2
 8001dee:	d107      	bne.n	8001e00 <BME280_readPress+0x2e4>
	  return 0; // avoid exception caused by division by zero
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	e192      	b.n	800211c <BME280_readPress+0x600>
 8001df6:	bf00      	nop
 8001df8:	200001fc 	.word	0x200001fc
 8001dfc:	20000200 	.word	0x20000200
	}
	p = 1048576 - press_raw;
 8001e00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001e04:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001e08:	2200      	movs	r2, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e0e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001e12:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	p = (((p << 31) - val2) * 3125) / val1;
 8001e16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e24:	07db      	lsls	r3, r3, #31
 8001e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e2a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e2e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001e32:	4604      	mov	r4, r0
 8001e34:	1aa4      	subs	r4, r4, r2
 8001e36:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8001e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8001e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e42:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001e46:	4622      	mov	r2, r4
 8001e48:	462b      	mov	r3, r5
 8001e4a:	1891      	adds	r1, r2, r2
 8001e4c:	6239      	str	r1, [r7, #32]
 8001e4e:	415b      	adcs	r3, r3
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e56:	4621      	mov	r1, r4
 8001e58:	1851      	adds	r1, r2, r1
 8001e5a:	61b9      	str	r1, [r7, #24]
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	414b      	adcs	r3, r1
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001e6e:	4649      	mov	r1, r9
 8001e70:	018b      	lsls	r3, r1, #6
 8001e72:	4641      	mov	r1, r8
 8001e74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e78:	4641      	mov	r1, r8
 8001e7a:	018a      	lsls	r2, r1, #6
 8001e7c:	4641      	mov	r1, r8
 8001e7e:	1889      	adds	r1, r1, r2
 8001e80:	6139      	str	r1, [r7, #16]
 8001e82:	4649      	mov	r1, r9
 8001e84:	eb43 0101 	adc.w	r1, r3, r1
 8001e88:	6179      	str	r1, [r7, #20]
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001e96:	4649      	mov	r1, r9
 8001e98:	008b      	lsls	r3, r1, #2
 8001e9a:	46c4      	mov	ip, r8
 8001e9c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001ea0:	4641      	mov	r1, r8
 8001ea2:	008a      	lsls	r2, r1, #2
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4622      	mov	r2, r4
 8001eac:	189b      	adds	r3, r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	462a      	mov	r2, r5
 8001eb4:	eb42 0303 	adc.w	r3, r2, r3
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	008b      	lsls	r3, r1, #2
 8001eca:	46c4      	mov	ip, r8
 8001ecc:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001ed0:	4641      	mov	r1, r8
 8001ed2:	008a      	lsls	r2, r1, #2
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4622      	mov	r2, r4
 8001edc:	189b      	adds	r3, r3, r2
 8001ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ee2:	462b      	mov	r3, r5
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	eb42 0303 	adc.w	r3, r2, r3
 8001eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001eee:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001ef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ef6:	f7ff f895 	bl	8001024 <__aeabi_ldivmod>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001f02:	4b89      	ldr	r3, [pc, #548]	; (8002128 <BME280_readPress+0x60c>)
 8001f04:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	17da      	asrs	r2, r3, #31
 8001f0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f10:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001f14:	f04f 0000 	mov.w	r0, #0
 8001f18:	f04f 0100 	mov.w	r1, #0
 8001f1c:	0b50      	lsrs	r0, r2, #13
 8001f1e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f22:	1359      	asrs	r1, r3, #13
 8001f24:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001f28:	462b      	mov	r3, r5
 8001f2a:	fb00 f203 	mul.w	r2, r0, r3
 8001f2e:	4623      	mov	r3, r4
 8001f30:	fb03 f301 	mul.w	r3, r3, r1
 8001f34:	4413      	add	r3, r2
 8001f36:	4622      	mov	r2, r4
 8001f38:	fba2 2100 	umull	r2, r1, r2, r0
 8001f3c:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8001f40:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001f44:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f48:	4413      	add	r3, r2
 8001f4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001f4e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001f52:	f04f 0000 	mov.w	r0, #0
 8001f56:	f04f 0100 	mov.w	r1, #0
 8001f5a:	0b50      	lsrs	r0, r2, #13
 8001f5c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f60:	1359      	asrs	r1, r3, #13
 8001f62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f66:	462b      	mov	r3, r5
 8001f68:	fb00 f203 	mul.w	r2, r0, r3
 8001f6c:	4623      	mov	r3, r4
 8001f6e:	fb03 f301 	mul.w	r3, r3, r1
 8001f72:	4413      	add	r3, r2
 8001f74:	4622      	mov	r2, r4
 8001f76:	fba2 2100 	umull	r2, r1, r2, r0
 8001f7a:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001f7e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001f82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001f86:	4413      	add	r3, r2
 8001f88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001f98:	4621      	mov	r1, r4
 8001f9a:	0e4a      	lsrs	r2, r1, #25
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001fa6:	164b      	asrs	r3, r1, #25
 8001fa8:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8001fac:	4b5e      	ldr	r3, [pc, #376]	; (8002128 <BME280_readPress+0x60c>)
 8001fae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	17da      	asrs	r2, r3, #31
 8001fb6:	673b      	str	r3, [r7, #112]	; 0x70
 8001fb8:	677a      	str	r2, [r7, #116]	; 0x74
 8001fba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fbe:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001fc2:	462a      	mov	r2, r5
 8001fc4:	fb02 f203 	mul.w	r2, r2, r3
 8001fc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001fcc:	4621      	mov	r1, r4
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	441a      	add	r2, r3
 8001fd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fd8:	4621      	mov	r1, r4
 8001fda:	fba3 3101 	umull	r3, r1, r3, r1
 8001fde:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fea:	18d3      	adds	r3, r2, r3
 8001fec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	0cca      	lsrs	r2, r1, #19
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	460c      	mov	r4, r1
 8002006:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800200a:	14cb      	asrs	r3, r1, #19
 800200c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8002010:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002014:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002018:	1884      	adds	r4, r0, r2
 800201a:	66bc      	str	r4, [r7, #104]	; 0x68
 800201c:	eb41 0303 	adc.w	r3, r1, r3
 8002020:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002022:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002026:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800202a:	4621      	mov	r1, r4
 800202c:	1889      	adds	r1, r1, r2
 800202e:	6639      	str	r1, [r7, #96]	; 0x60
 8002030:	4629      	mov	r1, r5
 8002032:	eb43 0101 	adc.w	r1, r3, r1
 8002036:	6679      	str	r1, [r7, #100]	; 0x64
 8002038:	f04f 0000 	mov.w	r0, #0
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002044:	4623      	mov	r3, r4
 8002046:	0a18      	lsrs	r0, r3, #8
 8002048:	462a      	mov	r2, r5
 800204a:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800204e:	462b      	mov	r3, r5
 8002050:	1219      	asrs	r1, r3, #8
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <BME280_readPress+0x60c>)
 8002054:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002058:	b21b      	sxth	r3, r3
 800205a:	17da      	asrs	r2, r3, #31
 800205c:	65bb      	str	r3, [r7, #88]	; 0x58
 800205e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800206c:	464c      	mov	r4, r9
 800206e:	0123      	lsls	r3, r4, #4
 8002070:	46c4      	mov	ip, r8
 8002072:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8002076:	4644      	mov	r4, r8
 8002078:	0122      	lsls	r2, r4, #4
 800207a:	1884      	adds	r4, r0, r2
 800207c:	603c      	str	r4, [r7, #0]
 800207e:	eb41 0303 	adc.w	r3, r1, r3
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002088:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 800208c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	0a02      	lsrs	r2, r0, #8
 800209a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800209e:	120b      	asrs	r3, r1, #8
 80020a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a4:	fb03 f402 	mul.w	r4, r3, r2
 80020a8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80020ac:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80020b0:	653b      	str	r3, [r7, #80]	; 0x50
 80020b2:	2300      	movs	r3, #0
 80020b4:	657b      	str	r3, [r7, #84]	; 0x54
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <BME280_readPress+0x610>)
 80020b8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80020bc:	464a      	mov	r2, r9
 80020be:	fb03 f202 	mul.w	r2, r3, r2
 80020c2:	2300      	movs	r3, #0
 80020c4:	4641      	mov	r1, r8
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <BME280_readPress+0x610>)
 80020ce:	4641      	mov	r1, r8
 80020d0:	fba1 2102 	umull	r2, r1, r1, r2
 80020d4:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80020d8:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80020dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80020e0:	4413      	add	r3, r2
 80020e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <BME280_readPress+0x614>)
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80020f0:	f7fe ff98 	bl	8001024 <__aeabi_ldivmod>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4613      	mov	r3, r2
 80020fa:	4423      	add	r3, r4
 80020fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	press_float = pres_int / 100.0f;
 8002100:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002104:	f7fe fde6 	bl	8000cd4 <__aeabi_ui2f>
 8002108:	4603      	mov	r3, r0
 800210a:	490a      	ldr	r1, [pc, #40]	; (8002134 <BME280_readPress+0x618>)
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe feed 	bl	8000eec <__aeabi_fdiv>
 8002112:	4603      	mov	r3, r0
 8002114:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	/*	Расчёты взяли и ДШ	*/
	return press_float;
 8002118:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
}
 800211c:	4618      	mov	r0, r3
 800211e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8002122:	46bd      	mov	sp, r7
 8002124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002128:	20000200 	.word	0x20000200
 800212c:	0005f5e1 	.word	0x0005f5e1
 8002130:	000186a0 	.word	0x000186a0
 8002134:	42c80000 	.word	0x42c80000

08002138 <BME280_ReadAltitude>:
//------------------------------------------------
float BME280_ReadAltitude(float seaLevel)		// Высота над уровнем моря, зависит от давления
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	float att = 0.0f;
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
	float atm = BME280_readPress();
 8002146:	f7ff fce9 	bl	8001b1c <BME280_readPress>
 800214a:	60b8      	str	r0, [r7, #8]
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	68b8      	ldr	r0, [r7, #8]
 8002150:	f7fe fecc 	bl	8000eec <__aeabi_fdiv>
 8002154:	4603      	mov	r3, r0
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f966 	bl	8000428 <__aeabi_f2d>
 800215c:	a310      	add	r3, pc, #64	; (adr r3, 80021a0 <BME280_ReadAltitude+0x68>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f008 fa8b 	bl	800a67c <pow>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	4910      	ldr	r1, [pc, #64]	; (80021b0 <BME280_ReadAltitude+0x78>)
 8002170:	f7fd fffa 	bl	8000168 <__aeabi_dsub>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	a30a      	add	r3, pc, #40	; (adr r3, 80021a8 <BME280_ReadAltitude+0x70>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe f9a9 	bl	80004d8 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fc9b 	bl	8000ac8 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	60fb      	str	r3, [r7, #12]
	return att;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	1a36e2eb 	.word	0x1a36e2eb
 80021a4:	3fc85bc0 	.word	0x3fc85bc0
 80021a8:	00000000 	.word	0x00000000
 80021ac:	40e5a540 	.word	0x40e5a540
 80021b0:	3ff00000 	.word	0x3ff00000

080021b4 <BME280_init>:

//------------------------------------------------

uint8_t BME280_init()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	uint32_t value32;

	LED_ON();
 80021b8:	2200      	movs	r2, #0
 80021ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021be:	4813      	ldr	r0, [pc, #76]	; (800220c <BME280_init+0x58>)
 80021c0:	f001 f9a9 	bl	8003516 <HAL_GPIO_WritePin>
	if (BME280_readRegister(BME280_ID_REG) != BME280_ID) {}	// Проверка работаем ли мы с действительно bme280
 80021c4:	20d0      	movs	r0, #208	; 0xd0
 80021c6:	f7ff f9e9 	bl	800159c <BME280_readRegister>

	BME280_reset();			// Дальше нужно сделать ресет
 80021ca:	f7ff fa18 	bl	80015fe <BME280_reset>
	while (BME280_readStatus() & BME280_STATUS_IM_UPDATE){} 	// Ждём в цикле, если установлен бит занятости
 80021ce:	bf00      	nop
 80021d0:	f7ff fa06 	bl	80015e0 <BME280_readStatus>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f8      	bne.n	80021d0 <BME280_init+0x1c>

	BME280_ReadCoefficients();		// Читаем коэфициенты
 80021de:	f7ff fa81 	bl	80016e4 <BME280_ReadCoefficients>
	/* Во время нахождения в данном состоянии STANBY мы при необходимости и считываем данные. Это время и настроим */
	BME280_SetStandby(BME280_STBY_1000);	// Режим стэндбай	1000 мс, время когда датчик ничего не делает. см диаграмму в дш
 80021e2:	20a0      	movs	r0, #160	; 0xa0
 80021e4:	f7ff fb29 	bl	800183a <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);		// Коэф. фильтрации 4.
 80021e8:	2008      	movs	r0, #8
 80021ea:	f7ff fb07 	bl	80017fc <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 80021ee:	2060      	movs	r0, #96	; 0x60
 80021f0:	f7ff fb42 	bl	8001878 <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPress(BME280_OSRS_P_x2);
 80021f4:	2008      	movs	r0, #8
 80021f6:	f7ff fb5e 	bl	80018b6 <BME280_SetOversamplingPress>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7ff fb7a 	bl	80018f4 <BME280_SetOversamplingHum>
	BME280_SetMode(BME280_MODE_NORMAL);
 8002200:	2003      	movs	r0, #3
 8002202:	f7ff fba0 	bl	8001946 <BME280_SetMode>
	  (value32 & BME280_OSRS_T_MSK) ? "ON " : "OFF ",
	  (value32 & BME280_OSRS_P_MSK) ? "ON " : "OFF ",
	  ((value32 >> 8) & BME280_OSRS_H_MSK) ? "ON " : "OFF ");
	LCD_SetPos(0, 1);
	LCD_SendString(str1);*/
}
 8002206:	bf00      	nop
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40011000 	.word	0x40011000

08002210 <I2C_Write>:
#include "i2c.h"

static char str[13];

bool I2C_Write(I2C_HandleTypeDef hi, uint8_t DEV_ADDR, uint8_t *buffer, uint8_t sizebuf)
{
 8002210:	b084      	sub	sp, #16
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af02      	add	r7, sp, #8
 8002218:	f107 0c08 	add.w	ip, r7, #8
 800221c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while(HAL_I2C_Master_Transmit(&hi, (uint16_t)(DEV_ADDR<<1), buffer, (uint16_t)sizebuf, (uint32_t)1000)!= HAL_OK)
 8002220:	e008      	b.n	8002234 <I2C_Write+0x24>
	{
		/*	Не забываем свдинуть адрес на 1 влево, т.к HAL сам по себе добавляет бит в конец или нет в зависимости от
			 	 	 	 * чтения или наоборот записи в слэйв устройство	*/
		if (HAL_I2C_GetError(&hi) != HAL_I2C_ERROR_AF)
 8002222:	f107 0008 	add.w	r0, r7, #8
 8002226:	f002 fc11 	bl	8004a4c <HAL_I2C_GetError>
 800222a:	4603      	mov	r3, r0
 800222c:	2b04      	cmp	r3, #4
 800222e:	d001      	beq.n	8002234 <I2C_Write+0x24>
		{
			return false;
 8002230:	2300      	movs	r3, #0
 8002232:	e012      	b.n	800225a <I2C_Write+0x4a>
	while(HAL_I2C_Master_Transmit(&hi, (uint16_t)(DEV_ADDR<<1), buffer, (uint16_t)sizebuf, (uint32_t)1000)!= HAL_OK)
 8002234:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002238:	b29b      	uxth	r3, r3
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	b299      	uxth	r1, r3
 800223e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002242:	b29b      	uxth	r3, r3
 8002244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002248:	9200      	str	r2, [sp, #0]
 800224a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800224c:	f107 0008 	add.w	r0, r7, #8
 8002250:	f001 fabe 	bl	80037d0 <HAL_I2C_Master_Transmit>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e3      	bne.n	8002222 <I2C_Write+0x12>
        }
	}
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002262:	b004      	add	sp, #16
 8002264:	4770      	bx	lr

08002266 <I2C_Read>:

bool I2C_Read(I2C_HandleTypeDef hi, uint8_t DEV_ADDR, uint8_t *buffer, uint8_t sizebuf)
{
 8002266:	b084      	sub	sp, #16
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af02      	add	r7, sp, #8
 800226e:	f107 0c08 	add.w	ip, r7, #8
 8002272:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while(HAL_I2C_Master_Receive(&hi, (uint16_t)(DEV_ADDR<<1), buffer, (uint16_t)sizebuf, (uint32_t)1000)!= HAL_OK)
 8002276:	e008      	b.n	800228a <I2C_Read+0x24>
	{
		if (HAL_I2C_GetError(&hi) != HAL_I2C_ERROR_AF)
 8002278:	f107 0008 	add.w	r0, r7, #8
 800227c:	f002 fbe6 	bl	8004a4c <HAL_I2C_GetError>
 8002280:	4603      	mov	r3, r0
 8002282:	2b04      	cmp	r3, #4
 8002284:	d001      	beq.n	800228a <I2C_Read+0x24>
		{
			return false;
 8002286:	2300      	movs	r3, #0
 8002288:	e012      	b.n	80022b0 <I2C_Read+0x4a>
	while(HAL_I2C_Master_Receive(&hi, (uint16_t)(DEV_ADDR<<1), buffer, (uint16_t)sizebuf, (uint32_t)1000)!= HAL_OK)
 800228a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800228e:	b29b      	uxth	r3, r3
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	b299      	uxth	r1, r3
 8002294:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002298:	b29b      	uxth	r3, r3
 800229a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800229e:	9200      	str	r2, [sp, #0]
 80022a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022a2:	f107 0008 	add.w	r0, r7, #8
 80022a6:	f001 fb91 	bl	80039cc <HAL_I2C_Master_Receive>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e3      	bne.n	8002278 <I2C_Read+0x12>
        }
	}
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022b8:	b004      	add	sp, #16
 80022ba:	4770      	bx	lr

080022bc <delay>:
#include "lcd1602.h"


static void delay(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
     uint16_t i;
     for(i=0;i<1000;i++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	80fb      	strh	r3, [r7, #6]
 80022c6:	e002      	b.n	80022ce <delay+0x12>
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	3301      	adds	r3, #1
 80022cc:	80fb      	strh	r3, [r7, #6]
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022d4:	d3f8      	bcc.n	80022c8 <delay+0xc>
	 {
	 }
}
 80022d6:	bf00      	nop
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
	...

080022e4 <LCD_WriteData>:
static void LCD_WriteData(uint8_t data)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
	if(((data>>3) & 0x01) == 1) d7_set();	else d7_reset();
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <LCD_WriteData+0x24>
 80022fc:	2201      	movs	r2, #1
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	4820      	ldr	r0, [pc, #128]	; (8002384 <LCD_WriteData+0xa0>)
 8002302:	f001 f908 	bl	8003516 <HAL_GPIO_WritePin>
 8002306:	e004      	b.n	8002312 <LCD_WriteData+0x2e>
 8002308:	2200      	movs	r2, #0
 800230a:	2140      	movs	r1, #64	; 0x40
 800230c:	481d      	ldr	r0, [pc, #116]	; (8002384 <LCD_WriteData+0xa0>)
 800230e:	f001 f902 	bl	8003516 <HAL_GPIO_WritePin>
	if(((data>>2) & 0x01) == 1) d6_set();	else d6_reset();
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <LCD_WriteData+0x48>
 8002320:	2201      	movs	r2, #1
 8002322:	2120      	movs	r1, #32
 8002324:	4817      	ldr	r0, [pc, #92]	; (8002384 <LCD_WriteData+0xa0>)
 8002326:	f001 f8f6 	bl	8003516 <HAL_GPIO_WritePin>
 800232a:	e004      	b.n	8002336 <LCD_WriteData+0x52>
 800232c:	2200      	movs	r2, #0
 800232e:	2120      	movs	r1, #32
 8002330:	4814      	ldr	r0, [pc, #80]	; (8002384 <LCD_WriteData+0xa0>)
 8002332:	f001 f8f0 	bl	8003516 <HAL_GPIO_WritePin>
	if(((data>>1) & 0x01) == 1) d5_set();	else d5_reset();
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <LCD_WriteData+0x6c>
 8002344:	2201      	movs	r2, #1
 8002346:	2110      	movs	r1, #16
 8002348:	480e      	ldr	r0, [pc, #56]	; (8002384 <LCD_WriteData+0xa0>)
 800234a:	f001 f8e4 	bl	8003516 <HAL_GPIO_WritePin>
 800234e:	e004      	b.n	800235a <LCD_WriteData+0x76>
 8002350:	2200      	movs	r2, #0
 8002352:	2110      	movs	r1, #16
 8002354:	480b      	ldr	r0, [pc, #44]	; (8002384 <LCD_WriteData+0xa0>)
 8002356:	f001 f8de 	bl	8003516 <HAL_GPIO_WritePin>
	if((data & 0x01) == 1) 		d4_set();	else d4_reset();
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <LCD_WriteData+0x8c>
 8002364:	2201      	movs	r2, #1
 8002366:	2108      	movs	r1, #8
 8002368:	4806      	ldr	r0, [pc, #24]	; (8002384 <LCD_WriteData+0xa0>)
 800236a:	f001 f8d4 	bl	8003516 <HAL_GPIO_WritePin>
	/*
	 	 Здесь мы проверяем на биты, 0 или 1. Двигаем сначала самый старший на место самого младшего и делаем лг. И
	 	 с единицой. Если в том разряде 1 то пишем лог.1 в соответсвующий пин, если нет, то пишем ноль
	 */
}
 800236e:	e004      	b.n	800237a <LCD_WriteData+0x96>
	if((data & 0x01) == 1) 		d4_set();	else d4_reset();
 8002370:	2200      	movs	r2, #0
 8002372:	2108      	movs	r1, #8
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <LCD_WriteData+0xa0>)
 8002376:	f001 f8ce 	bl	8003516 <HAL_GPIO_WritePin>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40010c00 	.word	0x40010c00

08002388 <LCD_Data>:
static void LCD_Data(uint8_t dt)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
    rs1;
 8002392:	2201      	movs	r2, #1
 8002394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002398:	4814      	ldr	r0, [pc, #80]	; (80023ec <LCD_Data+0x64>)
 800239a:	f001 f8bc 	bl	8003516 <HAL_GPIO_WritePin>
    LCD_WriteData(dt>>4);	// Младшая тетрада
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff9d 	bl	80022e4 <LCD_WriteData>
    e1;
 80023aa:	2201      	movs	r2, #1
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	480f      	ldr	r0, [pc, #60]	; (80023ec <LCD_Data+0x64>)
 80023b0:	f001 f8b1 	bl	8003516 <HAL_GPIO_WritePin>
    delay();
 80023b4:	f7ff ff82 	bl	80022bc <delay>
    e0;
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	480b      	ldr	r0, [pc, #44]	; (80023ec <LCD_Data+0x64>)
 80023be:	f001 f8aa 	bl	8003516 <HAL_GPIO_WritePin>
    LCD_WriteData(dt);		// Затем старшая
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff8d 	bl	80022e4 <LCD_WriteData>
    e1;
 80023ca:	2201      	movs	r2, #1
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	4807      	ldr	r0, [pc, #28]	; (80023ec <LCD_Data+0x64>)
 80023d0:	f001 f8a1 	bl	8003516 <HAL_GPIO_WritePin>
    delay();
 80023d4:	f7ff ff72 	bl	80022bc <delay>
    e0;
 80023d8:	2200      	movs	r2, #0
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	4803      	ldr	r0, [pc, #12]	; (80023ec <LCD_Data+0x64>)
 80023de:	f001 f89a 	bl	8003516 <HAL_GPIO_WritePin>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40010c00 	.word	0x40010c00

080023f0 <LCD_Command>:

static void LCD_Command(uint8_t dt)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
    rs0;
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002400:	4814      	ldr	r0, [pc, #80]	; (8002454 <LCD_Command+0x64>)
 8002402:	f001 f888 	bl	8003516 <HAL_GPIO_WritePin>
    LCD_WriteData(dt>>4);
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff69 	bl	80022e4 <LCD_WriteData>
    e1;
 8002412:	2201      	movs	r2, #1
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	480f      	ldr	r0, [pc, #60]	; (8002454 <LCD_Command+0x64>)
 8002418:	f001 f87d 	bl	8003516 <HAL_GPIO_WritePin>
    delay();
 800241c:	f7ff ff4e 	bl	80022bc <delay>
    e0;
 8002420:	2200      	movs	r2, #0
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	480b      	ldr	r0, [pc, #44]	; (8002454 <LCD_Command+0x64>)
 8002426:	f001 f876 	bl	8003516 <HAL_GPIO_WritePin>
    LCD_WriteData(dt);
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff59 	bl	80022e4 <LCD_WriteData>
    e1;
 8002432:	2201      	movs	r2, #1
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	4807      	ldr	r0, [pc, #28]	; (8002454 <LCD_Command+0x64>)
 8002438:	f001 f86d 	bl	8003516 <HAL_GPIO_WritePin>
    delay();
 800243c:	f7ff ff3e 	bl	80022bc <delay>
    e0;
 8002440:	2200      	movs	r2, #0
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <LCD_Command+0x64>)
 8002446:	f001 f866 	bl	8003516 <HAL_GPIO_WritePin>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40010c00 	.word	0x40010c00

08002458 <LCD_SendString>:
void LCD_SendFloatDigit(float digit)
{

}
void LCD_SendString(const char *str)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; str[i] != '\0'; i++)
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e009      	b.n	800247a <LCD_SendString+0x22>
	{
		LCD_SendChar(str[i]);
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f80e 	bl	8002490 <LCD_SendChar>
	for (uint8_t i = 0; str[i] != '\0'; i++)
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	3301      	adds	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ef      	bne.n	8002466 <LCD_SendString+0xe>
	}
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <LCD_SendChar>:

void LCD_SendChar(const char ch)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
    LCD_Data((uint8_t )ch);
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff73 	bl	8002388 <LCD_Data>
    delay();
 80024a2:	f7ff ff0b 	bl	80022bc <delay>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <LCD_Clear>:
void LCD_Clear(void)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	af00      	add	r7, sp, #0
    LCD_Command(0x01);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f7ff ff9c 	bl	80023f0 <LCD_Command>
    HAL_Delay(2);
 80024b8:	2002      	movs	r0, #2
 80024ba:	f000 fcdd 	bl	8002e78 <HAL_Delay>
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <LCD_SetPos>:
void LCD_SetPos(uint8_t x, uint8_t y)

{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	460a      	mov	r2, r1
 80024cc:	71fb      	strb	r3, [r7, #7]
 80024ce:	4613      	mov	r3, r2
 80024d0:	71bb      	strb	r3, [r7, #6]
    switch(y)
 80024d2:	79bb      	ldrb	r3, [r7, #6]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <LCD_SetPos+0x1c>
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d00b      	beq.n	80024f4 <LCD_SetPos+0x32>
        	LCD_Command((0x40+x)|0x80);
        	HAL_Delay(1);
        	break;
        }

}
 80024dc:	e019      	b.n	8002512 <LCD_SetPos+0x50>
    		LCD_Command(x|0x80);	// 0x80 пишем, потому что это условие для команды Set DDRAM Address. 1 в бите DB7
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff82 	bl	80023f0 <LCD_Command>
            HAL_Delay(1);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f000 fcc3 	bl	8002e78 <HAL_Delay>
            break;
 80024f2:	e00e      	b.n	8002512 <LCD_SetPos+0x50>
        	LCD_Command((0x40+x)|0x80);
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	3340      	adds	r3, #64	; 0x40
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002500:	b25b      	sxtb	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff73 	bl	80023f0 <LCD_Command>
        	HAL_Delay(1);
 800250a:	2001      	movs	r0, #1
 800250c:	f000 fcb4 	bl	8002e78 <HAL_Delay>
        	break;
 8002510:	bf00      	nop
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <LCD_ini>:
//----------------------------------------
void LCD_ini(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	HAL_Delay(40);
 8002520:	2028      	movs	r0, #40	; 0x28
 8002522:	f000 fca9 	bl	8002e78 <HAL_Delay>
	rs0;
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800252c:	482c      	ldr	r0, [pc, #176]	; (80025e0 <LCD_ini+0xc4>)
 800252e:	f000 fff2 	bl	8003516 <HAL_GPIO_WritePin>
	LCD_WriteData(3);
 8002532:	2003      	movs	r0, #3
 8002534:	f7ff fed6 	bl	80022e4 <LCD_WriteData>
	e1;
 8002538:	2201      	movs	r2, #1
 800253a:	2180      	movs	r1, #128	; 0x80
 800253c:	4828      	ldr	r0, [pc, #160]	; (80025e0 <LCD_ini+0xc4>)
 800253e:	f000 ffea 	bl	8003516 <HAL_GPIO_WritePin>
	delay();
 8002542:	f7ff febb 	bl	80022bc <delay>
	e0;
 8002546:	2200      	movs	r2, #0
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	4825      	ldr	r0, [pc, #148]	; (80025e0 <LCD_ini+0xc4>)
 800254c:	f000 ffe3 	bl	8003516 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002550:	2001      	movs	r0, #1
 8002552:	f000 fc91 	bl	8002e78 <HAL_Delay>
	LCD_WriteData(3);
 8002556:	2003      	movs	r0, #3
 8002558:	f7ff fec4 	bl	80022e4 <LCD_WriteData>
	e1;
 800255c:	2201      	movs	r2, #1
 800255e:	2180      	movs	r1, #128	; 0x80
 8002560:	481f      	ldr	r0, [pc, #124]	; (80025e0 <LCD_ini+0xc4>)
 8002562:	f000 ffd8 	bl	8003516 <HAL_GPIO_WritePin>
	delay();
 8002566:	f7ff fea9 	bl	80022bc <delay>
	e0;
 800256a:	2200      	movs	r2, #0
 800256c:	2180      	movs	r1, #128	; 0x80
 800256e:	481c      	ldr	r0, [pc, #112]	; (80025e0 <LCD_ini+0xc4>)
 8002570:	f000 ffd1 	bl	8003516 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002574:	2001      	movs	r0, #1
 8002576:	f000 fc7f 	bl	8002e78 <HAL_Delay>
	LCD_WriteData(3);
 800257a:	2003      	movs	r0, #3
 800257c:	f7ff feb2 	bl	80022e4 <LCD_WriteData>
	e1;
 8002580:	2201      	movs	r2, #1
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	4816      	ldr	r0, [pc, #88]	; (80025e0 <LCD_ini+0xc4>)
 8002586:	f000 ffc6 	bl	8003516 <HAL_GPIO_WritePin>
	delay();
 800258a:	f7ff fe97 	bl	80022bc <delay>
	e0;
 800258e:	2200      	movs	r2, #0
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	4813      	ldr	r0, [pc, #76]	; (80025e0 <LCD_ini+0xc4>)
 8002594:	f000 ffbf 	bl	8003516 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002598:	2001      	movs	r0, #1
 800259a:	f000 fc6d 	bl	8002e78 <HAL_Delay>
	LCD_Command(0x08);//режим 4 бит, 2 линии (для нашего большого дисплея это 4 линии, шрифт 5х8
 800259e:	2008      	movs	r0, #8
 80025a0:	f7ff ff26 	bl	80023f0 <LCD_Command>
//	HAL_Delay(1);
//	LCD_Command(0x28);//еще раз для верности
	HAL_Delay(1);
 80025a4:	2001      	movs	r0, #1
 80025a6:	f000 fc67 	bl	8002e78 <HAL_Delay>
	LCD_Command(0x0C);//дисплей включаем (D=1), курсоры никакие не нужны
 80025aa:	200c      	movs	r0, #12
 80025ac:	f7ff ff20 	bl	80023f0 <LCD_Command>
	HAL_Delay(1);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f000 fc61 	bl	8002e78 <HAL_Delay>
	LCD_Command(0x01);//уберем мусор
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7ff ff1a 	bl	80023f0 <LCD_Command>
	HAL_Delay(2);
 80025bc:	2002      	movs	r0, #2
 80025be:	f000 fc5b 	bl	8002e78 <HAL_Delay>
	LCD_Command(0x06);//пишем влево
 80025c2:	2006      	movs	r0, #6
 80025c4:	f7ff ff14 	bl	80023f0 <LCD_Command>
	HAL_Delay(1);
 80025c8:	2001      	movs	r0, #1
 80025ca:	f000 fc55 	bl	8002e78 <HAL_Delay>
	LCD_Command(0x02);//возвращаем курсор в нулевое положение
 80025ce:	2002      	movs	r0, #2
 80025d0:	f7ff ff0e 	bl	80023f0 <LCD_Command>
	HAL_Delay(2);
 80025d4:	2002      	movs	r0, #2
 80025d6:	f000 fc4f 	bl	8002e78 <HAL_Delay>
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40010c00 	.word	0x40010c00

080025e4 <HAL_TIM_PeriodElapsedCallback>:
 	 последней страницы и нажмём кнопку на перейти на следующую, мы перейдём в начало, на 0-ую страницу
 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1)	// Попали сюда если таймер насчитал 0,3 сек
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)
 80025ec:	2102      	movs	r1, #2
 80025ee:	4808      	ldr	r0, [pc, #32]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80025f0:	f000 ff7a 	bl	80034e8 <HAL_GPIO_ReadPin>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		page_num++;		// Если все ещё устойчивый лог. увроень, то считаем что это не дребезг
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002606:	701a      	strb	r2, [r3, #0]
	}
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40010800 	.word	0x40010800
 8002614:	200002c0 	.word	0x200002c0

08002618 <printPressure>:
	  sprintf(str1, "T: %.3f", temp);
	  LCD_SetPos(0, 0);
	  LCD_SendString(str1);
}
void printPressure(float pres, float altitude)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
	  sprintf(str1, "P: %.3f mm", pres * 0.000750061683f);
 8002622:	4914      	ldr	r1, [pc, #80]	; (8002674 <printPressure+0x5c>)
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7fe fbad 	bl	8000d84 <__aeabi_fmul>
 800262a:	4603      	mov	r3, r0
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd fefb 	bl	8000428 <__aeabi_f2d>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4910      	ldr	r1, [pc, #64]	; (8002678 <printPressure+0x60>)
 8002638:	4810      	ldr	r0, [pc, #64]	; (800267c <printPressure+0x64>)
 800263a:	f005 fdb3 	bl	80081a4 <siprintf>
	  LCD_SetPos(0, 0);
 800263e:	2100      	movs	r1, #0
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff ff3e 	bl	80024c2 <LCD_SetPos>
	  LCD_SendString(str1);
 8002646:	480d      	ldr	r0, [pc, #52]	; (800267c <printPressure+0x64>)
 8002648:	f7ff ff06 	bl	8002458 <LCD_SendString>
	  sprintf(str1, "Altit: %.3f m", altitude);
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	f7fd feeb 	bl	8000428 <__aeabi_f2d>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	490a      	ldr	r1, [pc, #40]	; (8002680 <printPressure+0x68>)
 8002658:	4808      	ldr	r0, [pc, #32]	; (800267c <printPressure+0x64>)
 800265a:	f005 fda3 	bl	80081a4 <siprintf>
	  LCD_SetPos(0, 1);
 800265e:	2101      	movs	r1, #1
 8002660:	2000      	movs	r0, #0
 8002662:	f7ff ff2e 	bl	80024c2 <LCD_SetPos>
	  LCD_SendString(str1);
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <printPressure+0x64>)
 8002668:	f7ff fef6 	bl	8002458 <LCD_SendString>
	  /*	Завернули в строку сначала в формате мм. рт. ст. а потом в формате высоты над уровнем моря	*/
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	3a449fca 	.word	0x3a449fca
 8002678:	0800b468 	.word	0x0800b468
 800267c:	200002c4 	.word	0x200002c4
 8002680:	0800b474 	.word	0x0800b474

08002684 <printHumidity>:
void printHumidity(float hum)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	sprintf(str1, "Humid: %.3f %%", hum);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7fd fecb 	bl	8000428 <__aeabi_f2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4907      	ldr	r1, [pc, #28]	; (80026b4 <printHumidity+0x30>)
 8002698:	4807      	ldr	r0, [pc, #28]	; (80026b8 <printHumidity+0x34>)
 800269a:	f005 fd83 	bl	80081a4 <siprintf>
	LCD_SetPos(0, 0);
 800269e:	2100      	movs	r1, #0
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff ff0e 	bl	80024c2 <LCD_SetPos>
	LCD_SendString(str1);
 80026a6:	4804      	ldr	r0, [pc, #16]	; (80026b8 <printHumidity+0x34>)
 80026a8:	f7ff fed6 	bl	8002458 <LCD_SendString>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	0800b484 	.word	0x0800b484
 80026b8:	200002c4 	.word	0x200002c4

080026bc <printIllumination>:
void printIllumination(unsigned int lux)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	sprintf(str1, "Illum: %d lux", lux);
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4907      	ldr	r1, [pc, #28]	; (80026e4 <printIllumination+0x28>)
 80026c8:	4807      	ldr	r0, [pc, #28]	; (80026e8 <printIllumination+0x2c>)
 80026ca:	f005 fd6b 	bl	80081a4 <siprintf>
	LCD_SetPos(0, 0);
 80026ce:	2100      	movs	r1, #0
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7ff fef6 	bl	80024c2 <LCD_SetPos>
	LCD_SendString(str1);
 80026d6:	4804      	ldr	r0, [pc, #16]	; (80026e8 <printIllumination+0x2c>)
 80026d8:	f7ff febe 	bl	8002458 <LCD_SendString>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	0800b494 	.word	0x0800b494
 80026e8:	200002c4 	.word	0x200002c4

080026ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026ec:	b598      	push	{r3, r4, r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026f0:	f000 fb60 	bl	8002db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026f4:	f000 f854 	bl	80027a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026f8:	f000 f90c 	bl	8002914 <MX_GPIO_Init>
  MX_I2C2_Init();
 80026fc:	f000 f88c 	bl	8002818 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002700:	f000 f8b8 	bl	8002874 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_ini();
 8002704:	f7ff ff0a 	bl	800251c <LCD_ini>
  LCD_Clear();
 8002708:	f7ff fed1 	bl	80024ae <LCD_Clear>

  BME280_init();
 800270c:	f7ff fd52 	bl	80021b4 <BME280_init>
  HAL_Delay(1000);
 8002710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002714:	f000 fbb0 	bl	8002e78 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);	// Запустили таймер, который сработает через 0,3 сек
 8002718:	481e      	ldr	r0, [pc, #120]	; (8002794 <main+0xa8>)
 800271a:	f004 fcf9 	bl	8007110 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch (page_num) {
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <main+0xac>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b03      	cmp	r3, #3
 8002726:	d825      	bhi.n	8002774 <main+0x88>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <main+0x44>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	08002775 	.word	0x08002775
 8002734:	08002741 	.word	0x08002741
 8002738:	08002759 	.word	0x08002759
 800273c:	08002767 	.word	0x08002767
		case PAGE_0:
//			  printTemperature( BME280_readTemp() );
			break;

		case PAGE_1:
			  printPressure( BME280_readPress(), BME280_ReadAltitude(SEALEVELPRESSURE_PA) );
 8002740:	f7ff f9ec 	bl	8001b1c <BME280_readPress>
 8002744:	4604      	mov	r4, r0
 8002746:	4815      	ldr	r0, [pc, #84]	; (800279c <main+0xb0>)
 8002748:	f7ff fcf6 	bl	8002138 <BME280_ReadAltitude>
 800274c:	4603      	mov	r3, r0
 800274e:	4619      	mov	r1, r3
 8002750:	4620      	mov	r0, r4
 8002752:	f7ff ff61 	bl	8002618 <printPressure>
			break;
 8002756:	e00d      	b.n	8002774 <main+0x88>

		case PAGE_2:
			printHumidity( BME280_readHum() );
 8002758:	f7ff f914 	bl	8001984 <BME280_readHum>
 800275c:	4603      	mov	r3, r0
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ff90 	bl	8002684 <printHumidity>
			break;
 8002764:	e006      	b.n	8002774 <main+0x88>

		case PAGE_3:
			printIllumination( BH1750_ReadLux() );
 8002766:	f7fe fe19 	bl	800139c <BH1750_ReadLux>
 800276a:	4603      	mov	r3, r0
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ffa5 	bl	80026bc <printIllumination>
			break;
 8002772:	bf00      	nop
	  }
	  HAL_Delay(1000);
 8002774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002778:	f000 fb7e 	bl	8002e78 <HAL_Delay>
	  LCD_Clear();
 800277c:	f7ff fe97 	bl	80024ae <LCD_Clear>
	  if(page_num > 3) page_num = 0;		// Возврат к первой странице
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <main+0xac>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b03      	cmp	r3, #3
 8002788:	d9c9      	bls.n	800271e <main+0x32>
 800278a:	4b03      	ldr	r3, [pc, #12]	; (8002798 <main+0xac>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
	  switch (page_num) {
 8002790:	e7c5      	b.n	800271e <main+0x32>
 8002792:	bf00      	nop
 8002794:	20000278 	.word	0x20000278
 8002798:	200002c0 	.word	0x200002c0
 800279c:	49776020 	.word	0x49776020

080027a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b090      	sub	sp, #64	; 0x40
 80027a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027a6:	f107 0318 	add.w	r3, r7, #24
 80027aa:	2228      	movs	r2, #40	; 0x28
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f005 f890 	bl	80078d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	60da      	str	r2, [r3, #12]
 80027c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027c2:	2302      	movs	r3, #2
 80027c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027c6:	2301      	movs	r3, #1
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027ca:	2310      	movs	r3, #16
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d2:	f107 0318 	add.w	r3, r7, #24
 80027d6:	4618      	mov	r0, r3
 80027d8:	f004 f844 	bl	8006864 <HAL_RCC_OscConfig>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80027e2:	f000 f907 	bl	80029f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e6:	230f      	movs	r3, #15
 80027e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f004 fab1 	bl	8006d68 <HAL_RCC_ClockConfig>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800280c:	f000 f8f2 	bl	80029f4 <Error_Handler>
  }
}
 8002810:	bf00      	nop
 8002812:	3740      	adds	r7, #64	; 0x40
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <MX_I2C2_Init+0x50>)
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <MX_I2C2_Init+0x54>)
 8002820:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MX_I2C2_Init+0x50>)
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <MX_I2C2_Init+0x58>)
 8002826:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <MX_I2C2_Init+0x50>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_I2C2_Init+0x50>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_I2C2_Init+0x50>)
 8002836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800283a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <MX_I2C2_Init+0x50>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_I2C2_Init+0x50>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <MX_I2C2_Init+0x50>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_I2C2_Init+0x50>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002854:	4804      	ldr	r0, [pc, #16]	; (8002868 <MX_I2C2_Init+0x50>)
 8002856:	f000 fe77 	bl	8003548 <HAL_I2C_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002860:	f000 f8c8 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000224 	.word	0x20000224
 800286c:	40005800 	.word	0x40005800
 8002870:	000186a0 	.word	0x000186a0

08002874 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287a:	f107 0308 	add.w	r3, r7, #8
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002888:	463b      	mov	r3, r7
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002890:	4b1e      	ldr	r3, [pc, #120]	; (800290c <MX_TIM1_Init+0x98>)
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <MX_TIM1_Init+0x9c>)
 8002894:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <MX_TIM1_Init+0x98>)
 8002898:	224f      	movs	r2, #79	; 0x4f
 800289a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <MX_TIM1_Init+0x98>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <MX_TIM1_Init+0x98>)
 80028a4:	f247 5230 	movw	r2, #30000	; 0x7530
 80028a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <MX_TIM1_Init+0x98>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <MX_TIM1_Init+0x98>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <MX_TIM1_Init+0x98>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028bc:	4813      	ldr	r0, [pc, #76]	; (800290c <MX_TIM1_Init+0x98>)
 80028be:	f004 fbd7 	bl	8007070 <HAL_TIM_Base_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80028c8:	f000 f894 	bl	80029f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	4619      	mov	r1, r3
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <MX_TIM1_Init+0x98>)
 80028da:	f004 fd73 	bl	80073c4 <HAL_TIM_ConfigClockSource>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80028e4:	f000 f886 	bl	80029f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028f0:	463b      	mov	r3, r7
 80028f2:	4619      	mov	r1, r3
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <MX_TIM1_Init+0x98>)
 80028f6:	f004 ff45 	bl	8007784 <HAL_TIMEx_MasterConfigSynchronization>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002900:	f000 f878 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000278 	.word	0x20000278
 8002910:	40012c00 	.word	0x40012c00

08002914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002928:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <MX_GPIO_Init+0xd0>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a2d      	ldr	r2, [pc, #180]	; (80029e4 <MX_GPIO_Init+0xd0>)
 800292e:	f043 0310 	orr.w	r3, r3, #16
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <MX_GPIO_Init+0xd0>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <MX_GPIO_Init+0xd0>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <MX_GPIO_Init+0xd0>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <MX_GPIO_Init+0xd0>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002958:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <MX_GPIO_Init+0xd0>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <MX_GPIO_Init+0xd0>)
 800295e:	f043 0308 	orr.w	r3, r3, #8
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <MX_GPIO_Init+0xd0>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002970:	2200      	movs	r2, #0
 8002972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002976:	481c      	ldr	r0, [pc, #112]	; (80029e8 <MX_GPIO_Init+0xd4>)
 8002978:	f000 fdcd 	bl	8003516 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800297c:	2200      	movs	r2, #0
 800297e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8002982:	481a      	ldr	r0, [pc, #104]	; (80029ec <MX_GPIO_Init+0xd8>)
 8002984:	f000 fdc7 	bl	8003516 <HAL_GPIO_WritePin>
                          |E_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800298c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298e:	2301      	movs	r3, #1
 8002990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2302      	movs	r3, #2
 8002998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	4619      	mov	r1, r3
 80029a0:	4811      	ldr	r0, [pc, #68]	; (80029e8 <MX_GPIO_Init+0xd4>)
 80029a2:	f000 fc1d 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80029a6:	2302      	movs	r3, #2
 80029a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	4619      	mov	r1, r3
 80029b8:	480d      	ldr	r0, [pc, #52]	; (80029f0 <MX_GPIO_Init+0xdc>)
 80029ba:	f000 fc11 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           E_Pin RS_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80029be:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80029c2:	613b      	str	r3, [r7, #16]
                          |E_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c4:	2301      	movs	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	4619      	mov	r1, r3
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_GPIO_Init+0xd8>)
 80029d8:	f000 fc02 	bl	80031e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029dc:	bf00      	nop
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40011000 	.word	0x40011000
 80029ec:	40010c00 	.word	0x40010c00
 80029f0:	40010800 	.word	0x40010800

080029f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f8:	b672      	cpsid	i
}
 80029fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029fc:	e7fe      	b.n	80029fc <Error_Handler+0x8>
	...

08002a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_MspInit+0x5c>)
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_MspInit+0x5c>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6193      	str	r3, [r2, #24]
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_MspInit+0x5c>)
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_MspInit+0x5c>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_MspInit+0x5c>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	61d3      	str	r3, [r2, #28]
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_MspInit+0x5c>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_MspInit+0x60>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_MspInit+0x60>)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40010000 	.word	0x40010000

08002a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0310 	add.w	r3, r7, #16
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_I2C_MspInit+0x94>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d134      	bne.n	8002aee <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_I2C_MspInit+0x98>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <HAL_I2C_MspInit+0x98>)
 8002a8a:	f043 0308 	orr.w	r3, r3, #8
 8002a8e:	6193      	str	r3, [r2, #24]
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <HAL_I2C_MspInit+0x98>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa2:	2312      	movs	r3, #18
 8002aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4813      	ldr	r0, [pc, #76]	; (8002b00 <HAL_I2C_MspInit+0x9c>)
 8002ab2:	f000 fb95 	bl	80031e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_I2C_MspInit+0x98>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_I2C_MspInit+0x98>)
 8002abc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ac0:	61d3      	str	r3, [r2, #28]
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_I2C_MspInit+0x98>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2021      	movs	r0, #33	; 0x21
 8002ad4:	f000 facb 	bl	800306e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002ad8:	2021      	movs	r0, #33	; 0x21
 8002ada:	f000 fae4 	bl	80030a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	2022      	movs	r0, #34	; 0x22
 8002ae4:	f000 fac3 	bl	800306e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002ae8:	2022      	movs	r0, #34	; 0x22
 8002aea:	f000 fadc 	bl	80030a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002aee:	bf00      	nop
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40005800 	.word	0x40005800
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40010c00 	.word	0x40010c00

08002b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <HAL_TIM_Base_MspInit+0x44>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d113      	bne.n	8002b3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <HAL_TIM_Base_MspInit+0x48>)
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <HAL_TIM_Base_MspInit+0x48>)
 8002b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b20:	6193      	str	r3, [r2, #24]
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <HAL_TIM_Base_MspInit+0x48>)
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	2019      	movs	r0, #25
 8002b34:	f000 fa9b 	bl	800306e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002b38:	2019      	movs	r0, #25
 8002b3a:	f000 fab4 	bl	80030a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40012c00 	.word	0x40012c00
 8002b4c:	40021000 	.word	0x40021000

08002b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <NMI_Handler+0x4>

08002b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5a:	e7fe      	b.n	8002b5a <HardFault_Handler+0x4>

08002b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <MemManage_Handler+0x4>

08002b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <BusFault_Handler+0x4>

08002b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <UsageFault_Handler+0x4>

08002b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b96:	f000 f953 	bl	8002e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <TIM1_UP_IRQHandler+0x10>)
 8002ba6:	f004 fb05 	bl	80071b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000278 	.word	0x20000278

08002bb4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <I2C2_EV_IRQHandler+0x10>)
 8002bba:	f001 fcc9 	bl	8004550 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000224 	.word	0x20000224

08002bc8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <I2C2_ER_IRQHandler+0x10>)
 8002bce:	f001 fe30 	bl	8004832 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000224 	.word	0x20000224

08002bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return 1;
 8002be0:	2301      	movs	r3, #1
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <_kill>:

int _kill(int pid, int sig)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bf4:	f004 fe36 	bl	8007864 <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2216      	movs	r2, #22
 8002bfc:	601a      	str	r2, [r3, #0]
  return -1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_exit>:

void _exit (int status)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c12:	f04f 31ff 	mov.w	r1, #4294967295
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ffe7 	bl	8002bea <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c1c:	e7fe      	b.n	8002c1c <_exit+0x12>

08002c1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e00a      	b.n	8002c46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c30:	f3af 8000 	nop.w
 8002c34:	4601      	mov	r1, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	60ba      	str	r2, [r7, #8]
 8002c3c:	b2ca      	uxtb	r2, r1
 8002c3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3301      	adds	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	dbf0      	blt.n	8002c30 <_read+0x12>
  }

  return len;
 8002c4e:	687b      	ldr	r3, [r7, #4]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e009      	b.n	8002c7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	60ba      	str	r2, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	dbf1      	blt.n	8002c6a <_write+0x12>
  }
  return len;
 8002c86:	687b      	ldr	r3, [r7, #4]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_close>:

int _close(int file)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb6:	605a      	str	r2, [r3, #4]
  return 0;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <_isatty>:

int _isatty(int file)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ccc:	2301      	movs	r3, #1
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <_sbrk+0x5c>)
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <_sbrk+0x60>)
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <_sbrk+0x64>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <_sbrk+0x64>)
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <_sbrk+0x68>)
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d207      	bcs.n	8002d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d20:	f004 fda0 	bl	8007864 <__errno>
 8002d24:	4603      	mov	r3, r0
 8002d26:	220c      	movs	r2, #12
 8002d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	e009      	b.n	8002d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <_sbrk+0x64>)
 8002d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20005000 	.word	0x20005000
 8002d50:	00000400 	.word	0x00000400
 8002d54:	200002d8 	.word	0x200002d8
 8002d58:	200002f0 	.word	0x200002f0

08002d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d68:	480c      	ldr	r0, [pc, #48]	; (8002d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d6a:	490d      	ldr	r1, [pc, #52]	; (8002da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	; (8002da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d70:	e002      	b.n	8002d78 <LoopCopyDataInit>

08002d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d76:	3304      	adds	r3, #4

08002d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d7c:	d3f9      	bcc.n	8002d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d80:	4c0a      	ldr	r4, [pc, #40]	; (8002dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d84:	e001      	b.n	8002d8a <LoopFillZerobss>

08002d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d88:	3204      	adds	r2, #4

08002d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d8c:	d3fb      	bcc.n	8002d86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d8e:	f7ff ffe5 	bl	8002d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d92:	f004 fd6d 	bl	8007870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d96:	f7ff fca9 	bl	80026ec <main>
  bx lr
 8002d9a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002da4:	0800b8e8 	.word	0x0800b8e8
  ldr r2, =_sbss
 8002da8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002dac:	200002f0 	.word	0x200002f0

08002db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002db0:	e7fe      	b.n	8002db0 <ADC1_2_IRQHandler>
	...

08002db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_Init+0x28>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <HAL_Init+0x28>)
 8002dbe:	f043 0310 	orr.w	r3, r3, #16
 8002dc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f000 f947 	bl	8003058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dca:	200f      	movs	r0, #15
 8002dcc:	f000 f808 	bl	8002de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd0:	f7ff fe16 	bl	8002a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40022000 	.word	0x40022000

08002de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de8:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_InitTick+0x54>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_InitTick+0x58>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f95f 	bl	80030c2 <HAL_SYSTICK_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00e      	b.n	8002e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d80a      	bhi.n	8002e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e14:	2200      	movs	r2, #0
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f000 f927 	bl	800306e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e20:	4a06      	ldr	r2, [pc, #24]	; (8002e3c <HAL_InitTick+0x5c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000008 	.word	0x20000008
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_IncTick+0x1c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_IncTick+0x20>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a03      	ldr	r2, [pc, #12]	; (8002e60 <HAL_IncTick+0x20>)
 8002e52:	6013      	str	r3, [r2, #0]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	20000008 	.word	0x20000008
 8002e60:	200002dc 	.word	0x200002dc

08002e64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b02      	ldr	r3, [pc, #8]	; (8002e74 <HAL_GetTick+0x10>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	200002dc 	.word	0x200002dc

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffe0 	bl	8002e64 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000008 	.word	0x20000008

08002ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4906      	ldr	r1, [pc, #24]	; (8002f58 <__NVIC_EnableIRQ+0x34>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100

08002f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	db0a      	blt.n	8002f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	490c      	ldr	r1, [pc, #48]	; (8002fa8 <__NVIC_SetPriority+0x4c>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f84:	e00a      	b.n	8002f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4908      	ldr	r1, [pc, #32]	; (8002fac <__NVIC_SetPriority+0x50>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3b04      	subs	r3, #4
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	440b      	add	r3, r1
 8002f9a:	761a      	strb	r2, [r3, #24]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e100 	.word	0xe000e100
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	; 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f1c3 0307 	rsb	r3, r3, #7
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	bf28      	it	cs
 8002fce:	2304      	movcs	r3, #4
 8002fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d902      	bls.n	8002fe0 <NVIC_EncodePriority+0x30>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3b03      	subs	r3, #3
 8002fde:	e000      	b.n	8002fe2 <NVIC_EncodePriority+0x32>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	43d9      	mvns	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	4313      	orrs	r3, r2
         );
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003024:	d301      	bcc.n	800302a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003026:	2301      	movs	r3, #1
 8003028:	e00f      	b.n	800304a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302a:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <SysTick_Config+0x40>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003032:	210f      	movs	r1, #15
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	f7ff ff90 	bl	8002f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <SysTick_Config+0x40>)
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003042:	4b04      	ldr	r3, [pc, #16]	; (8003054 <SysTick_Config+0x40>)
 8003044:	2207      	movs	r2, #7
 8003046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	e000e010 	.word	0xe000e010

08003058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ff2d 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	4603      	mov	r3, r0
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003080:	f7ff ff42 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 8003084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	6978      	ldr	r0, [r7, #20]
 800308c:	f7ff ff90 	bl	8002fb0 <NVIC_EncodePriority>
 8003090:	4602      	mov	r2, r0
 8003092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff5f 	bl	8002f5c <__NVIC_SetPriority>
}
 800309e:	bf00      	nop
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff35 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ffa2 	bl	8003014 <SysTick_Config>
 80030d0:	4603      	mov	r3, r0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d005      	beq.n	80030fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2204      	movs	r2, #4
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	e051      	b.n	80031a2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 020e 	bic.w	r2, r2, #14
 800310c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0201 	bic.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a22      	ldr	r2, [pc, #136]	; (80031ac <HAL_DMA_Abort_IT+0xd0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d029      	beq.n	800317c <HAL_DMA_Abort_IT+0xa0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a20      	ldr	r2, [pc, #128]	; (80031b0 <HAL_DMA_Abort_IT+0xd4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d022      	beq.n	8003178 <HAL_DMA_Abort_IT+0x9c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <HAL_DMA_Abort_IT+0xd8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d01a      	beq.n	8003172 <HAL_DMA_Abort_IT+0x96>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1d      	ldr	r2, [pc, #116]	; (80031b8 <HAL_DMA_Abort_IT+0xdc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d012      	beq.n	800316c <HAL_DMA_Abort_IT+0x90>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1c      	ldr	r2, [pc, #112]	; (80031bc <HAL_DMA_Abort_IT+0xe0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00a      	beq.n	8003166 <HAL_DMA_Abort_IT+0x8a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1a      	ldr	r2, [pc, #104]	; (80031c0 <HAL_DMA_Abort_IT+0xe4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d102      	bne.n	8003160 <HAL_DMA_Abort_IT+0x84>
 800315a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800315e:	e00e      	b.n	800317e <HAL_DMA_Abort_IT+0xa2>
 8003160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003164:	e00b      	b.n	800317e <HAL_DMA_Abort_IT+0xa2>
 8003166:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800316a:	e008      	b.n	800317e <HAL_DMA_Abort_IT+0xa2>
 800316c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003170:	e005      	b.n	800317e <HAL_DMA_Abort_IT+0xa2>
 8003172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003176:	e002      	b.n	800317e <HAL_DMA_Abort_IT+0xa2>
 8003178:	2310      	movs	r3, #16
 800317a:	e000      	b.n	800317e <HAL_DMA_Abort_IT+0xa2>
 800317c:	2301      	movs	r3, #1
 800317e:	4a11      	ldr	r2, [pc, #68]	; (80031c4 <HAL_DMA_Abort_IT+0xe8>)
 8003180:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	4798      	blx	r3
    } 
  }
  return status;
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40020008 	.word	0x40020008
 80031b0:	4002001c 	.word	0x4002001c
 80031b4:	40020030 	.word	0x40020030
 80031b8:	40020044 	.word	0x40020044
 80031bc:	40020058 	.word	0x40020058
 80031c0:	4002006c 	.word	0x4002006c
 80031c4:	40020000 	.word	0x40020000

080031c8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b08b      	sub	sp, #44	; 0x2c
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f2:	e169      	b.n	80034c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031f4:	2201      	movs	r2, #1
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	429a      	cmp	r2, r3
 800320e:	f040 8158 	bne.w	80034c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4a9a      	ldr	r2, [pc, #616]	; (8003480 <HAL_GPIO_Init+0x2a0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d05e      	beq.n	80032da <HAL_GPIO_Init+0xfa>
 800321c:	4a98      	ldr	r2, [pc, #608]	; (8003480 <HAL_GPIO_Init+0x2a0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d875      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 8003222:	4a98      	ldr	r2, [pc, #608]	; (8003484 <HAL_GPIO_Init+0x2a4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d058      	beq.n	80032da <HAL_GPIO_Init+0xfa>
 8003228:	4a96      	ldr	r2, [pc, #600]	; (8003484 <HAL_GPIO_Init+0x2a4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d86f      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 800322e:	4a96      	ldr	r2, [pc, #600]	; (8003488 <HAL_GPIO_Init+0x2a8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d052      	beq.n	80032da <HAL_GPIO_Init+0xfa>
 8003234:	4a94      	ldr	r2, [pc, #592]	; (8003488 <HAL_GPIO_Init+0x2a8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d869      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 800323a:	4a94      	ldr	r2, [pc, #592]	; (800348c <HAL_GPIO_Init+0x2ac>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d04c      	beq.n	80032da <HAL_GPIO_Init+0xfa>
 8003240:	4a92      	ldr	r2, [pc, #584]	; (800348c <HAL_GPIO_Init+0x2ac>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d863      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 8003246:	4a92      	ldr	r2, [pc, #584]	; (8003490 <HAL_GPIO_Init+0x2b0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d046      	beq.n	80032da <HAL_GPIO_Init+0xfa>
 800324c:	4a90      	ldr	r2, [pc, #576]	; (8003490 <HAL_GPIO_Init+0x2b0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d85d      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 8003252:	2b12      	cmp	r3, #18
 8003254:	d82a      	bhi.n	80032ac <HAL_GPIO_Init+0xcc>
 8003256:	2b12      	cmp	r3, #18
 8003258:	d859      	bhi.n	800330e <HAL_GPIO_Init+0x12e>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <HAL_GPIO_Init+0x80>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	080032db 	.word	0x080032db
 8003264:	080032b5 	.word	0x080032b5
 8003268:	080032c7 	.word	0x080032c7
 800326c:	08003309 	.word	0x08003309
 8003270:	0800330f 	.word	0x0800330f
 8003274:	0800330f 	.word	0x0800330f
 8003278:	0800330f 	.word	0x0800330f
 800327c:	0800330f 	.word	0x0800330f
 8003280:	0800330f 	.word	0x0800330f
 8003284:	0800330f 	.word	0x0800330f
 8003288:	0800330f 	.word	0x0800330f
 800328c:	0800330f 	.word	0x0800330f
 8003290:	0800330f 	.word	0x0800330f
 8003294:	0800330f 	.word	0x0800330f
 8003298:	0800330f 	.word	0x0800330f
 800329c:	0800330f 	.word	0x0800330f
 80032a0:	0800330f 	.word	0x0800330f
 80032a4:	080032bd 	.word	0x080032bd
 80032a8:	080032d1 	.word	0x080032d1
 80032ac:	4a79      	ldr	r2, [pc, #484]	; (8003494 <HAL_GPIO_Init+0x2b4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032b2:	e02c      	b.n	800330e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	623b      	str	r3, [r7, #32]
          break;
 80032ba:	e029      	b.n	8003310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	3304      	adds	r3, #4
 80032c2:	623b      	str	r3, [r7, #32]
          break;
 80032c4:	e024      	b.n	8003310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	3308      	adds	r3, #8
 80032cc:	623b      	str	r3, [r7, #32]
          break;
 80032ce:	e01f      	b.n	8003310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	330c      	adds	r3, #12
 80032d6:	623b      	str	r3, [r7, #32]
          break;
 80032d8:	e01a      	b.n	8003310 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032e2:	2304      	movs	r3, #4
 80032e4:	623b      	str	r3, [r7, #32]
          break;
 80032e6:	e013      	b.n	8003310 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d105      	bne.n	80032fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032f0:	2308      	movs	r3, #8
 80032f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	611a      	str	r2, [r3, #16]
          break;
 80032fa:	e009      	b.n	8003310 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032fc:	2308      	movs	r3, #8
 80032fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	615a      	str	r2, [r3, #20]
          break;
 8003306:	e003      	b.n	8003310 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003308:	2300      	movs	r3, #0
 800330a:	623b      	str	r3, [r7, #32]
          break;
 800330c:	e000      	b.n	8003310 <HAL_GPIO_Init+0x130>
          break;
 800330e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2bff      	cmp	r3, #255	; 0xff
 8003314:	d801      	bhi.n	800331a <HAL_GPIO_Init+0x13a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	e001      	b.n	800331e <HAL_GPIO_Init+0x13e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2bff      	cmp	r3, #255	; 0xff
 8003324:	d802      	bhi.n	800332c <HAL_GPIO_Init+0x14c>
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	e002      	b.n	8003332 <HAL_GPIO_Init+0x152>
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	3b08      	subs	r3, #8
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	210f      	movs	r1, #15
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	401a      	ands	r2, r3
 8003344:	6a39      	ldr	r1, [r7, #32]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	431a      	orrs	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80b1 	beq.w	80034c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003360:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <HAL_GPIO_Init+0x2b8>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	4a4c      	ldr	r2, [pc, #304]	; (8003498 <HAL_GPIO_Init+0x2b8>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6193      	str	r3, [r2, #24]
 800336c:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_GPIO_Init+0x2b8>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003378:	4a48      	ldr	r2, [pc, #288]	; (800349c <HAL_GPIO_Init+0x2bc>)
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	3302      	adds	r3, #2
 8003380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003384:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	220f      	movs	r2, #15
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a40      	ldr	r2, [pc, #256]	; (80034a0 <HAL_GPIO_Init+0x2c0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <HAL_GPIO_Init+0x1ec>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3f      	ldr	r2, [pc, #252]	; (80034a4 <HAL_GPIO_Init+0x2c4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00d      	beq.n	80033c8 <HAL_GPIO_Init+0x1e8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3e      	ldr	r2, [pc, #248]	; (80034a8 <HAL_GPIO_Init+0x2c8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <HAL_GPIO_Init+0x1e4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a3d      	ldr	r2, [pc, #244]	; (80034ac <HAL_GPIO_Init+0x2cc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_GPIO_Init+0x1e0>
 80033bc:	2303      	movs	r3, #3
 80033be:	e006      	b.n	80033ce <HAL_GPIO_Init+0x1ee>
 80033c0:	2304      	movs	r3, #4
 80033c2:	e004      	b.n	80033ce <HAL_GPIO_Init+0x1ee>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e002      	b.n	80033ce <HAL_GPIO_Init+0x1ee>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_GPIO_Init+0x1ee>
 80033cc:	2300      	movs	r3, #0
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	f002 0203 	and.w	r2, r2, #3
 80033d4:	0092      	lsls	r2, r2, #2
 80033d6:	4093      	lsls	r3, r2
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033de:	492f      	ldr	r1, [pc, #188]	; (800349c <HAL_GPIO_Init+0x2bc>)
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	3302      	adds	r3, #2
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d006      	beq.n	8003406 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033f8:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	492c      	ldr	r1, [pc, #176]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003406:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	43db      	mvns	r3, r3
 800340e:	4928      	ldr	r1, [pc, #160]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 8003410:	4013      	ands	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003420:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	4922      	ldr	r1, [pc, #136]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800342e:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	43db      	mvns	r3, r3
 8003436:	491e      	ldr	r1, [pc, #120]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 8003438:	4013      	ands	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d006      	beq.n	8003456 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	4918      	ldr	r1, [pc, #96]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003456:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	43db      	mvns	r3, r3
 800345e:	4914      	ldr	r1, [pc, #80]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 8003460:	4013      	ands	r3, r2
 8003462:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d021      	beq.n	80034b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_GPIO_Init+0x2d0>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	60cb      	str	r3, [r1, #12]
 800347c:	e021      	b.n	80034c2 <HAL_GPIO_Init+0x2e2>
 800347e:	bf00      	nop
 8003480:	10320000 	.word	0x10320000
 8003484:	10310000 	.word	0x10310000
 8003488:	10220000 	.word	0x10220000
 800348c:	10210000 	.word	0x10210000
 8003490:	10120000 	.word	0x10120000
 8003494:	10110000 	.word	0x10110000
 8003498:	40021000 	.word	0x40021000
 800349c:	40010000 	.word	0x40010000
 80034a0:	40010800 	.word	0x40010800
 80034a4:	40010c00 	.word	0x40010c00
 80034a8:	40011000 	.word	0x40011000
 80034ac:	40011400 	.word	0x40011400
 80034b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_GPIO_Init+0x304>)
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	4909      	ldr	r1, [pc, #36]	; (80034e4 <HAL_GPIO_Init+0x304>)
 80034be:	4013      	ands	r3, r2
 80034c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	3301      	adds	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f47f ae8e 	bne.w	80031f4 <HAL_GPIO_Init+0x14>
  }
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	372c      	adds	r7, #44	; 0x2c
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	40010400 	.word	0x40010400

080034e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	887b      	ldrh	r3, [r7, #2]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	e001      	b.n	800350a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	807b      	strh	r3, [r7, #2]
 8003522:	4613      	mov	r3, r2
 8003524:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003526:	787b      	ldrb	r3, [r7, #1]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352c:	887a      	ldrh	r2, [r7, #2]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003532:	e003      	b.n	800353c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003534:	887b      	ldrh	r3, [r7, #2]
 8003536:	041a      	lsls	r2, r3, #16
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	611a      	str	r2, [r3, #16]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr
	...

08003548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e12b      	b.n	80037b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fa78 	bl	8002a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2224      	movs	r2, #36	; 0x24
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800359a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035ac:	f003 fd2e 	bl	800700c <HAL_RCC_GetPCLK1Freq>
 80035b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a81      	ldr	r2, [pc, #516]	; (80037bc <HAL_I2C_Init+0x274>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d807      	bhi.n	80035cc <HAL_I2C_Init+0x84>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a80      	ldr	r2, [pc, #512]	; (80037c0 <HAL_I2C_Init+0x278>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bf94      	ite	ls
 80035c4:	2301      	movls	r3, #1
 80035c6:	2300      	movhi	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e006      	b.n	80035da <HAL_I2C_Init+0x92>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a7d      	ldr	r2, [pc, #500]	; (80037c4 <HAL_I2C_Init+0x27c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bf94      	ite	ls
 80035d4:	2301      	movls	r3, #1
 80035d6:	2300      	movhi	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0e7      	b.n	80037b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a78      	ldr	r2, [pc, #480]	; (80037c8 <HAL_I2C_Init+0x280>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0c9b      	lsrs	r3, r3, #18
 80035ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a6a      	ldr	r2, [pc, #424]	; (80037bc <HAL_I2C_Init+0x274>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d802      	bhi.n	800361c <HAL_I2C_Init+0xd4>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3301      	adds	r3, #1
 800361a:	e009      	b.n	8003630 <HAL_I2C_Init+0xe8>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	4a69      	ldr	r2, [pc, #420]	; (80037cc <HAL_I2C_Init+0x284>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	3301      	adds	r3, #1
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	430b      	orrs	r3, r1
 8003636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003642:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	495c      	ldr	r1, [pc, #368]	; (80037bc <HAL_I2C_Init+0x274>)
 800364c:	428b      	cmp	r3, r1
 800364e:	d819      	bhi.n	8003684 <HAL_I2C_Init+0x13c>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e59      	subs	r1, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fbb1 f3f3 	udiv	r3, r1, r3
 800365e:	1c59      	adds	r1, r3, #1
 8003660:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003664:	400b      	ands	r3, r1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_I2C_Init+0x138>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1e59      	subs	r1, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fbb1 f3f3 	udiv	r3, r1, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367e:	e051      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003680:	2304      	movs	r3, #4
 8003682:	e04f      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d111      	bne.n	80036b0 <HAL_I2C_Init+0x168>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	440b      	add	r3, r1
 800369a:	fbb0 f3f3 	udiv	r3, r0, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e012      	b.n	80036d6 <HAL_I2C_Init+0x18e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1e58      	subs	r0, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	0099      	lsls	r1, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c6:	3301      	adds	r3, #1
 80036c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Init+0x196>
 80036da:	2301      	movs	r3, #1
 80036dc:	e022      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10e      	bne.n	8003704 <HAL_I2C_Init+0x1bc>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1e58      	subs	r0, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	440b      	add	r3, r1
 80036f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003702:	e00f      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	0099      	lsls	r1, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	6809      	ldr	r1, [r1, #0]
 8003728:	4313      	orrs	r3, r2
 800372a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003752:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6911      	ldr	r1, [r2, #16]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68d2      	ldr	r2, [r2, #12]
 800375e:	4311      	orrs	r1, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	430b      	orrs	r3, r1
 8003766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	000186a0 	.word	0x000186a0
 80037c0:	001e847f 	.word	0x001e847f
 80037c4:	003d08ff 	.word	0x003d08ff
 80037c8:	431bde83 	.word	0x431bde83
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	461a      	mov	r2, r3
 80037dc:	460b      	mov	r3, r1
 80037de:	817b      	strh	r3, [r7, #10]
 80037e0:	4613      	mov	r3, r2
 80037e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037e4:	f7ff fb3e 	bl	8002e64 <HAL_GetTick>
 80037e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	f040 80e0 	bne.w	80039b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2319      	movs	r3, #25
 80037fe:	2201      	movs	r2, #1
 8003800:	4970      	ldr	r1, [pc, #448]	; (80039c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f002 fe06 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800380e:	2302      	movs	r3, #2
 8003810:	e0d3      	b.n	80039ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_I2C_Master_Transmit+0x50>
 800381c:	2302      	movs	r3, #2
 800381e:	e0cc      	b.n	80039ba <HAL_I2C_Master_Transmit+0x1ea>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d007      	beq.n	8003846 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003854:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2221      	movs	r2, #33	; 0x21
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2210      	movs	r2, #16
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	893a      	ldrh	r2, [r7, #8]
 8003876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a50      	ldr	r2, [pc, #320]	; (80039c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003888:	8979      	ldrh	r1, [r7, #10]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f002 fa4a 	bl	8005d28 <I2C_MasterRequestWrite>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e08d      	b.n	80039ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038b4:	e066      	b.n	8003984 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	6a39      	ldr	r1, [r7, #32]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f002 fe80 	bl	80065c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00d      	beq.n	80038e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d107      	bne.n	80038de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e06b      	b.n	80039ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	781a      	ldrb	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d11b      	bne.n	8003958 <HAL_I2C_Master_Transmit+0x188>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	d017      	beq.n	8003958 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	6a39      	ldr	r1, [r7, #32]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f002 fe70 	bl	8006642 <I2C_WaitOnBTFFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	2b04      	cmp	r3, #4
 800396e:	d107      	bne.n	8003980 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e01a      	b.n	80039ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	d194      	bne.n	80038b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e000      	b.n	80039ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	00100002 	.word	0x00100002
 80039c8:	ffff0000 	.word	0xffff0000

080039cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08c      	sub	sp, #48	; 0x30
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	461a      	mov	r2, r3
 80039d8:	460b      	mov	r3, r1
 80039da:	817b      	strh	r3, [r7, #10]
 80039dc:	4613      	mov	r3, r2
 80039de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039e4:	f7ff fa3e 	bl	8002e64 <HAL_GetTick>
 80039e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	f040 823f 	bne.w	8003e76 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2319      	movs	r3, #25
 80039fe:	2201      	movs	r2, #1
 8003a00:	497f      	ldr	r1, [pc, #508]	; (8003c00 <HAL_I2C_Master_Receive+0x234>)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f002 fd06 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e232      	b.n	8003e78 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2C_Master_Receive+0x54>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e22b      	b.n	8003e78 <HAL_I2C_Master_Receive+0x4ac>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d007      	beq.n	8003a46 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2222      	movs	r2, #34	; 0x22
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2210      	movs	r2, #16
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	893a      	ldrh	r2, [r7, #8]
 8003a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a5f      	ldr	r2, [pc, #380]	; (8003c04 <HAL_I2C_Master_Receive+0x238>)
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a88:	8979      	ldrh	r1, [r7, #10]
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f002 f9cc 	bl	8005e2c <I2C_MasterRequestRead>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e1ec      	b.n	8003e78 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d113      	bne.n	8003ace <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e1c0      	b.n	8003e50 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d11e      	bne.n	8003b14 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae6:	b672      	cpsid	i
}
 8003ae8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b10:	b662      	cpsie	i
}
 8003b12:	e035      	b.n	8003b80 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11e      	bne.n	8003b5a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b2c:	b672      	cpsid	i
}
 8003b2e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b56:	b662      	cpsie	i
}
 8003b58:	e012      	b.n	8003b80 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b80:	e166      	b.n	8003e50 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	f200 811f 	bhi.w	8003dca <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d123      	bne.n	8003bdc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f002 fdc5 	bl	8006728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e167      	b.n	8003e78 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bda:	e139      	b.n	8003e50 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d152      	bne.n	8003c8a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	2200      	movs	r2, #0
 8003bec:	4906      	ldr	r1, [pc, #24]	; (8003c08 <HAL_I2C_Master_Receive+0x23c>)
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f002 fc10 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e13c      	b.n	8003e78 <HAL_I2C_Master_Receive+0x4ac>
 8003bfe:	bf00      	nop
 8003c00:	00100002 	.word	0x00100002
 8003c04:	ffff0000 	.word	0xffff0000
 8003c08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c0c:	b672      	cpsid	i
}
 8003c0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c52:	b662      	cpsie	i
}
 8003c54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c88:	e0e2      	b.n	8003e50 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	2200      	movs	r2, #0
 8003c92:	497b      	ldr	r1, [pc, #492]	; (8003e80 <HAL_I2C_Master_Receive+0x4b4>)
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f002 fbbd 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0e9      	b.n	8003e78 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb4:	b672      	cpsid	i
}
 8003cb6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cea:	4b66      	ldr	r3, [pc, #408]	; (8003e84 <HAL_I2C_Master_Receive+0x4b8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	08db      	lsrs	r3, r3, #3
 8003cf0:	4a65      	ldr	r2, [pc, #404]	; (8003e88 <HAL_I2C_Master_Receive+0x4bc>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	0a1a      	lsrs	r2, r3, #8
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00da      	lsls	r2, r3, #3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d118      	bne.n	8003d42 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f043 0220 	orr.w	r2, r3, #32
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d32:	b662      	cpsie	i
}
 8003d34:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e09a      	b.n	8003e78 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d1d9      	bne.n	8003d04 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d92:	b662      	cpsie	i
}
 8003d94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc8:	e042      	b.n	8003e50 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f002 fcaa 	bl	8006728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e04c      	b.n	8003e78 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d118      	bne.n	8003e50 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f47f ae94 	bne.w	8003b82 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	00010004 	.word	0x00010004
 8003e84:	20000000 	.word	0x20000000
 8003e88:	14f8b589 	.word	0x14f8b589

08003e8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	817b      	strh	r3, [r7, #10]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	813b      	strh	r3, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ea6:	f7fe ffdd 	bl	8002e64 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	f040 80d9 	bne.w	800406c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	2319      	movs	r3, #25
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	496d      	ldr	r1, [pc, #436]	; (8004078 <HAL_I2C_Mem_Write+0x1ec>)
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f002 faa5 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e0cc      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2C_Mem_Write+0x56>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e0c5      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d007      	beq.n	8003f08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2221      	movs	r2, #33	; 0x21
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2240      	movs	r2, #64	; 0x40
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a4d      	ldr	r2, [pc, #308]	; (800407c <HAL_I2C_Mem_Write+0x1f0>)
 8003f48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f4a:	88f8      	ldrh	r0, [r7, #6]
 8003f4c:	893a      	ldrh	r2, [r7, #8]
 8003f4e:	8979      	ldrh	r1, [r7, #10]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	4603      	mov	r3, r0
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f002 f834 	bl	8005fc8 <I2C_RequestMemoryWrite>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d052      	beq.n	800400c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e081      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f002 fb26 	bl	80065c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d107      	bne.n	8003f92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e06b      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d11b      	bne.n	800400c <HAL_I2C_Mem_Write+0x180>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d017      	beq.n	800400c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1aa      	bne.n	8003f6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f002 fb12 	bl	8006642 <I2C_WaitOnBTFFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	2b04      	cmp	r3, #4
 800402a:	d107      	bne.n	800403c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e016      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	00100002 	.word	0x00100002
 800407c:	ffff0000 	.word	0xffff0000

08004080 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	; 0x30
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	4608      	mov	r0, r1
 800408a:	4611      	mov	r1, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4603      	mov	r3, r0
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	460b      	mov	r3, r1
 8004094:	813b      	strh	r3, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800409e:	f7fe fee1 	bl	8002e64 <HAL_GetTick>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	f040 8244 	bne.w	800453a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	2319      	movs	r3, #25
 80040b8:	2201      	movs	r2, #1
 80040ba:	4982      	ldr	r1, [pc, #520]	; (80042c4 <HAL_I2C_Mem_Read+0x244>)
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f002 f9a9 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
 80040ca:	e237      	b.n	800453c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_I2C_Mem_Read+0x5a>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e230      	b.n	800453c <HAL_I2C_Mem_Read+0x4bc>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d007      	beq.n	8004100 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800410e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2222      	movs	r2, #34	; 0x22
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2240      	movs	r2, #64	; 0x40
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4a62      	ldr	r2, [pc, #392]	; (80042c8 <HAL_I2C_Mem_Read+0x248>)
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004142:	88f8      	ldrh	r0, [r7, #6]
 8004144:	893a      	ldrh	r2, [r7, #8]
 8004146:	8979      	ldrh	r1, [r7, #10]
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	4603      	mov	r3, r0
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f001 ffce 	bl	80060f4 <I2C_RequestMemoryRead>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e1ec      	b.n	800453c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	d113      	bne.n	8004192 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e1c0      	b.n	8004514 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004196:	2b01      	cmp	r3, #1
 8004198:	d11e      	bne.n	80041d8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041aa:	b672      	cpsid	i
}
 80041ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041d4:	b662      	cpsie	i
}
 80041d6:	e035      	b.n	8004244 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d11e      	bne.n	800421e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041f0:	b672      	cpsid	i
}
 80041f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004218:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800421a:	b662      	cpsie	i
}
 800421c:	e012      	b.n	8004244 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800422c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004244:	e166      	b.n	8004514 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	2b03      	cmp	r3, #3
 800424c:	f200 811f 	bhi.w	800448e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004254:	2b01      	cmp	r3, #1
 8004256:	d123      	bne.n	80042a0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f002 fa63 	bl	8006728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e167      	b.n	800453c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800429e:	e139      	b.n	8004514 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d152      	bne.n	800434e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	2200      	movs	r2, #0
 80042b0:	4906      	ldr	r1, [pc, #24]	; (80042cc <HAL_I2C_Mem_Read+0x24c>)
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f002 f8ae 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e13c      	b.n	800453c <HAL_I2C_Mem_Read+0x4bc>
 80042c2:	bf00      	nop
 80042c4:	00100002 	.word	0x00100002
 80042c8:	ffff0000 	.word	0xffff0000
 80042cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80042d0:	b672      	cpsid	i
}
 80042d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004316:	b662      	cpsie	i
}
 8004318:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800434c:	e0e2      	b.n	8004514 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	2200      	movs	r2, #0
 8004356:	497b      	ldr	r1, [pc, #492]	; (8004544 <HAL_I2C_Mem_Read+0x4c4>)
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f002 f85b 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0e9      	b.n	800453c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004376:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004378:	b672      	cpsid	i
}
 800437a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80043ae:	4b66      	ldr	r3, [pc, #408]	; (8004548 <HAL_I2C_Mem_Read+0x4c8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	08db      	lsrs	r3, r3, #3
 80043b4:	4a65      	ldr	r2, [pc, #404]	; (800454c <HAL_I2C_Mem_Read+0x4cc>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	0a1a      	lsrs	r2, r3, #8
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	00da      	lsls	r2, r3, #3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d118      	bne.n	8004406 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80043f6:	b662      	cpsie	i
}
 80043f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e09a      	b.n	800453c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b04      	cmp	r3, #4
 8004412:	d1d9      	bne.n	80043c8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004456:	b662      	cpsie	i
}
 8004458:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800448c:	e042      	b.n	8004514 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f002 f948 	bl	8006728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e04c      	b.n	800453c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d118      	bne.n	8004514 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	2b00      	cmp	r3, #0
 800451a:	f47f ae94 	bne.w	8004246 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	e000      	b.n	800453c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800453a:	2302      	movs	r3, #2
  }
}
 800453c:	4618      	mov	r0, r3
 800453e:	3728      	adds	r7, #40	; 0x28
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	00010004 	.word	0x00010004
 8004548:	20000000 	.word	0x20000000
 800454c:	14f8b589 	.word	0x14f8b589

08004550 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004570:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b10      	cmp	r3, #16
 800457e:	d003      	beq.n	8004588 <HAL_I2C_EV_IRQHandler+0x38>
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	f040 80c1 	bne.w	800470a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <HAL_I2C_EV_IRQHandler+0x6e>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045a8:	d003      	beq.n	80045b2 <HAL_I2C_EV_IRQHandler+0x62>
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045b0:	d101      	bne.n	80045b6 <HAL_I2C_EV_IRQHandler+0x66>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_I2C_EV_IRQHandler+0x68>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	f000 8132 	beq.w	8004822 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00c      	beq.n	80045e2 <HAL_I2C_EV_IRQHandler+0x92>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	0a5b      	lsrs	r3, r3, #9
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d006      	beq.n	80045e2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f002 f92b 	bl	8006830 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fd82 	bl	80050e4 <I2C_Master_SB>
 80045e0:	e092      	b.n	8004708 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <HAL_I2C_EV_IRQHandler+0xb2>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	0a5b      	lsrs	r3, r3, #9
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fdf7 	bl	80051ee <I2C_Master_ADD10>
 8004600:	e082      	b.n	8004708 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_I2C_EV_IRQHandler+0xd2>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	0a5b      	lsrs	r3, r3, #9
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fe10 	bl	8005240 <I2C_Master_ADDR>
 8004620:	e072      	b.n	8004708 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d03b      	beq.n	80046a6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463c:	f000 80f3 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	09db      	lsrs	r3, r3, #7
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00f      	beq.n	800466c <HAL_I2C_EV_IRQHandler+0x11c>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	0a9b      	lsrs	r3, r3, #10
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <HAL_I2C_EV_IRQHandler+0x11c>
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d103      	bne.n	800466c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f9fc 	bl	8004a62 <I2C_MasterTransmit_TXE>
 800466a:	e04d      	b.n	8004708 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80d6 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	0a5b      	lsrs	r3, r3, #9
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80cf 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004688:	7bbb      	ldrb	r3, [r7, #14]
 800468a:	2b21      	cmp	r3, #33	; 0x21
 800468c:	d103      	bne.n	8004696 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa83 	bl	8004b9a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004694:	e0c7      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	f040 80c4 	bne.w	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 faf1 	bl	8004c86 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046a4:	e0bf      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b4:	f000 80b7 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	099b      	lsrs	r3, r3, #6
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00f      	beq.n	80046e4 <HAL_I2C_EV_IRQHandler+0x194>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	0a9b      	lsrs	r3, r3, #10
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <HAL_I2C_EV_IRQHandler+0x194>
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fb66 	bl	8004dae <I2C_MasterReceive_RXNE>
 80046e2:	e011      	b.n	8004708 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 809a 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	0a5b      	lsrs	r3, r3, #9
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8093 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fc05 	bl	8004f10 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004706:	e08e      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004708:	e08d      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	e007      	b.n	800472c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d012      	beq.n	800475e <HAL_I2C_EV_IRQHandler+0x20e>
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	0a5b      	lsrs	r3, r3, #9
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00c      	beq.n	800475e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004754:	69b9      	ldr	r1, [r7, #24]
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 ffc9 	bl	80056ee <I2C_Slave_ADDR>
 800475c:	e066      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <HAL_I2C_EV_IRQHandler+0x22e>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	0a5b      	lsrs	r3, r3, #9
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f001 f804 	bl	8005784 <I2C_Slave_STOPF>
 800477c:	e056      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800477e:	7bbb      	ldrb	r3, [r7, #14]
 8004780:	2b21      	cmp	r3, #33	; 0x21
 8004782:	d002      	beq.n	800478a <HAL_I2C_EV_IRQHandler+0x23a>
 8004784:	7bbb      	ldrb	r3, [r7, #14]
 8004786:	2b29      	cmp	r3, #41	; 0x29
 8004788:	d125      	bne.n	80047d6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	09db      	lsrs	r3, r3, #7
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00f      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0x266>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	0a9b      	lsrs	r3, r3, #10
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0x266>
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fee1 	bl	8005576 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047b4:	e039      	b.n	800482a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d033      	beq.n	800482a <HAL_I2C_EV_IRQHandler+0x2da>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	0a5b      	lsrs	r3, r3, #9
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d02d      	beq.n	800482a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 ff0e 	bl	80055f0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047d4:	e029      	b.n	800482a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	099b      	lsrs	r3, r3, #6
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00f      	beq.n	8004802 <HAL_I2C_EV_IRQHandler+0x2b2>
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	0a9b      	lsrs	r3, r3, #10
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <HAL_I2C_EV_IRQHandler+0x2b2>
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 ff18 	bl	8005630 <I2C_SlaveReceive_RXNE>
 8004800:	e014      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	089b      	lsrs	r3, r3, #2
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00e      	beq.n	800482c <HAL_I2C_EV_IRQHandler+0x2dc>
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	0a5b      	lsrs	r3, r3, #9
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 ff46 	bl	80056ac <I2C_SlaveReceive_BTF>
 8004820:	e004      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004822:	bf00      	nop
 8004824:	e002      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004826:	bf00      	nop
 8004828:	e000      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800482a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b08a      	sub	sp, #40	; 0x28
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800484a:	2300      	movs	r3, #0
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004854:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_I2C_ER_IRQHandler+0x5e>
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	0a1b      	lsrs	r3, r3, #8
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d010      	beq.n	8004890 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800487e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800488e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	0a5b      	lsrs	r3, r3, #9
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <HAL_I2C_ER_IRQHandler+0x88>
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	f043 0302 	orr.w	r3, r3, #2
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80048b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	0a9b      	lsrs	r3, r3, #10
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d03f      	beq.n	8004946 <HAL_I2C_ER_IRQHandler+0x114>
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	0a1b      	lsrs	r3, r3, #8
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d039      	beq.n	8004946 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80048d2:	7efb      	ldrb	r3, [r7, #27]
 80048d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80048ec:	7ebb      	ldrb	r3, [r7, #26]
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d112      	bne.n	8004918 <HAL_I2C_ER_IRQHandler+0xe6>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10f      	bne.n	8004918 <HAL_I2C_ER_IRQHandler+0xe6>
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	2b21      	cmp	r3, #33	; 0x21
 80048fc:	d008      	beq.n	8004910 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80048fe:	7cfb      	ldrb	r3, [r7, #19]
 8004900:	2b29      	cmp	r3, #41	; 0x29
 8004902:	d005      	beq.n	8004910 <HAL_I2C_ER_IRQHandler+0xde>
 8004904:	7cfb      	ldrb	r3, [r7, #19]
 8004906:	2b28      	cmp	r3, #40	; 0x28
 8004908:	d106      	bne.n	8004918 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b21      	cmp	r3, #33	; 0x21
 800490e:	d103      	bne.n	8004918 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f001 f867 	bl	80059e4 <I2C_Slave_AF>
 8004916:	e016      	b.n	8004946 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004920:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800492a:	7efb      	ldrb	r3, [r7, #27]
 800492c:	2b10      	cmp	r3, #16
 800492e:	d002      	beq.n	8004936 <HAL_I2C_ER_IRQHandler+0x104>
 8004930:	7efb      	ldrb	r3, [r7, #27]
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	d107      	bne.n	8004946 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004944:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	0adb      	lsrs	r3, r3, #11
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00e      	beq.n	8004970 <HAL_I2C_ER_IRQHandler+0x13e>
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	0a1b      	lsrs	r3, r3, #8
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	f043 0308 	orr.w	r3, r3, #8
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800496e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	d008      	beq.n	8004988 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f001 f89e 	bl	8005ac4 <I2C_ITError>
  }
}
 8004988:	bf00      	nop
 800498a:	3728      	adds	r7, #40	; 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr

080049c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
 80049e4:	4613      	mov	r3, r2
 80049e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr

08004a04 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a78:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d150      	bne.n	8004b2a <I2C_MasterTransmit_TXE+0xc8>
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	2b21      	cmp	r3, #33	; 0x21
 8004a8c:	d14d      	bne.n	8004b2a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d01d      	beq.n	8004ad0 <I2C_MasterTransmit_TXE+0x6e>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d01a      	beq.n	8004ad0 <I2C_MasterTransmit_TXE+0x6e>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aa0:	d016      	beq.n	8004ad0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ab0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2211      	movs	r2, #17
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff ff61 	bl	8004990 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ace:	e060      	b.n	8004b92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ade:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d107      	bne.n	8004b1a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff ff76 	bl	8004a04 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b18:	e03b      	b.n	8004b92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff ff34 	bl	8004990 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b28:	e033      	b.n	8004b92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b21      	cmp	r3, #33	; 0x21
 8004b2e:	d005      	beq.n	8004b3c <I2C_MasterTransmit_TXE+0xda>
 8004b30:	7bbb      	ldrb	r3, [r7, #14]
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	d12d      	bne.n	8004b92 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b22      	cmp	r3, #34	; 0x22
 8004b3a:	d12a      	bne.n	8004b92 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b54:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b56:	e01c      	b.n	8004b92 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b40      	cmp	r3, #64	; 0x40
 8004b62:	d103      	bne.n	8004b6c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f88e 	bl	8004c86 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b6a:	e012      	b.n	8004b92 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	781a      	ldrb	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b90:	e7ff      	b.n	8004b92 <I2C_MasterTransmit_TXE+0x130>
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b21      	cmp	r3, #33	; 0x21
 8004bb2:	d164      	bne.n	8004c7e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d012      	beq.n	8004be4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004be2:	e04c      	b.n	8004c7e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d01d      	beq.n	8004c26 <I2C_MasterTransmit_BTF+0x8c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d01a      	beq.n	8004c26 <I2C_MasterTransmit_BTF+0x8c>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bf6:	d016      	beq.n	8004c26 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c06:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2211      	movs	r2, #17
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff feb6 	bl	8004990 <HAL_I2C_MasterTxCpltCallback>
}
 8004c24:	e02b      	b.n	8004c7e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c34:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c44:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d107      	bne.n	8004c70 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff fecb 	bl	8004a04 <HAL_I2C_MemTxCpltCallback>
}
 8004c6e:	e006      	b.n	8004c7e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fe89 	bl	8004990 <HAL_I2C_MasterTxCpltCallback>
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d11d      	bne.n	8004cda <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d10b      	bne.n	8004cbe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb6:	1c9a      	adds	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004cbc:	e073      	b.n	8004da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	121b      	asrs	r3, r3, #8
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cd8:	e065      	b.n	8004da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d10b      	bne.n	8004cfa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cf8:	e055      	b.n	8004da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d151      	bne.n	8004da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	2b22      	cmp	r3, #34	; 0x22
 8004d06:	d10d      	bne.n	8004d24 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d16:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d22:	e040      	b.n	8004da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d015      	beq.n	8004d5a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	2b21      	cmp	r3, #33	; 0x21
 8004d32:	d112      	bne.n	8004d5a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	781a      	ldrb	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d58:	e025      	b.n	8004da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d120      	bne.n	8004da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b21      	cmp	r3, #33	; 0x21
 8004d68:	d11d      	bne.n	8004da6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d78:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d88:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff fe2f 	bl	8004a04 <HAL_I2C_MemTxCpltCallback>
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b22      	cmp	r3, #34	; 0x22
 8004dc0:	f040 80a2 	bne.w	8004f08 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d921      	bls.n	8004e16 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	f040 8082 	bne.w	8004f08 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004e14:	e078      	b.n	8004f08 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d074      	beq.n	8004f08 <I2C_MasterReceive_RXNE+0x15a>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d002      	beq.n	8004e2a <I2C_MasterReceive_RXNE+0x7c>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d16e      	bne.n	8004f08 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 fc4a 	bl	80066c4 <I2C_WaitOnSTOPRequestThroughIT>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d142      	bne.n	8004ebc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e44:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e54:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d10a      	bne.n	8004ea6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff fdb9 	bl	8004a16 <HAL_I2C_MemRxCpltCallback>
}
 8004ea4:	e030      	b.n	8004f08 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2212      	movs	r2, #18
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fd74 	bl	80049a2 <HAL_I2C_MasterRxCpltCallback>
}
 8004eba:	e025      	b.n	8004f08 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fd90 	bl	8004a28 <HAL_I2C_ErrorCallback>
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d11b      	bne.n	8004f60 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f36:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f5e:	e0bd      	b.n	80050dc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d129      	bne.n	8004fbe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f78:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d00a      	beq.n	8004f96 <I2C_MasterReceive_BTF+0x86>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d007      	beq.n	8004f96 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f94:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fbc:	e08e      	b.n	80050dc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d176      	bne.n	80050b6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d002      	beq.n	8004fd4 <I2C_MasterReceive_BTF+0xc4>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d108      	bne.n	8004fe6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e019      	b.n	800501a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d002      	beq.n	8004ff2 <I2C_MasterReceive_BTF+0xe2>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d108      	bne.n	8005004 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e00a      	b.n	800501a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b10      	cmp	r3, #16
 8005008:	d007      	beq.n	800501a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005018:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005074:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d10a      	bne.n	80050a0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff fcbc 	bl	8004a16 <HAL_I2C_MemRxCpltCallback>
}
 800509e:	e01d      	b.n	80050dc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2212      	movs	r2, #18
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff fc77 	bl	80049a2 <HAL_I2C_MasterRxCpltCallback>
}
 80050b4:	e012      	b.n	80050dc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d117      	bne.n	8005128 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d109      	bne.n	8005114 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005110:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005112:	e067      	b.n	80051e4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	611a      	str	r2, [r3, #16]
}
 8005126:	e05d      	b.n	80051e4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005130:	d133      	bne.n	800519a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b21      	cmp	r3, #33	; 0x21
 800513c:	d109      	bne.n	8005152 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800514e:	611a      	str	r2, [r3, #16]
 8005150:	e008      	b.n	8005164 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	b2da      	uxtb	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	2b00      	cmp	r3, #0
 800516a:	d004      	beq.n	8005176 <I2C_Master_SB+0x92>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	2b00      	cmp	r3, #0
 800517c:	d032      	beq.n	80051e4 <I2C_Master_SB+0x100>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	2b00      	cmp	r3, #0
 8005186:	d02d      	beq.n	80051e4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005196:	605a      	str	r2, [r3, #4]
}
 8005198:	e024      	b.n	80051e4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10e      	bne.n	80051c0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	11db      	asrs	r3, r3, #7
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f003 0306 	and.w	r3, r3, #6
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f063 030f 	orn	r3, r3, #15
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	611a      	str	r2, [r3, #16]
}
 80051be:	e011      	b.n	80051e4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d10d      	bne.n	80051e4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	11db      	asrs	r3, r3, #7
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 0306 	and.w	r3, r3, #6
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f063 030e 	orn	r3, r3, #14
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	611a      	str	r2, [r3, #16]
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <I2C_Master_ADD10+0x26>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	2b00      	cmp	r3, #0
 8005212:	d108      	bne.n	8005226 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00c      	beq.n	8005236 <I2C_Master_ADD10+0x48>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005234:	605a      	str	r2, [r3, #4]
  }
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005240:	b480      	push	{r7}
 8005242:	b091      	sub	sp, #68	; 0x44
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b22      	cmp	r3, #34	; 0x22
 8005268:	f040 8174 	bne.w	8005554 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10f      	bne.n	8005294 <I2C_Master_ADDR+0x54>
 8005274:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d10b      	bne.n	8005294 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527c:	2300      	movs	r3, #0
 800527e:	633b      	str	r3, [r7, #48]	; 0x30
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	633b      	str	r3, [r7, #48]	; 0x30
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	e16b      	b.n	800556c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11d      	bne.n	80052d8 <I2C_Master_ADDR+0x98>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052a4:	d118      	bne.n	80052d8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a6:	2300      	movs	r3, #0
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ca:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	651a      	str	r2, [r3, #80]	; 0x50
 80052d6:	e149      	b.n	800556c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d113      	bne.n	800530a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e2:	2300      	movs	r3, #0
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e120      	b.n	800554c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	f040 808a 	bne.w	800542a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800531c:	d137      	bne.n	800538e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533c:	d113      	bne.n	8005366 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534e:	2300      	movs	r3, #0
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	e0f2      	b.n	800554c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005366:	2300      	movs	r3, #0
 8005368:	623b      	str	r3, [r7, #32]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e0de      	b.n	800554c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	2b08      	cmp	r3, #8
 8005392:	d02e      	beq.n	80053f2 <I2C_Master_ADDR+0x1b2>
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	2b20      	cmp	r3, #32
 8005398:	d02b      	beq.n	80053f2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539c:	2b12      	cmp	r3, #18
 800539e:	d102      	bne.n	80053a6 <I2C_Master_ADDR+0x166>
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d125      	bne.n	80053f2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d00e      	beq.n	80053ca <I2C_Master_ADDR+0x18a>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d00b      	beq.n	80053ca <I2C_Master_ADDR+0x18a>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d008      	beq.n	80053ca <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e007      	b.n	80053da <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	e0ac      	b.n	800554c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005400:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	e090      	b.n	800554c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d158      	bne.n	80054e6 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	2b04      	cmp	r3, #4
 8005438:	d021      	beq.n	800547e <I2C_Master_ADDR+0x23e>
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	2b02      	cmp	r3, #2
 800543e:	d01e      	beq.n	800547e <I2C_Master_ADDR+0x23e>
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	2b10      	cmp	r3, #16
 8005444:	d01b      	beq.n	800547e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005454:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	e012      	b.n	80054a4 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800548c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b2:	d14b      	bne.n	800554c <I2C_Master_ADDR+0x30c>
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054ba:	d00b      	beq.n	80054d4 <I2C_Master_ADDR+0x294>
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d008      	beq.n	80054d4 <I2C_Master_ADDR+0x294>
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d005      	beq.n	80054d4 <I2C_Master_ADDR+0x294>
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	2b10      	cmp	r3, #16
 80054cc:	d002      	beq.n	80054d4 <I2C_Master_ADDR+0x294>
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d13b      	bne.n	800554c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054e2:	605a      	str	r2, [r3, #4]
 80054e4:	e032      	b.n	800554c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054f4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005504:	d117      	bne.n	8005536 <I2C_Master_ADDR+0x2f6>
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800550c:	d00b      	beq.n	8005526 <I2C_Master_ADDR+0x2e6>
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	2b01      	cmp	r3, #1
 8005512:	d008      	beq.n	8005526 <I2C_Master_ADDR+0x2e6>
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	2b08      	cmp	r3, #8
 8005518:	d005      	beq.n	8005526 <I2C_Master_ADDR+0x2e6>
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	2b10      	cmp	r3, #16
 800551e:	d002      	beq.n	8005526 <I2C_Master_ADDR+0x2e6>
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	2b20      	cmp	r3, #32
 8005524:	d107      	bne.n	8005536 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005534:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005552:	e00b      	b.n	800556c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005554:	2300      	movs	r3, #0
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	68bb      	ldr	r3, [r7, #8]
}
 800556a:	e7ff      	b.n	800556c <I2C_Master_ADDR+0x32c>
 800556c:	bf00      	nop
 800556e:	3744      	adds	r7, #68	; 0x44
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d02b      	beq.n	80055e8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	781a      	ldrb	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d114      	bne.n	80055e8 <I2C_SlaveTransmit_TXE+0x72>
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b29      	cmp	r3, #41	; 0x29
 80055c2:	d111      	bne.n	80055e8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2221      	movs	r2, #33	; 0x21
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2228      	movs	r2, #40	; 0x28
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff f9e6 	bl	80049b4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d011      	beq.n	8005626 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	781a      	ldrb	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d02c      	beq.n	80056a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d114      	bne.n	80056a4 <I2C_SlaveReceive_RXNE+0x74>
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2b2a      	cmp	r3, #42	; 0x2a
 800567e:	d111      	bne.n	80056a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800568e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2222      	movs	r2, #34	; 0x22
 8005694:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2228      	movs	r2, #40	; 0x28
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff f991 	bl	80049c6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056a4:	bf00      	nop
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d012      	beq.n	80056e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr

080056ee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005708:	2b28      	cmp	r3, #40	; 0x28
 800570a:	d127      	bne.n	800575c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	089b      	lsrs	r3, r3, #2
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	09db      	lsrs	r3, r3, #7
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d103      	bne.n	8005740 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	81bb      	strh	r3, [r7, #12]
 800573e:	e002      	b.n	8005746 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800574e:	89ba      	ldrh	r2, [r7, #12]
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff f93f 	bl	80049d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800575a:	e00e      	b.n	800577a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575c:	2300      	movs	r3, #0
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	60bb      	str	r3, [r7, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	60bb      	str	r3, [r7, #8]
 8005770:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800577a:	bf00      	nop
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005792:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80057a4:	2300      	movs	r3, #0
 80057a6:	60bb      	str	r3, [r7, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e0:	d172      	bne.n	80058c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	2b22      	cmp	r3, #34	; 0x22
 80057e6:	d002      	beq.n	80057ee <I2C_Slave_STOPF+0x6a>
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	2b2a      	cmp	r3, #42	; 0x2a
 80057ec:	d135      	bne.n	800585a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f043 0204 	orr.w	r2, r3, #4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005820:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	4618      	mov	r0, r3
 8005828:	f7fd fcce 	bl	80031c8 <HAL_DMA_GetState>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d049      	beq.n	80058c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	4a69      	ldr	r2, [pc, #420]	; (80059dc <I2C_Slave_STOPF+0x258>)
 8005838:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	4618      	mov	r0, r3
 8005840:	f7fd fc4c 	bl	80030dc <HAL_DMA_Abort_IT>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d03d      	beq.n	80058c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005854:	4610      	mov	r0, r2
 8005856:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005858:	e035      	b.n	80058c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	b29a      	uxth	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f043 0204 	orr.w	r2, r3, #4
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800588c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd fc98 	bl	80031c8 <HAL_DMA_GetState>
 8005898:	4603      	mov	r3, r0
 800589a:	2b01      	cmp	r3, #1
 800589c:	d014      	beq.n	80058c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a2:	4a4e      	ldr	r2, [pc, #312]	; (80059dc <I2C_Slave_STOPF+0x258>)
 80058a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd fc16 	bl	80030dc <HAL_DMA_Abort_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058c0:	4610      	mov	r0, r2
 80058c2:	4798      	blx	r3
 80058c4:	e000      	b.n	80058c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d03e      	beq.n	8005950 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d112      	bne.n	8005906 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d112      	bne.n	800593a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	f043 0204 	orr.w	r2, r3, #4
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f8b3 	bl	8005ac4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800595e:	e039      	b.n	80059d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b2a      	cmp	r3, #42	; 0x2a
 8005964:	d109      	bne.n	800597a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2228      	movs	r2, #40	; 0x28
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff f826 	bl	80049c6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b28      	cmp	r3, #40	; 0x28
 8005984:	d111      	bne.n	80059aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <I2C_Slave_STOPF+0x25c>)
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff f825 	bl	80049f2 <HAL_I2C_ListenCpltCallback>
}
 80059a8:	e014      	b.n	80059d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	2b22      	cmp	r3, #34	; 0x22
 80059b0:	d002      	beq.n	80059b8 <I2C_Slave_STOPF+0x234>
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	2b22      	cmp	r3, #34	; 0x22
 80059b6:	d10d      	bne.n	80059d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fe fff9 	bl	80049c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80059d4:	bf00      	nop
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	080062c5 	.word	0x080062c5
 80059e0:	ffff0000 	.word	0xffff0000

080059e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d002      	beq.n	8005a06 <I2C_Slave_AF+0x22>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d129      	bne.n	8005a5a <I2C_Slave_AF+0x76>
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2b28      	cmp	r3, #40	; 0x28
 8005a0a:	d126      	bne.n	8005a5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a2c      	ldr	r2, [pc, #176]	; (8005ac0 <I2C_Slave_AF+0xdc>)
 8005a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fe ffcd 	bl	80049f2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005a58:	e02e      	b.n	8005ab8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	2b21      	cmp	r3, #33	; 0x21
 8005a5e:	d126      	bne.n	8005aae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a17      	ldr	r2, [pc, #92]	; (8005ac0 <I2C_Slave_AF+0xdc>)
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2221      	movs	r2, #33	; 0x21
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fe ff84 	bl	80049b4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005aac:	e004      	b.n	8005ab8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ab6:	615a      	str	r2, [r3, #20]
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	ffff0000 	.word	0xffff0000

08005ac4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ada:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	2b10      	cmp	r3, #16
 8005ae0:	d002      	beq.n	8005ae8 <I2C_ITError+0x24>
 8005ae2:	7bbb      	ldrb	r3, [r7, #14]
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d10a      	bne.n	8005afe <I2C_ITError+0x3a>
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b22      	cmp	r3, #34	; 0x22
 8005aec:	d107      	bne.n	8005afe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005afc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b04:	2b28      	cmp	r3, #40	; 0x28
 8005b06:	d107      	bne.n	8005b18 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2228      	movs	r2, #40	; 0x28
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b16:	e015      	b.n	8005b44 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b26:	d00a      	beq.n	8005b3e <I2C_ITError+0x7a>
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	2b60      	cmp	r3, #96	; 0x60
 8005b2c:	d007      	beq.n	8005b3e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d161      	bne.n	8005c18 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b62:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d020      	beq.n	8005bb2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	4a6a      	ldr	r2, [pc, #424]	; (8005d20 <I2C_ITError+0x25c>)
 8005b76:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fd faad 	bl	80030dc <HAL_DMA_Abort_IT>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8089 	beq.w	8005c9c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0201 	bic.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bac:	4610      	mov	r0, r2
 8005bae:	4798      	blx	r3
 8005bb0:	e074      	b.n	8005c9c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	4a5a      	ldr	r2, [pc, #360]	; (8005d20 <I2C_ITError+0x25c>)
 8005bb8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fd fa8c 	bl	80030dc <HAL_DMA_Abort_IT>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d068      	beq.n	8005c9c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d10b      	bne.n	8005bf0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0201 	bic.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c12:	4610      	mov	r0, r2
 8005c14:	4798      	blx	r3
 8005c16:	e041      	b.n	8005c9c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b60      	cmp	r3, #96	; 0x60
 8005c22:	d125      	bne.n	8005c70 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d10b      	bne.n	8005c58 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fe fee6 	bl	8004a3a <HAL_I2C_AbortCpltCallback>
 8005c6e:	e015      	b.n	8005c9c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d10b      	bne.n	8005c96 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fe fec6 	bl	8004a28 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10e      	bne.n	8005cca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d104      	bne.n	8005cca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cd8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d113      	bne.n	8005d16 <I2C_ITError+0x252>
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	2b28      	cmp	r3, #40	; 0x28
 8005cf2:	d110      	bne.n	8005d16 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a0b      	ldr	r2, [pc, #44]	; (8005d24 <I2C_ITError+0x260>)
 8005cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fe fe6e 	bl	80049f2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	080062c5 	.word	0x080062c5
 8005d24:	ffff0000 	.word	0xffff0000

08005d28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	607a      	str	r2, [r7, #4]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	460b      	mov	r3, r1
 8005d36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d006      	beq.n	8005d52 <I2C_MasterRequestWrite+0x2a>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d003      	beq.n	8005d52 <I2C_MasterRequestWrite+0x2a>
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d50:	d108      	bne.n	8005d64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	e00b      	b.n	8005d7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	2b12      	cmp	r3, #18
 8005d6a:	d107      	bne.n	8005d7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fb43 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00d      	beq.n	8005db0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da2:	d103      	bne.n	8005dac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e035      	b.n	8005e1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005db8:	d108      	bne.n	8005dcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dba:	897b      	ldrh	r3, [r7, #10]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dc8:	611a      	str	r2, [r3, #16]
 8005dca:	e01b      	b.n	8005e04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dcc:	897b      	ldrh	r3, [r7, #10]
 8005dce:	11db      	asrs	r3, r3, #7
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f003 0306 	and.w	r3, r3, #6
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f063 030f 	orn	r3, r3, #15
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	490e      	ldr	r1, [pc, #56]	; (8005e24 <I2C_MasterRequestWrite+0xfc>)
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fb69 	bl	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e010      	b.n	8005e1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dfa:	897b      	ldrh	r3, [r7, #10]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	4907      	ldr	r1, [pc, #28]	; (8005e28 <I2C_MasterRequestWrite+0x100>)
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 fb59 	bl	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	00010008 	.word	0x00010008
 8005e28:	00010002 	.word	0x00010002

08005e2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	607a      	str	r2, [r7, #4]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d006      	beq.n	8005e66 <I2C_MasterRequestRead+0x3a>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d003      	beq.n	8005e66 <I2C_MasterRequestRead+0x3a>
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e64:	d108      	bne.n	8005e78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	e00b      	b.n	8005e90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	2b11      	cmp	r3, #17
 8005e7e:	d107      	bne.n	8005e90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fab9 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00d      	beq.n	8005ec4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb6:	d103      	bne.n	8005ec0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e079      	b.n	8005fb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ecc:	d108      	bne.n	8005ee0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ece:	897b      	ldrh	r3, [r7, #10]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	611a      	str	r2, [r3, #16]
 8005ede:	e05f      	b.n	8005fa0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ee0:	897b      	ldrh	r3, [r7, #10]
 8005ee2:	11db      	asrs	r3, r3, #7
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	f003 0306 	and.w	r3, r3, #6
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f063 030f 	orn	r3, r3, #15
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	4930      	ldr	r1, [pc, #192]	; (8005fc0 <I2C_MasterRequestRead+0x194>)
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fadf 	bl	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e054      	b.n	8005fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f0e:	897b      	ldrh	r3, [r7, #10]
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4929      	ldr	r1, [pc, #164]	; (8005fc4 <I2C_MasterRequestRead+0x198>)
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 facf 	bl	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e044      	b.n	8005fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 fa57 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00d      	beq.n	8005f88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7a:	d103      	bne.n	8005f84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f82:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e017      	b.n	8005fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f88:	897b      	ldrh	r3, [r7, #10]
 8005f8a:	11db      	asrs	r3, r3, #7
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f003 0306 	and.w	r3, r3, #6
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f063 030e 	orn	r3, r3, #14
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4907      	ldr	r1, [pc, #28]	; (8005fc4 <I2C_MasterRequestRead+0x198>)
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fa8b 	bl	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	00010008 	.word	0x00010008
 8005fc4:	00010002 	.word	0x00010002

08005fc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	817b      	strh	r3, [r7, #10]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	813b      	strh	r3, [r7, #8]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fa08 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006018:	d103      	bne.n	8006022 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006020:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e05f      	b.n	80060e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006026:	897b      	ldrh	r3, [r7, #10]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	6a3a      	ldr	r2, [r7, #32]
 800603a:	492d      	ldr	r1, [pc, #180]	; (80060f0 <I2C_RequestMemoryWrite+0x128>)
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fa40 	bl	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e04c      	b.n	80060e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006064:	6a39      	ldr	r1, [r7, #32]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 faaa 	bl	80065c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00d      	beq.n	800608e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	2b04      	cmp	r3, #4
 8006078:	d107      	bne.n	800608a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e02b      	b.n	80060e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d105      	bne.n	80060a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006094:	893b      	ldrh	r3, [r7, #8]
 8006096:	b2da      	uxtb	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	611a      	str	r2, [r3, #16]
 800609e:	e021      	b.n	80060e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060a0:	893b      	ldrh	r3, [r7, #8]
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b0:	6a39      	ldr	r1, [r7, #32]
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fa84 	bl	80065c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00d      	beq.n	80060da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d107      	bne.n	80060d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e005      	b.n	80060e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060da:	893b      	ldrh	r3, [r7, #8]
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	00010002 	.word	0x00010002

080060f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	4608      	mov	r0, r1
 80060fe:	4611      	mov	r1, r2
 8006100:	461a      	mov	r2, r3
 8006102:	4603      	mov	r3, r0
 8006104:	817b      	strh	r3, [r7, #10]
 8006106:	460b      	mov	r3, r1
 8006108:	813b      	strh	r3, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800611c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800612c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	2200      	movs	r2, #0
 8006136:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f96a 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006154:	d103      	bne.n	800615e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e0aa      	b.n	80062b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006162:	897b      	ldrh	r3, [r7, #10]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006170:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	6a3a      	ldr	r2, [r7, #32]
 8006176:	4952      	ldr	r1, [pc, #328]	; (80062c0 <I2C_RequestMemoryRead+0x1cc>)
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f9a2 	bl	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e097      	b.n	80062b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800619e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a0:	6a39      	ldr	r1, [r7, #32]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 fa0c 	bl	80065c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00d      	beq.n	80061ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d107      	bne.n	80061c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e076      	b.n	80062b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d105      	bne.n	80061dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061d0:	893b      	ldrh	r3, [r7, #8]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	611a      	str	r2, [r3, #16]
 80061da:	e021      	b.n	8006220 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061dc:	893b      	ldrh	r3, [r7, #8]
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ec:	6a39      	ldr	r1, [r7, #32]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f9e6 	bl	80065c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00d      	beq.n	8006216 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d107      	bne.n	8006212 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006210:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e050      	b.n	80062b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006216:	893b      	ldrh	r3, [r7, #8]
 8006218:	b2da      	uxtb	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006222:	6a39      	ldr	r1, [r7, #32]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f9cb 	bl	80065c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00d      	beq.n	800624c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	2b04      	cmp	r3, #4
 8006236:	d107      	bne.n	8006248 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006246:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e035      	b.n	80062b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800625a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	2200      	movs	r2, #0
 8006264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f8d3 	bl	8006414 <I2C_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00d      	beq.n	8006290 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006282:	d103      	bne.n	800628c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800628a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e013      	b.n	80062b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006290:	897b      	ldrh	r3, [r7, #10]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	b2da      	uxtb	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	6a3a      	ldr	r2, [r7, #32]
 80062a4:	4906      	ldr	r1, [pc, #24]	; (80062c0 <I2C_RequestMemoryRead+0x1cc>)
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f90b 	bl	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	00010002 	.word	0x00010002

080062c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80062de:	4b4b      	ldr	r3, [pc, #300]	; (800640c <I2C_DMAAbort+0x148>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	08db      	lsrs	r3, r3, #3
 80062e4:	4a4a      	ldr	r2, [pc, #296]	; (8006410 <I2C_DMAAbort+0x14c>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	0a1a      	lsrs	r2, r3, #8
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	00da      	lsls	r2, r3, #3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f043 0220 	orr.w	r2, r3, #32
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800630a:	e00a      	b.n	8006322 <I2C_DMAAbort+0x5e>
    }
    count--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3b01      	subs	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800631c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006320:	d0ea      	beq.n	80062f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632e:	2200      	movs	r2, #0
 8006330:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	2200      	movs	r2, #0
 8006340:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006350:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2200      	movs	r2, #0
 8006356:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	2200      	movs	r2, #0
 8006366:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	2200      	movs	r2, #0
 8006376:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b60      	cmp	r3, #96	; 0x60
 8006392:	d10e      	bne.n	80063b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2200      	movs	r2, #0
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063aa:	6978      	ldr	r0, [r7, #20]
 80063ac:	f7fe fb45 	bl	8004a3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063b0:	e027      	b.n	8006402 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063b2:	7cfb      	ldrb	r3, [r7, #19]
 80063b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063b8:	2b28      	cmp	r3, #40	; 0x28
 80063ba:	d117      	bne.n	80063ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2200      	movs	r2, #0
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2228      	movs	r2, #40	; 0x28
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063ea:	e007      	b.n	80063fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80063fc:	6978      	ldr	r0, [r7, #20]
 80063fe:	f7fe fb13 	bl	8004a28 <HAL_I2C_ErrorCallback>
}
 8006402:	bf00      	nop
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000000 	.word	0x20000000
 8006410:	14f8b589 	.word	0x14f8b589

08006414 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	4613      	mov	r3, r2
 8006422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006424:	e025      	b.n	8006472 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d021      	beq.n	8006472 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642e:	f7fc fd19 	bl	8002e64 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d302      	bcc.n	8006444 <I2C_WaitOnFlagUntilTimeout+0x30>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d116      	bne.n	8006472 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e023      	b.n	80064ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	d10d      	bne.n	8006498 <I2C_WaitOnFlagUntilTimeout+0x84>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	43da      	mvns	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4013      	ands	r3, r2
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	bf0c      	ite	eq
 800648e:	2301      	moveq	r3, #1
 8006490:	2300      	movne	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	e00c      	b.n	80064b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	43da      	mvns	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4013      	ands	r3, r2
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	bf0c      	ite	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	2300      	movne	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d0b6      	beq.n	8006426 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064d0:	e051      	b.n	8006576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e0:	d123      	bne.n	800652a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f043 0204 	orr.w	r2, r3, #4
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e046      	b.n	80065b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d021      	beq.n	8006576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006532:	f7fc fc97 	bl	8002e64 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d116      	bne.n	8006576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f043 0220 	orr.w	r2, r3, #32
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e020      	b.n	80065b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	0c1b      	lsrs	r3, r3, #16
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	d10c      	bne.n	800659a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	43da      	mvns	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4013      	ands	r3, r2
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	bf14      	ite	ne
 8006592:	2301      	movne	r3, #1
 8006594:	2300      	moveq	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	e00b      	b.n	80065b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	43da      	mvns	r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	4013      	ands	r3, r2
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bf14      	ite	ne
 80065ac:	2301      	movne	r3, #1
 80065ae:	2300      	moveq	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d18d      	bne.n	80064d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065cc:	e02d      	b.n	800662a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 f900 	bl	80067d4 <I2C_IsAcknowledgeFailed>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e02d      	b.n	800663a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d021      	beq.n	800662a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e6:	f7fc fc3d 	bl	8002e64 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d302      	bcc.n	80065fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d116      	bne.n	800662a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	f043 0220 	orr.w	r2, r3, #32
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e007      	b.n	800663a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006634:	2b80      	cmp	r3, #128	; 0x80
 8006636:	d1ca      	bne.n	80065ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800664e:	e02d      	b.n	80066ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f8bf 	bl	80067d4 <I2C_IsAcknowledgeFailed>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e02d      	b.n	80066bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d021      	beq.n	80066ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006668:	f7fc fbfc 	bl	8002e64 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	429a      	cmp	r2, r3
 8006676:	d302      	bcc.n	800667e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d116      	bne.n	80066ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	f043 0220 	orr.w	r2, r3, #32
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e007      	b.n	80066bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d1ca      	bne.n	8006650 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80066d0:	4b13      	ldr	r3, [pc, #76]	; (8006720 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	08db      	lsrs	r3, r3, #3
 80066d6:	4a13      	ldr	r2, [pc, #76]	; (8006724 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80066d8:	fba2 2303 	umull	r2, r3, r2, r3
 80066dc:	0a1a      	lsrs	r2, r3, #8
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d107      	bne.n	8006702 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f043 0220 	orr.w	r2, r3, #32
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e008      	b.n	8006714 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800670c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006710:	d0e9      	beq.n	80066e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000000 	.word	0x20000000
 8006724:	14f8b589 	.word	0x14f8b589

08006728 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006734:	e042      	b.n	80067bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b10      	cmp	r3, #16
 8006742:	d119      	bne.n	8006778 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f06f 0210 	mvn.w	r2, #16
 800674c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e029      	b.n	80067cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006778:	f7fc fb74 	bl	8002e64 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	d302      	bcc.n	800678e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d116      	bne.n	80067bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	f043 0220 	orr.w	r2, r3, #32
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e007      	b.n	80067cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d1b5      	bne.n	8006736 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ea:	d11b      	bne.n	8006824 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	f043 0204 	orr.w	r2, r3, #4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006840:	d103      	bne.n	800684a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006848:	e007      	b.n	800685a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006852:	d102      	bne.n	800685a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2208      	movs	r2, #8
 8006858:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr

08006864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e272      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8087 	beq.w	8006992 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006884:	4b92      	ldr	r3, [pc, #584]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f003 030c 	and.w	r3, r3, #12
 800688c:	2b04      	cmp	r3, #4
 800688e:	d00c      	beq.n	80068aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006890:	4b8f      	ldr	r3, [pc, #572]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f003 030c 	and.w	r3, r3, #12
 8006898:	2b08      	cmp	r3, #8
 800689a:	d112      	bne.n	80068c2 <HAL_RCC_OscConfig+0x5e>
 800689c:	4b8c      	ldr	r3, [pc, #560]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a8:	d10b      	bne.n	80068c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068aa:	4b89      	ldr	r3, [pc, #548]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d06c      	beq.n	8006990 <HAL_RCC_OscConfig+0x12c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d168      	bne.n	8006990 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e24c      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ca:	d106      	bne.n	80068da <HAL_RCC_OscConfig+0x76>
 80068cc:	4b80      	ldr	r3, [pc, #512]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a7f      	ldr	r2, [pc, #508]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80068d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	e02e      	b.n	8006938 <HAL_RCC_OscConfig+0xd4>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10c      	bne.n	80068fc <HAL_RCC_OscConfig+0x98>
 80068e2:	4b7b      	ldr	r3, [pc, #492]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a7a      	ldr	r2, [pc, #488]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80068e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	4b78      	ldr	r3, [pc, #480]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a77      	ldr	r2, [pc, #476]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80068f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	e01d      	b.n	8006938 <HAL_RCC_OscConfig+0xd4>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006904:	d10c      	bne.n	8006920 <HAL_RCC_OscConfig+0xbc>
 8006906:	4b72      	ldr	r3, [pc, #456]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a71      	ldr	r2, [pc, #452]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 800690c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	4b6f      	ldr	r3, [pc, #444]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a6e      	ldr	r2, [pc, #440]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e00b      	b.n	8006938 <HAL_RCC_OscConfig+0xd4>
 8006920:	4b6b      	ldr	r3, [pc, #428]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a6a      	ldr	r2, [pc, #424]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	4b68      	ldr	r3, [pc, #416]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a67      	ldr	r2, [pc, #412]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006936:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d013      	beq.n	8006968 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006940:	f7fc fa90 	bl	8002e64 <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006948:	f7fc fa8c 	bl	8002e64 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b64      	cmp	r3, #100	; 0x64
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e200      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695a:	4b5d      	ldr	r3, [pc, #372]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0f0      	beq.n	8006948 <HAL_RCC_OscConfig+0xe4>
 8006966:	e014      	b.n	8006992 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006968:	f7fc fa7c 	bl	8002e64 <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006970:	f7fc fa78 	bl	8002e64 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b64      	cmp	r3, #100	; 0x64
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e1ec      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006982:	4b53      	ldr	r3, [pc, #332]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f0      	bne.n	8006970 <HAL_RCC_OscConfig+0x10c>
 800698e:	e000      	b.n	8006992 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d063      	beq.n	8006a66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800699e:	4b4c      	ldr	r3, [pc, #304]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f003 030c 	and.w	r3, r3, #12
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80069aa:	4b49      	ldr	r3, [pc, #292]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f003 030c 	and.w	r3, r3, #12
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	d11c      	bne.n	80069f0 <HAL_RCC_OscConfig+0x18c>
 80069b6:	4b46      	ldr	r3, [pc, #280]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d116      	bne.n	80069f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069c2:	4b43      	ldr	r3, [pc, #268]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <HAL_RCC_OscConfig+0x176>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d001      	beq.n	80069da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e1c0      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069da:	4b3d      	ldr	r3, [pc, #244]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4939      	ldr	r1, [pc, #228]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ee:	e03a      	b.n	8006a66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d020      	beq.n	8006a3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069f8:	4b36      	ldr	r3, [pc, #216]	; (8006ad4 <HAL_RCC_OscConfig+0x270>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069fe:	f7fc fa31 	bl	8002e64 <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a06:	f7fc fa2d 	bl	8002e64 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e1a1      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a18:	4b2d      	ldr	r3, [pc, #180]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a24:	4b2a      	ldr	r3, [pc, #168]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	4927      	ldr	r1, [pc, #156]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	600b      	str	r3, [r1, #0]
 8006a38:	e015      	b.n	8006a66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a3a:	4b26      	ldr	r3, [pc, #152]	; (8006ad4 <HAL_RCC_OscConfig+0x270>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a40:	f7fc fa10 	bl	8002e64 <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a48:	f7fc fa0c 	bl	8002e64 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e180      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a5a:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f0      	bne.n	8006a48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d03a      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d019      	beq.n	8006aae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a7a:	4b17      	ldr	r3, [pc, #92]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a80:	f7fc f9f0 	bl	8002e64 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a88:	f7fc f9ec 	bl	8002e64 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e160      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <HAL_RCC_OscConfig+0x26c>)
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	f000 fac4 	bl	8007034 <RCC_Delay>
 8006aac:	e01c      	b.n	8006ae8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aae:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <HAL_RCC_OscConfig+0x274>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ab4:	f7fc f9d6 	bl	8002e64 <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aba:	e00f      	b.n	8006adc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006abc:	f7fc f9d2 	bl	8002e64 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d908      	bls.n	8006adc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e146      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
 8006ace:	bf00      	nop
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	42420000 	.word	0x42420000
 8006ad8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006adc:	4b92      	ldr	r3, [pc, #584]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e9      	bne.n	8006abc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80a6 	beq.w	8006c42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006af6:	2300      	movs	r3, #0
 8006af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006afa:	4b8b      	ldr	r3, [pc, #556]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10d      	bne.n	8006b22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b06:	4b88      	ldr	r3, [pc, #544]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	4a87      	ldr	r2, [pc, #540]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b10:	61d3      	str	r3, [r2, #28]
 8006b12:	4b85      	ldr	r3, [pc, #532]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b22:	4b82      	ldr	r3, [pc, #520]	; (8006d2c <HAL_RCC_OscConfig+0x4c8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d118      	bne.n	8006b60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b2e:	4b7f      	ldr	r3, [pc, #508]	; (8006d2c <HAL_RCC_OscConfig+0x4c8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a7e      	ldr	r2, [pc, #504]	; (8006d2c <HAL_RCC_OscConfig+0x4c8>)
 8006b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b3a:	f7fc f993 	bl	8002e64 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b42:	f7fc f98f 	bl	8002e64 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b64      	cmp	r3, #100	; 0x64
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e103      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b54:	4b75      	ldr	r3, [pc, #468]	; (8006d2c <HAL_RCC_OscConfig+0x4c8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d106      	bne.n	8006b76 <HAL_RCC_OscConfig+0x312>
 8006b68:	4b6f      	ldr	r3, [pc, #444]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	4a6e      	ldr	r2, [pc, #440]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
 8006b72:	6213      	str	r3, [r2, #32]
 8006b74:	e02d      	b.n	8006bd2 <HAL_RCC_OscConfig+0x36e>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10c      	bne.n	8006b98 <HAL_RCC_OscConfig+0x334>
 8006b7e:	4b6a      	ldr	r3, [pc, #424]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	4a69      	ldr	r2, [pc, #420]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	6213      	str	r3, [r2, #32]
 8006b8a:	4b67      	ldr	r3, [pc, #412]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	4a66      	ldr	r2, [pc, #408]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006b90:	f023 0304 	bic.w	r3, r3, #4
 8006b94:	6213      	str	r3, [r2, #32]
 8006b96:	e01c      	b.n	8006bd2 <HAL_RCC_OscConfig+0x36e>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d10c      	bne.n	8006bba <HAL_RCC_OscConfig+0x356>
 8006ba0:	4b61      	ldr	r3, [pc, #388]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	4a60      	ldr	r2, [pc, #384]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006ba6:	f043 0304 	orr.w	r3, r3, #4
 8006baa:	6213      	str	r3, [r2, #32]
 8006bac:	4b5e      	ldr	r3, [pc, #376]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	4a5d      	ldr	r2, [pc, #372]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006bb2:	f043 0301 	orr.w	r3, r3, #1
 8006bb6:	6213      	str	r3, [r2, #32]
 8006bb8:	e00b      	b.n	8006bd2 <HAL_RCC_OscConfig+0x36e>
 8006bba:	4b5b      	ldr	r3, [pc, #364]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	4a5a      	ldr	r2, [pc, #360]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	6213      	str	r3, [r2, #32]
 8006bc6:	4b58      	ldr	r3, [pc, #352]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	4a57      	ldr	r2, [pc, #348]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006bcc:	f023 0304 	bic.w	r3, r3, #4
 8006bd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d015      	beq.n	8006c06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bda:	f7fc f943 	bl	8002e64 <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be0:	e00a      	b.n	8006bf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be2:	f7fc f93f 	bl	8002e64 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e0b1      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bf8:	4b4b      	ldr	r3, [pc, #300]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0ee      	beq.n	8006be2 <HAL_RCC_OscConfig+0x37e>
 8006c04:	e014      	b.n	8006c30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c06:	f7fc f92d 	bl	8002e64 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0c:	e00a      	b.n	8006c24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0e:	f7fc f929 	bl	8002e64 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e09b      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c24:	4b40      	ldr	r3, [pc, #256]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1ee      	bne.n	8006c0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d105      	bne.n	8006c42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c36:	4b3c      	ldr	r3, [pc, #240]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	4a3b      	ldr	r2, [pc, #236]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 8087 	beq.w	8006d5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c4c:	4b36      	ldr	r3, [pc, #216]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 030c 	and.w	r3, r3, #12
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d061      	beq.n	8006d1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d146      	bne.n	8006cee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c60:	4b33      	ldr	r3, [pc, #204]	; (8006d30 <HAL_RCC_OscConfig+0x4cc>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c66:	f7fc f8fd 	bl	8002e64 <HAL_GetTick>
 8006c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c6c:	e008      	b.n	8006c80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c6e:	f7fc f8f9 	bl	8002e64 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e06d      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c80:	4b29      	ldr	r3, [pc, #164]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1f0      	bne.n	8006c6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c94:	d108      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c96:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	4921      	ldr	r1, [pc, #132]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ca8:	4b1f      	ldr	r3, [pc, #124]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a19      	ldr	r1, [r3, #32]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	491b      	ldr	r1, [pc, #108]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cc0:	4b1b      	ldr	r3, [pc, #108]	; (8006d30 <HAL_RCC_OscConfig+0x4cc>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc6:	f7fc f8cd 	bl	8002e64 <HAL_GetTick>
 8006cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ccc:	e008      	b.n	8006ce0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cce:	f7fc f8c9 	bl	8002e64 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e03d      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ce0:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0f0      	beq.n	8006cce <HAL_RCC_OscConfig+0x46a>
 8006cec:	e035      	b.n	8006d5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cee:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <HAL_RCC_OscConfig+0x4cc>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf4:	f7fc f8b6 	bl	8002e64 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cfc:	f7fc f8b2 	bl	8002e64 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e026      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d0e:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <HAL_RCC_OscConfig+0x4c4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1f0      	bne.n	8006cfc <HAL_RCC_OscConfig+0x498>
 8006d1a:	e01e      	b.n	8006d5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d107      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e019      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	40007000 	.word	0x40007000
 8006d30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d34:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <HAL_RCC_OscConfig+0x500>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d106      	bne.n	8006d56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d001      	beq.n	8006d5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40021000 	.word	0x40021000

08006d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e0d0      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d7c:	4b6a      	ldr	r3, [pc, #424]	; (8006f28 <HAL_RCC_ClockConfig+0x1c0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d910      	bls.n	8006dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d8a:	4b67      	ldr	r3, [pc, #412]	; (8006f28 <HAL_RCC_ClockConfig+0x1c0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f023 0207 	bic.w	r2, r3, #7
 8006d92:	4965      	ldr	r1, [pc, #404]	; (8006f28 <HAL_RCC_ClockConfig+0x1c0>)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d9a:	4b63      	ldr	r3, [pc, #396]	; (8006f28 <HAL_RCC_ClockConfig+0x1c0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d001      	beq.n	8006dac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0b8      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d020      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dc4:	4b59      	ldr	r3, [pc, #356]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4a58      	ldr	r2, [pc, #352]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006dca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006dce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ddc:	4b53      	ldr	r3, [pc, #332]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	4a52      	ldr	r2, [pc, #328]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006de2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006de6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de8:	4b50      	ldr	r3, [pc, #320]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	494d      	ldr	r1, [pc, #308]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d040      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d107      	bne.n	8006e1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e0e:	4b47      	ldr	r3, [pc, #284]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d115      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e07f      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d107      	bne.n	8006e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e26:	4b41      	ldr	r3, [pc, #260]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e073      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e36:	4b3d      	ldr	r3, [pc, #244]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e06b      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e46:	4b39      	ldr	r3, [pc, #228]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f023 0203 	bic.w	r2, r3, #3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	4936      	ldr	r1, [pc, #216]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e58:	f7fc f804 	bl	8002e64 <HAL_GetTick>
 8006e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e5e:	e00a      	b.n	8006e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e60:	f7fc f800 	bl	8002e64 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e053      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e76:	4b2d      	ldr	r3, [pc, #180]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f003 020c 	and.w	r2, r3, #12
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d1eb      	bne.n	8006e60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e88:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <HAL_RCC_ClockConfig+0x1c0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d210      	bcs.n	8006eb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e96:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <HAL_RCC_ClockConfig+0x1c0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f023 0207 	bic.w	r2, r3, #7
 8006e9e:	4922      	ldr	r1, [pc, #136]	; (8006f28 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea6:	4b20      	ldr	r3, [pc, #128]	; (8006f28 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d001      	beq.n	8006eb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e032      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d008      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ec4:	4b19      	ldr	r3, [pc, #100]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4916      	ldr	r1, [pc, #88]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d009      	beq.n	8006ef6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	490e      	ldr	r1, [pc, #56]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ef6:	f000 f821 	bl	8006f3c <HAL_RCC_GetSysClockFreq>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <HAL_RCC_ClockConfig+0x1c4>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	490a      	ldr	r1, [pc, #40]	; (8006f30 <HAL_RCC_ClockConfig+0x1c8>)
 8006f08:	5ccb      	ldrb	r3, [r1, r3]
 8006f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <HAL_RCC_ClockConfig+0x1cc>)
 8006f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f12:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <HAL_RCC_ClockConfig+0x1d0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fb ff62 	bl	8002de0 <HAL_InitTick>

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40022000 	.word	0x40022000
 8006f2c:	40021000 	.word	0x40021000
 8006f30:	0800b4b4 	.word	0x0800b4b4
 8006f34:	20000000 	.word	0x20000000
 8006f38:	20000004 	.word	0x20000004

08006f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f3c:	b490      	push	{r4, r7}
 8006f3e:	b08a      	sub	sp, #40	; 0x28
 8006f40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f42:	4b29      	ldr	r3, [pc, #164]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0xac>)
 8006f44:	1d3c      	adds	r4, r7, #4
 8006f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f4c:	f240 2301 	movw	r3, #513	; 0x201
 8006f50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61fb      	str	r3, [r7, #28]
 8006f56:	2300      	movs	r3, #0
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006f66:	4b21      	ldr	r3, [pc, #132]	; (8006fec <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f003 030c 	and.w	r3, r3, #12
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d002      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x40>
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d003      	beq.n	8006f82 <HAL_RCC_GetSysClockFreq+0x46>
 8006f7a:	e02b      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f7c:	4b1c      	ldr	r3, [pc, #112]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f7e:	623b      	str	r3, [r7, #32]
      break;
 8006f80:	e02b      	b.n	8006fda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	0c9b      	lsrs	r3, r3, #18
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	3328      	adds	r3, #40	; 0x28
 8006f8c:	443b      	add	r3, r7
 8006f8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006f92:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d012      	beq.n	8006fc4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <HAL_RCC_GetSysClockFreq+0xb0>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	0c5b      	lsrs	r3, r3, #17
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	3328      	adds	r3, #40	; 0x28
 8006faa:	443b      	add	r3, r7
 8006fac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006fb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4a0e      	ldr	r2, [pc, #56]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006fb6:	fb03 f202 	mul.w	r2, r3, r2
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc2:	e004      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	4a0b      	ldr	r2, [pc, #44]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fc8:	fb02 f303 	mul.w	r3, r2, r3
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	623b      	str	r3, [r7, #32]
      break;
 8006fd2:	e002      	b.n	8006fda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006fd4:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006fd6:	623b      	str	r3, [r7, #32]
      break;
 8006fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fda:	6a3b      	ldr	r3, [r7, #32]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3728      	adds	r7, #40	; 0x28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc90      	pop	{r4, r7}
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	0800b4a4 	.word	0x0800b4a4
 8006fec:	40021000 	.word	0x40021000
 8006ff0:	007a1200 	.word	0x007a1200
 8006ff4:	003d0900 	.word	0x003d0900

08006ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ffc:	4b02      	ldr	r3, [pc, #8]	; (8007008 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
}
 8007000:	4618      	mov	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr
 8007008:	20000000 	.word	0x20000000

0800700c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007010:	f7ff fff2 	bl	8006ff8 <HAL_RCC_GetHCLKFreq>
 8007014:	4602      	mov	r2, r0
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	0a1b      	lsrs	r3, r3, #8
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	4903      	ldr	r1, [pc, #12]	; (8007030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007022:	5ccb      	ldrb	r3, [r1, r3]
 8007024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007028:	4618      	mov	r0, r3
 800702a:	bd80      	pop	{r7, pc}
 800702c:	40021000 	.word	0x40021000
 8007030:	0800b4c4 	.word	0x0800b4c4

08007034 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800703c:	4b0a      	ldr	r3, [pc, #40]	; (8007068 <RCC_Delay+0x34>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a0a      	ldr	r2, [pc, #40]	; (800706c <RCC_Delay+0x38>)
 8007042:	fba2 2303 	umull	r2, r3, r2, r3
 8007046:	0a5b      	lsrs	r3, r3, #9
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	fb02 f303 	mul.w	r3, r2, r3
 800704e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007050:	bf00      	nop
  }
  while (Delay --);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	1e5a      	subs	r2, r3, #1
 8007056:	60fa      	str	r2, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1f9      	bne.n	8007050 <RCC_Delay+0x1c>
}
 800705c:	bf00      	nop
 800705e:	bf00      	nop
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr
 8007068:	20000000 	.word	0x20000000
 800706c:	10624dd3 	.word	0x10624dd3

08007070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e041      	b.n	8007106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fb fd34 	bl	8002b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4619      	mov	r1, r3
 80070ae:	4610      	mov	r0, r2
 80070b0:	f000 fa70 	bl	8007594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b01      	cmp	r3, #1
 8007122:	d001      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e03a      	b.n	800719e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a18      	ldr	r2, [pc, #96]	; (80071a8 <HAL_TIM_Base_Start_IT+0x98>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00e      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x58>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007152:	d009      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x58>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a14      	ldr	r2, [pc, #80]	; (80071ac <HAL_TIM_Base_Start_IT+0x9c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x58>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a13      	ldr	r2, [pc, #76]	; (80071b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d111      	bne.n	800718c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b06      	cmp	r3, #6
 8007178:	d010      	beq.n	800719c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718a:	e007      	b.n	800719c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr
 80071a8:	40012c00 	.word	0x40012c00
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800

080071b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0202 	mvn.w	r2, #2
 80071e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9b1 	bl	800755e <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f9a4 	bl	800754c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f9b3 	bl	8007570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b04      	cmp	r3, #4
 800721c:	d122      	bne.n	8007264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b04      	cmp	r3, #4
 800722a:	d11b      	bne.n	8007264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0204 	mvn.w	r2, #4
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f987 	bl	800755e <HAL_TIM_IC_CaptureCallback>
 8007250:	e005      	b.n	800725e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f97a 	bl	800754c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f989 	bl	8007570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b08      	cmp	r3, #8
 8007270:	d122      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b08      	cmp	r3, #8
 800727e:	d11b      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0208 	mvn.w	r2, #8
 8007288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2204      	movs	r2, #4
 800728e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f95d 	bl	800755e <HAL_TIM_IC_CaptureCallback>
 80072a4:	e005      	b.n	80072b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f950 	bl	800754c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f95f 	bl	8007570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0310 	and.w	r3, r3, #16
 80072c2:	2b10      	cmp	r3, #16
 80072c4:	d122      	bne.n	800730c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b10      	cmp	r3, #16
 80072d2:	d11b      	bne.n	800730c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0210 	mvn.w	r2, #16
 80072dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2208      	movs	r2, #8
 80072e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f933 	bl	800755e <HAL_TIM_IC_CaptureCallback>
 80072f8:	e005      	b.n	8007306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f926 	bl	800754c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f935 	bl	8007570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b01      	cmp	r3, #1
 8007318:	d10e      	bne.n	8007338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b01      	cmp	r3, #1
 8007326:	d107      	bne.n	8007338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0201 	mvn.w	r2, #1
 8007330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fb f956 	bl	80025e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007342:	2b80      	cmp	r3, #128	; 0x80
 8007344:	d10e      	bne.n	8007364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007350:	2b80      	cmp	r3, #128	; 0x80
 8007352:	d107      	bne.n	8007364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800735c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa77 	bl	8007852 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d10e      	bne.n	8007390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d107      	bne.n	8007390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f8f9 	bl	8007582 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b20      	cmp	r3, #32
 800739c:	d10e      	bne.n	80073bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d107      	bne.n	80073bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0220 	mvn.w	r2, #32
 80073b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa42 	bl	8007840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_TIM_ConfigClockSource+0x18>
 80073d8:	2302      	movs	r3, #2
 80073da:	e0b3      	b.n	8007544 <HAL_TIM_ConfigClockSource+0x180>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007402:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007414:	d03e      	beq.n	8007494 <HAL_TIM_ConfigClockSource+0xd0>
 8007416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800741a:	f200 8087 	bhi.w	800752c <HAL_TIM_ConfigClockSource+0x168>
 800741e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007422:	f000 8085 	beq.w	8007530 <HAL_TIM_ConfigClockSource+0x16c>
 8007426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742a:	d87f      	bhi.n	800752c <HAL_TIM_ConfigClockSource+0x168>
 800742c:	2b70      	cmp	r3, #112	; 0x70
 800742e:	d01a      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0xa2>
 8007430:	2b70      	cmp	r3, #112	; 0x70
 8007432:	d87b      	bhi.n	800752c <HAL_TIM_ConfigClockSource+0x168>
 8007434:	2b60      	cmp	r3, #96	; 0x60
 8007436:	d050      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x116>
 8007438:	2b60      	cmp	r3, #96	; 0x60
 800743a:	d877      	bhi.n	800752c <HAL_TIM_ConfigClockSource+0x168>
 800743c:	2b50      	cmp	r3, #80	; 0x50
 800743e:	d03c      	beq.n	80074ba <HAL_TIM_ConfigClockSource+0xf6>
 8007440:	2b50      	cmp	r3, #80	; 0x50
 8007442:	d873      	bhi.n	800752c <HAL_TIM_ConfigClockSource+0x168>
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d058      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x136>
 8007448:	2b40      	cmp	r3, #64	; 0x40
 800744a:	d86f      	bhi.n	800752c <HAL_TIM_ConfigClockSource+0x168>
 800744c:	2b30      	cmp	r3, #48	; 0x30
 800744e:	d064      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x156>
 8007450:	2b30      	cmp	r3, #48	; 0x30
 8007452:	d86b      	bhi.n	800752c <HAL_TIM_ConfigClockSource+0x168>
 8007454:	2b20      	cmp	r3, #32
 8007456:	d060      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x156>
 8007458:	2b20      	cmp	r3, #32
 800745a:	d867      	bhi.n	800752c <HAL_TIM_ConfigClockSource+0x168>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d05c      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x156>
 8007460:	2b10      	cmp	r3, #16
 8007462:	d05a      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007464:	e062      	b.n	800752c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	6899      	ldr	r1, [r3, #8]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f000 f966 	bl	8007746 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007488:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	609a      	str	r2, [r3, #8]
      break;
 8007492:	e04e      	b.n	8007532 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	6899      	ldr	r1, [r3, #8]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f000 f94f 	bl	8007746 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074b6:	609a      	str	r2, [r3, #8]
      break;
 80074b8:	e03b      	b.n	8007532 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6859      	ldr	r1, [r3, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	461a      	mov	r2, r3
 80074c8:	f000 f8c6 	bl	8007658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2150      	movs	r1, #80	; 0x50
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 f91d 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 80074d8:	e02b      	b.n	8007532 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	6859      	ldr	r1, [r3, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f000 f8e4 	bl	80076b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2160      	movs	r1, #96	; 0x60
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 f90d 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 80074f8:	e01b      	b.n	8007532 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6859      	ldr	r1, [r3, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	461a      	mov	r2, r3
 8007508:	f000 f8a6 	bl	8007658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2140      	movs	r1, #64	; 0x40
 8007512:	4618      	mov	r0, r3
 8007514:	f000 f8fd 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 8007518:	e00b      	b.n	8007532 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f000 f8f4 	bl	8007712 <TIM_ITRx_SetConfig>
        break;
 800752a:	e002      	b.n	8007532 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800752c:	bf00      	nop
 800752e:	e000      	b.n	8007532 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007530:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr

0800755e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	bc80      	pop	{r7}
 800756e:	4770      	bx	lr

08007570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr

08007582 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	bc80      	pop	{r7}
 8007592:	4770      	bx	lr

08007594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a29      	ldr	r2, [pc, #164]	; (800764c <TIM_Base_SetConfig+0xb8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00b      	beq.n	80075c4 <TIM_Base_SetConfig+0x30>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b2:	d007      	beq.n	80075c4 <TIM_Base_SetConfig+0x30>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a26      	ldr	r2, [pc, #152]	; (8007650 <TIM_Base_SetConfig+0xbc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d003      	beq.n	80075c4 <TIM_Base_SetConfig+0x30>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a25      	ldr	r2, [pc, #148]	; (8007654 <TIM_Base_SetConfig+0xc0>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d108      	bne.n	80075d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1c      	ldr	r2, [pc, #112]	; (800764c <TIM_Base_SetConfig+0xb8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00b      	beq.n	80075f6 <TIM_Base_SetConfig+0x62>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e4:	d007      	beq.n	80075f6 <TIM_Base_SetConfig+0x62>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a19      	ldr	r2, [pc, #100]	; (8007650 <TIM_Base_SetConfig+0xbc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_Base_SetConfig+0x62>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a18      	ldr	r2, [pc, #96]	; (8007654 <TIM_Base_SetConfig+0xc0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d108      	bne.n	8007608 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a07      	ldr	r2, [pc, #28]	; (800764c <TIM_Base_SetConfig+0xb8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d103      	bne.n	800763c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	615a      	str	r2, [r3, #20]
}
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr
 800764c:	40012c00 	.word	0x40012c00
 8007650:	40000400 	.word	0x40000400
 8007654:	40000800 	.word	0x40000800

08007658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f023 0201 	bic.w	r2, r3, #1
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f023 030a 	bic.w	r3, r3, #10
 8007694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	621a      	str	r2, [r3, #32]
}
 80076aa:	bf00      	nop
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	f023 0210 	bic.w	r2, r3, #16
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	031b      	lsls	r3, r3, #12
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	621a      	str	r2, [r3, #32]
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	bc80      	pop	{r7}
 8007710:	4770      	bx	lr

08007712 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007728:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	f043 0307 	orr.w	r3, r3, #7
 8007734:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	609a      	str	r2, [r3, #8]
}
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr

08007746 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007746:	b480      	push	{r7}
 8007748:	b087      	sub	sp, #28
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	607a      	str	r2, [r7, #4]
 8007752:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007760:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	021a      	lsls	r2, r3, #8
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	431a      	orrs	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4313      	orrs	r3, r2
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4313      	orrs	r3, r2
 8007772:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	609a      	str	r2, [r3, #8]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr

08007784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007798:	2302      	movs	r3, #2
 800779a:	e046      	b.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a16      	ldr	r2, [pc, #88]	; (8007834 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00e      	beq.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e8:	d009      	beq.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a12      	ldr	r2, [pc, #72]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d004      	beq.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a10      	ldr	r2, [pc, #64]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d10c      	bne.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	4313      	orrs	r3, r2
 800780e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr
 8007834:	40012c00 	.word	0x40012c00
 8007838:	40000400 	.word	0x40000400
 800783c:	40000800 	.word	0x40000800

08007840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	bc80      	pop	{r7}
 8007850:	4770      	bx	lr

08007852 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr

08007864 <__errno>:
 8007864:	4b01      	ldr	r3, [pc, #4]	; (800786c <__errno+0x8>)
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	2000000c 	.word	0x2000000c

08007870 <__libc_init_array>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	2600      	movs	r6, #0
 8007874:	4d0c      	ldr	r5, [pc, #48]	; (80078a8 <__libc_init_array+0x38>)
 8007876:	4c0d      	ldr	r4, [pc, #52]	; (80078ac <__libc_init_array+0x3c>)
 8007878:	1b64      	subs	r4, r4, r5
 800787a:	10a4      	asrs	r4, r4, #2
 800787c:	42a6      	cmp	r6, r4
 800787e:	d109      	bne.n	8007894 <__libc_init_array+0x24>
 8007880:	f003 fde0 	bl	800b444 <_init>
 8007884:	2600      	movs	r6, #0
 8007886:	4d0a      	ldr	r5, [pc, #40]	; (80078b0 <__libc_init_array+0x40>)
 8007888:	4c0a      	ldr	r4, [pc, #40]	; (80078b4 <__libc_init_array+0x44>)
 800788a:	1b64      	subs	r4, r4, r5
 800788c:	10a4      	asrs	r4, r4, #2
 800788e:	42a6      	cmp	r6, r4
 8007890:	d105      	bne.n	800789e <__libc_init_array+0x2e>
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	f855 3b04 	ldr.w	r3, [r5], #4
 8007898:	4798      	blx	r3
 800789a:	3601      	adds	r6, #1
 800789c:	e7ee      	b.n	800787c <__libc_init_array+0xc>
 800789e:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a2:	4798      	blx	r3
 80078a4:	3601      	adds	r6, #1
 80078a6:	e7f2      	b.n	800788e <__libc_init_array+0x1e>
 80078a8:	0800b8e0 	.word	0x0800b8e0
 80078ac:	0800b8e0 	.word	0x0800b8e0
 80078b0:	0800b8e0 	.word	0x0800b8e0
 80078b4:	0800b8e4 	.word	0x0800b8e4

080078b8 <memcpy>:
 80078b8:	440a      	add	r2, r1
 80078ba:	4291      	cmp	r1, r2
 80078bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80078c0:	d100      	bne.n	80078c4 <memcpy+0xc>
 80078c2:	4770      	bx	lr
 80078c4:	b510      	push	{r4, lr}
 80078c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ca:	4291      	cmp	r1, r2
 80078cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078d0:	d1f9      	bne.n	80078c6 <memcpy+0xe>
 80078d2:	bd10      	pop	{r4, pc}

080078d4 <memset>:
 80078d4:	4603      	mov	r3, r0
 80078d6:	4402      	add	r2, r0
 80078d8:	4293      	cmp	r3, r2
 80078da:	d100      	bne.n	80078de <memset+0xa>
 80078dc:	4770      	bx	lr
 80078de:	f803 1b01 	strb.w	r1, [r3], #1
 80078e2:	e7f9      	b.n	80078d8 <memset+0x4>

080078e4 <__cvt>:
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ea:	461f      	mov	r7, r3
 80078ec:	bfbb      	ittet	lt
 80078ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80078f2:	461f      	movlt	r7, r3
 80078f4:	2300      	movge	r3, #0
 80078f6:	232d      	movlt	r3, #45	; 0x2d
 80078f8:	b088      	sub	sp, #32
 80078fa:	4614      	mov	r4, r2
 80078fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007900:	7013      	strb	r3, [r2, #0]
 8007902:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007904:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007908:	f023 0820 	bic.w	r8, r3, #32
 800790c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007910:	d005      	beq.n	800791e <__cvt+0x3a>
 8007912:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007916:	d100      	bne.n	800791a <__cvt+0x36>
 8007918:	3501      	adds	r5, #1
 800791a:	2302      	movs	r3, #2
 800791c:	e000      	b.n	8007920 <__cvt+0x3c>
 800791e:	2303      	movs	r3, #3
 8007920:	aa07      	add	r2, sp, #28
 8007922:	9204      	str	r2, [sp, #16]
 8007924:	aa06      	add	r2, sp, #24
 8007926:	e9cd a202 	strd	sl, r2, [sp, #8]
 800792a:	e9cd 3500 	strd	r3, r5, [sp]
 800792e:	4622      	mov	r2, r4
 8007930:	463b      	mov	r3, r7
 8007932:	f000 fce5 	bl	8008300 <_dtoa_r>
 8007936:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800793a:	4606      	mov	r6, r0
 800793c:	d102      	bne.n	8007944 <__cvt+0x60>
 800793e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007940:	07db      	lsls	r3, r3, #31
 8007942:	d522      	bpl.n	800798a <__cvt+0xa6>
 8007944:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007948:	eb06 0905 	add.w	r9, r6, r5
 800794c:	d110      	bne.n	8007970 <__cvt+0x8c>
 800794e:	7833      	ldrb	r3, [r6, #0]
 8007950:	2b30      	cmp	r3, #48	; 0x30
 8007952:	d10a      	bne.n	800796a <__cvt+0x86>
 8007954:	2200      	movs	r2, #0
 8007956:	2300      	movs	r3, #0
 8007958:	4620      	mov	r0, r4
 800795a:	4639      	mov	r1, r7
 800795c:	f7f9 f824 	bl	80009a8 <__aeabi_dcmpeq>
 8007960:	b918      	cbnz	r0, 800796a <__cvt+0x86>
 8007962:	f1c5 0501 	rsb	r5, r5, #1
 8007966:	f8ca 5000 	str.w	r5, [sl]
 800796a:	f8da 3000 	ldr.w	r3, [sl]
 800796e:	4499      	add	r9, r3
 8007970:	2200      	movs	r2, #0
 8007972:	2300      	movs	r3, #0
 8007974:	4620      	mov	r0, r4
 8007976:	4639      	mov	r1, r7
 8007978:	f7f9 f816 	bl	80009a8 <__aeabi_dcmpeq>
 800797c:	b108      	cbz	r0, 8007982 <__cvt+0x9e>
 800797e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007982:	2230      	movs	r2, #48	; 0x30
 8007984:	9b07      	ldr	r3, [sp, #28]
 8007986:	454b      	cmp	r3, r9
 8007988:	d307      	bcc.n	800799a <__cvt+0xb6>
 800798a:	4630      	mov	r0, r6
 800798c:	9b07      	ldr	r3, [sp, #28]
 800798e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007990:	1b9b      	subs	r3, r3, r6
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	b008      	add	sp, #32
 8007996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799a:	1c59      	adds	r1, r3, #1
 800799c:	9107      	str	r1, [sp, #28]
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	e7f0      	b.n	8007984 <__cvt+0xa0>

080079a2 <__exponent>:
 80079a2:	4603      	mov	r3, r0
 80079a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079a6:	2900      	cmp	r1, #0
 80079a8:	f803 2b02 	strb.w	r2, [r3], #2
 80079ac:	bfb6      	itet	lt
 80079ae:	222d      	movlt	r2, #45	; 0x2d
 80079b0:	222b      	movge	r2, #43	; 0x2b
 80079b2:	4249      	neglt	r1, r1
 80079b4:	2909      	cmp	r1, #9
 80079b6:	7042      	strb	r2, [r0, #1]
 80079b8:	dd2b      	ble.n	8007a12 <__exponent+0x70>
 80079ba:	f10d 0407 	add.w	r4, sp, #7
 80079be:	46a4      	mov	ip, r4
 80079c0:	270a      	movs	r7, #10
 80079c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80079c6:	460a      	mov	r2, r1
 80079c8:	46a6      	mov	lr, r4
 80079ca:	fb07 1516 	mls	r5, r7, r6, r1
 80079ce:	2a63      	cmp	r2, #99	; 0x63
 80079d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80079d4:	4631      	mov	r1, r6
 80079d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80079da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079de:	dcf0      	bgt.n	80079c2 <__exponent+0x20>
 80079e0:	3130      	adds	r1, #48	; 0x30
 80079e2:	f1ae 0502 	sub.w	r5, lr, #2
 80079e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079ea:	4629      	mov	r1, r5
 80079ec:	1c44      	adds	r4, r0, #1
 80079ee:	4561      	cmp	r1, ip
 80079f0:	d30a      	bcc.n	8007a08 <__exponent+0x66>
 80079f2:	f10d 0209 	add.w	r2, sp, #9
 80079f6:	eba2 020e 	sub.w	r2, r2, lr
 80079fa:	4565      	cmp	r5, ip
 80079fc:	bf88      	it	hi
 80079fe:	2200      	movhi	r2, #0
 8007a00:	4413      	add	r3, r2
 8007a02:	1a18      	subs	r0, r3, r0
 8007a04:	b003      	add	sp, #12
 8007a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a0c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a10:	e7ed      	b.n	80079ee <__exponent+0x4c>
 8007a12:	2330      	movs	r3, #48	; 0x30
 8007a14:	3130      	adds	r1, #48	; 0x30
 8007a16:	7083      	strb	r3, [r0, #2]
 8007a18:	70c1      	strb	r1, [r0, #3]
 8007a1a:	1d03      	adds	r3, r0, #4
 8007a1c:	e7f1      	b.n	8007a02 <__exponent+0x60>
	...

08007a20 <_printf_float>:
 8007a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	b091      	sub	sp, #68	; 0x44
 8007a26:	460c      	mov	r4, r1
 8007a28:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007a2c:	4616      	mov	r6, r2
 8007a2e:	461f      	mov	r7, r3
 8007a30:	4605      	mov	r5, r0
 8007a32:	f001 fa53 	bl	8008edc <_localeconv_r>
 8007a36:	6803      	ldr	r3, [r0, #0]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3c:	f7f8 fb88 	bl	8000150 <strlen>
 8007a40:	2300      	movs	r3, #0
 8007a42:	930e      	str	r3, [sp, #56]	; 0x38
 8007a44:	f8d8 3000 	ldr.w	r3, [r8]
 8007a48:	900a      	str	r0, [sp, #40]	; 0x28
 8007a4a:	3307      	adds	r3, #7
 8007a4c:	f023 0307 	bic.w	r3, r3, #7
 8007a50:	f103 0208 	add.w	r2, r3, #8
 8007a54:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007a58:	f8d4 b000 	ldr.w	fp, [r4]
 8007a5c:	f8c8 2000 	str.w	r2, [r8]
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a68:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007a6c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a72:	f04f 32ff 	mov.w	r2, #4294967295
 8007a76:	4640      	mov	r0, r8
 8007a78:	4b9c      	ldr	r3, [pc, #624]	; (8007cec <_printf_float+0x2cc>)
 8007a7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a7c:	f7f8 ffc6 	bl	8000a0c <__aeabi_dcmpun>
 8007a80:	bb70      	cbnz	r0, 8007ae0 <_printf_float+0xc0>
 8007a82:	f04f 32ff 	mov.w	r2, #4294967295
 8007a86:	4640      	mov	r0, r8
 8007a88:	4b98      	ldr	r3, [pc, #608]	; (8007cec <_printf_float+0x2cc>)
 8007a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a8c:	f7f8 ffa0 	bl	80009d0 <__aeabi_dcmple>
 8007a90:	bb30      	cbnz	r0, 8007ae0 <_printf_float+0xc0>
 8007a92:	2200      	movs	r2, #0
 8007a94:	2300      	movs	r3, #0
 8007a96:	4640      	mov	r0, r8
 8007a98:	4651      	mov	r1, sl
 8007a9a:	f7f8 ff8f 	bl	80009bc <__aeabi_dcmplt>
 8007a9e:	b110      	cbz	r0, 8007aa6 <_printf_float+0x86>
 8007aa0:	232d      	movs	r3, #45	; 0x2d
 8007aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa6:	4b92      	ldr	r3, [pc, #584]	; (8007cf0 <_printf_float+0x2d0>)
 8007aa8:	4892      	ldr	r0, [pc, #584]	; (8007cf4 <_printf_float+0x2d4>)
 8007aaa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007aae:	bf94      	ite	ls
 8007ab0:	4698      	movls	r8, r3
 8007ab2:	4680      	movhi	r8, r0
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	f04f 0a00 	mov.w	sl, #0
 8007aba:	6123      	str	r3, [r4, #16]
 8007abc:	f02b 0304 	bic.w	r3, fp, #4
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	4633      	mov	r3, r6
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	9700      	str	r7, [sp, #0]
 8007aca:	aa0f      	add	r2, sp, #60	; 0x3c
 8007acc:	f000 f9d4 	bl	8007e78 <_printf_common>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f040 8090 	bne.w	8007bf6 <_printf_float+0x1d6>
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	b011      	add	sp, #68	; 0x44
 8007adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	4653      	mov	r3, sl
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4651      	mov	r1, sl
 8007ae8:	f7f8 ff90 	bl	8000a0c <__aeabi_dcmpun>
 8007aec:	b148      	cbz	r0, 8007b02 <_printf_float+0xe2>
 8007aee:	f1ba 0f00 	cmp.w	sl, #0
 8007af2:	bfb8      	it	lt
 8007af4:	232d      	movlt	r3, #45	; 0x2d
 8007af6:	4880      	ldr	r0, [pc, #512]	; (8007cf8 <_printf_float+0x2d8>)
 8007af8:	bfb8      	it	lt
 8007afa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007afe:	4b7f      	ldr	r3, [pc, #508]	; (8007cfc <_printf_float+0x2dc>)
 8007b00:	e7d3      	b.n	8007aaa <_printf_float+0x8a>
 8007b02:	6863      	ldr	r3, [r4, #4]
 8007b04:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	d142      	bne.n	8007b92 <_printf_float+0x172>
 8007b0c:	2306      	movs	r3, #6
 8007b0e:	6063      	str	r3, [r4, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	9206      	str	r2, [sp, #24]
 8007b14:	aa0e      	add	r2, sp, #56	; 0x38
 8007b16:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007b1a:	aa0d      	add	r2, sp, #52	; 0x34
 8007b1c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007b20:	9203      	str	r2, [sp, #12]
 8007b22:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007b26:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007b2a:	6023      	str	r3, [r4, #0]
 8007b2c:	6863      	ldr	r3, [r4, #4]
 8007b2e:	4642      	mov	r2, r8
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	4628      	mov	r0, r5
 8007b34:	4653      	mov	r3, sl
 8007b36:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b38:	f7ff fed4 	bl	80078e4 <__cvt>
 8007b3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b3e:	4680      	mov	r8, r0
 8007b40:	2947      	cmp	r1, #71	; 0x47
 8007b42:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b44:	d108      	bne.n	8007b58 <_printf_float+0x138>
 8007b46:	1cc8      	adds	r0, r1, #3
 8007b48:	db02      	blt.n	8007b50 <_printf_float+0x130>
 8007b4a:	6863      	ldr	r3, [r4, #4]
 8007b4c:	4299      	cmp	r1, r3
 8007b4e:	dd40      	ble.n	8007bd2 <_printf_float+0x1b2>
 8007b50:	f1a9 0902 	sub.w	r9, r9, #2
 8007b54:	fa5f f989 	uxtb.w	r9, r9
 8007b58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b5c:	d81f      	bhi.n	8007b9e <_printf_float+0x17e>
 8007b5e:	464a      	mov	r2, r9
 8007b60:	3901      	subs	r1, #1
 8007b62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b66:	910d      	str	r1, [sp, #52]	; 0x34
 8007b68:	f7ff ff1b 	bl	80079a2 <__exponent>
 8007b6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b6e:	4682      	mov	sl, r0
 8007b70:	1813      	adds	r3, r2, r0
 8007b72:	2a01      	cmp	r2, #1
 8007b74:	6123      	str	r3, [r4, #16]
 8007b76:	dc02      	bgt.n	8007b7e <_printf_float+0x15e>
 8007b78:	6822      	ldr	r2, [r4, #0]
 8007b7a:	07d2      	lsls	r2, r2, #31
 8007b7c:	d501      	bpl.n	8007b82 <_printf_float+0x162>
 8007b7e:	3301      	adds	r3, #1
 8007b80:	6123      	str	r3, [r4, #16]
 8007b82:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d09b      	beq.n	8007ac2 <_printf_float+0xa2>
 8007b8a:	232d      	movs	r3, #45	; 0x2d
 8007b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b90:	e797      	b.n	8007ac2 <_printf_float+0xa2>
 8007b92:	2947      	cmp	r1, #71	; 0x47
 8007b94:	d1bc      	bne.n	8007b10 <_printf_float+0xf0>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1ba      	bne.n	8007b10 <_printf_float+0xf0>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e7b7      	b.n	8007b0e <_printf_float+0xee>
 8007b9e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007ba2:	d118      	bne.n	8007bd6 <_printf_float+0x1b6>
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	6863      	ldr	r3, [r4, #4]
 8007ba8:	dd0b      	ble.n	8007bc2 <_printf_float+0x1a2>
 8007baa:	6121      	str	r1, [r4, #16]
 8007bac:	b913      	cbnz	r3, 8007bb4 <_printf_float+0x194>
 8007bae:	6822      	ldr	r2, [r4, #0]
 8007bb0:	07d0      	lsls	r0, r2, #31
 8007bb2:	d502      	bpl.n	8007bba <_printf_float+0x19a>
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	440b      	add	r3, r1
 8007bb8:	6123      	str	r3, [r4, #16]
 8007bba:	f04f 0a00 	mov.w	sl, #0
 8007bbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bc0:	e7df      	b.n	8007b82 <_printf_float+0x162>
 8007bc2:	b913      	cbnz	r3, 8007bca <_printf_float+0x1aa>
 8007bc4:	6822      	ldr	r2, [r4, #0]
 8007bc6:	07d2      	lsls	r2, r2, #31
 8007bc8:	d501      	bpl.n	8007bce <_printf_float+0x1ae>
 8007bca:	3302      	adds	r3, #2
 8007bcc:	e7f4      	b.n	8007bb8 <_printf_float+0x198>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e7f2      	b.n	8007bb8 <_printf_float+0x198>
 8007bd2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bd8:	4299      	cmp	r1, r3
 8007bda:	db05      	blt.n	8007be8 <_printf_float+0x1c8>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	6121      	str	r1, [r4, #16]
 8007be0:	07d8      	lsls	r0, r3, #31
 8007be2:	d5ea      	bpl.n	8007bba <_printf_float+0x19a>
 8007be4:	1c4b      	adds	r3, r1, #1
 8007be6:	e7e7      	b.n	8007bb8 <_printf_float+0x198>
 8007be8:	2900      	cmp	r1, #0
 8007bea:	bfcc      	ite	gt
 8007bec:	2201      	movgt	r2, #1
 8007bee:	f1c1 0202 	rsble	r2, r1, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	e7e0      	b.n	8007bb8 <_printf_float+0x198>
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	055a      	lsls	r2, r3, #21
 8007bfa:	d407      	bmi.n	8007c0c <_printf_float+0x1ec>
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	4642      	mov	r2, r8
 8007c00:	4631      	mov	r1, r6
 8007c02:	4628      	mov	r0, r5
 8007c04:	47b8      	blx	r7
 8007c06:	3001      	adds	r0, #1
 8007c08:	d12b      	bne.n	8007c62 <_printf_float+0x242>
 8007c0a:	e764      	b.n	8007ad6 <_printf_float+0xb6>
 8007c0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007c10:	f240 80dd 	bls.w	8007dce <_printf_float+0x3ae>
 8007c14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f7f8 fec4 	bl	80009a8 <__aeabi_dcmpeq>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d033      	beq.n	8007c8c <_printf_float+0x26c>
 8007c24:	2301      	movs	r3, #1
 8007c26:	4631      	mov	r1, r6
 8007c28:	4628      	mov	r0, r5
 8007c2a:	4a35      	ldr	r2, [pc, #212]	; (8007d00 <_printf_float+0x2e0>)
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f43f af51 	beq.w	8007ad6 <_printf_float+0xb6>
 8007c34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	db02      	blt.n	8007c42 <_printf_float+0x222>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	07d8      	lsls	r0, r3, #31
 8007c40:	d50f      	bpl.n	8007c62 <_printf_float+0x242>
 8007c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c46:	4631      	mov	r1, r6
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b8      	blx	r7
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	f43f af42 	beq.w	8007ad6 <_printf_float+0xb6>
 8007c52:	f04f 0800 	mov.w	r8, #0
 8007c56:	f104 091a 	add.w	r9, r4, #26
 8007c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	4543      	cmp	r3, r8
 8007c60:	dc09      	bgt.n	8007c76 <_printf_float+0x256>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	079b      	lsls	r3, r3, #30
 8007c66:	f100 8102 	bmi.w	8007e6e <_printf_float+0x44e>
 8007c6a:	68e0      	ldr	r0, [r4, #12]
 8007c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c6e:	4298      	cmp	r0, r3
 8007c70:	bfb8      	it	lt
 8007c72:	4618      	movlt	r0, r3
 8007c74:	e731      	b.n	8007ada <_printf_float+0xba>
 8007c76:	2301      	movs	r3, #1
 8007c78:	464a      	mov	r2, r9
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f af28 	beq.w	8007ad6 <_printf_float+0xb6>
 8007c86:	f108 0801 	add.w	r8, r8, #1
 8007c8a:	e7e6      	b.n	8007c5a <_printf_float+0x23a>
 8007c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	dc38      	bgt.n	8007d04 <_printf_float+0x2e4>
 8007c92:	2301      	movs	r3, #1
 8007c94:	4631      	mov	r1, r6
 8007c96:	4628      	mov	r0, r5
 8007c98:	4a19      	ldr	r2, [pc, #100]	; (8007d00 <_printf_float+0x2e0>)
 8007c9a:	47b8      	blx	r7
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	f43f af1a 	beq.w	8007ad6 <_printf_float+0xb6>
 8007ca2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	d102      	bne.n	8007cb0 <_printf_float+0x290>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	07d9      	lsls	r1, r3, #31
 8007cae:	d5d8      	bpl.n	8007c62 <_printf_float+0x242>
 8007cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	f43f af0b 	beq.w	8007ad6 <_printf_float+0xb6>
 8007cc0:	f04f 0900 	mov.w	r9, #0
 8007cc4:	f104 0a1a 	add.w	sl, r4, #26
 8007cc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cca:	425b      	negs	r3, r3
 8007ccc:	454b      	cmp	r3, r9
 8007cce:	dc01      	bgt.n	8007cd4 <_printf_float+0x2b4>
 8007cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cd2:	e794      	b.n	8007bfe <_printf_float+0x1de>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	4652      	mov	r2, sl
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f aef9 	beq.w	8007ad6 <_printf_float+0xb6>
 8007ce4:	f109 0901 	add.w	r9, r9, #1
 8007ce8:	e7ee      	b.n	8007cc8 <_printf_float+0x2a8>
 8007cea:	bf00      	nop
 8007cec:	7fefffff 	.word	0x7fefffff
 8007cf0:	0800b4d0 	.word	0x0800b4d0
 8007cf4:	0800b4d4 	.word	0x0800b4d4
 8007cf8:	0800b4dc 	.word	0x0800b4dc
 8007cfc:	0800b4d8 	.word	0x0800b4d8
 8007d00:	0800b4e0 	.word	0x0800b4e0
 8007d04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	bfa8      	it	ge
 8007d0c:	461a      	movge	r2, r3
 8007d0e:	2a00      	cmp	r2, #0
 8007d10:	4691      	mov	r9, r2
 8007d12:	dc37      	bgt.n	8007d84 <_printf_float+0x364>
 8007d14:	f04f 0b00 	mov.w	fp, #0
 8007d18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d1c:	f104 021a 	add.w	r2, r4, #26
 8007d20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007d24:	ebaa 0309 	sub.w	r3, sl, r9
 8007d28:	455b      	cmp	r3, fp
 8007d2a:	dc33      	bgt.n	8007d94 <_printf_float+0x374>
 8007d2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d30:	429a      	cmp	r2, r3
 8007d32:	db3b      	blt.n	8007dac <_printf_float+0x38c>
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	07da      	lsls	r2, r3, #31
 8007d38:	d438      	bmi.n	8007dac <_printf_float+0x38c>
 8007d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d3e:	eba3 020a 	sub.w	r2, r3, sl
 8007d42:	eba3 0901 	sub.w	r9, r3, r1
 8007d46:	4591      	cmp	r9, r2
 8007d48:	bfa8      	it	ge
 8007d4a:	4691      	movge	r9, r2
 8007d4c:	f1b9 0f00 	cmp.w	r9, #0
 8007d50:	dc34      	bgt.n	8007dbc <_printf_float+0x39c>
 8007d52:	f04f 0800 	mov.w	r8, #0
 8007d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d5a:	f104 0a1a 	add.w	sl, r4, #26
 8007d5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	eba3 0309 	sub.w	r3, r3, r9
 8007d68:	4543      	cmp	r3, r8
 8007d6a:	f77f af7a 	ble.w	8007c62 <_printf_float+0x242>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4652      	mov	r2, sl
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f43f aeac 	beq.w	8007ad6 <_printf_float+0xb6>
 8007d7e:	f108 0801 	add.w	r8, r8, #1
 8007d82:	e7ec      	b.n	8007d5e <_printf_float+0x33e>
 8007d84:	4613      	mov	r3, r2
 8007d86:	4631      	mov	r1, r6
 8007d88:	4642      	mov	r2, r8
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b8      	blx	r7
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d1c0      	bne.n	8007d14 <_printf_float+0x2f4>
 8007d92:	e6a0      	b.n	8007ad6 <_printf_float+0xb6>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4631      	mov	r1, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d9c:	47b8      	blx	r7
 8007d9e:	3001      	adds	r0, #1
 8007da0:	f43f ae99 	beq.w	8007ad6 <_printf_float+0xb6>
 8007da4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007da6:	f10b 0b01 	add.w	fp, fp, #1
 8007daa:	e7b9      	b.n	8007d20 <_printf_float+0x300>
 8007dac:	4631      	mov	r1, r6
 8007dae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007db2:	4628      	mov	r0, r5
 8007db4:	47b8      	blx	r7
 8007db6:	3001      	adds	r0, #1
 8007db8:	d1bf      	bne.n	8007d3a <_printf_float+0x31a>
 8007dba:	e68c      	b.n	8007ad6 <_printf_float+0xb6>
 8007dbc:	464b      	mov	r3, r9
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	eb08 020a 	add.w	r2, r8, sl
 8007dc6:	47b8      	blx	r7
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d1c2      	bne.n	8007d52 <_printf_float+0x332>
 8007dcc:	e683      	b.n	8007ad6 <_printf_float+0xb6>
 8007dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dd0:	2a01      	cmp	r2, #1
 8007dd2:	dc01      	bgt.n	8007dd8 <_printf_float+0x3b8>
 8007dd4:	07db      	lsls	r3, r3, #31
 8007dd6:	d537      	bpl.n	8007e48 <_printf_float+0x428>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	4642      	mov	r2, r8
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b8      	blx	r7
 8007de2:	3001      	adds	r0, #1
 8007de4:	f43f ae77 	beq.w	8007ad6 <_printf_float+0xb6>
 8007de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	f43f ae6f 	beq.w	8007ad6 <_printf_float+0xb6>
 8007df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f7f8 fdd2 	bl	80009a8 <__aeabi_dcmpeq>
 8007e04:	b9d8      	cbnz	r0, 8007e3e <_printf_float+0x41e>
 8007e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e08:	f108 0201 	add.w	r2, r8, #1
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4628      	mov	r0, r5
 8007e12:	47b8      	blx	r7
 8007e14:	3001      	adds	r0, #1
 8007e16:	d10e      	bne.n	8007e36 <_printf_float+0x416>
 8007e18:	e65d      	b.n	8007ad6 <_printf_float+0xb6>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	464a      	mov	r2, r9
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4628      	mov	r0, r5
 8007e22:	47b8      	blx	r7
 8007e24:	3001      	adds	r0, #1
 8007e26:	f43f ae56 	beq.w	8007ad6 <_printf_float+0xb6>
 8007e2a:	f108 0801 	add.w	r8, r8, #1
 8007e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e30:	3b01      	subs	r3, #1
 8007e32:	4543      	cmp	r3, r8
 8007e34:	dcf1      	bgt.n	8007e1a <_printf_float+0x3fa>
 8007e36:	4653      	mov	r3, sl
 8007e38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e3c:	e6e0      	b.n	8007c00 <_printf_float+0x1e0>
 8007e3e:	f04f 0800 	mov.w	r8, #0
 8007e42:	f104 091a 	add.w	r9, r4, #26
 8007e46:	e7f2      	b.n	8007e2e <_printf_float+0x40e>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4642      	mov	r2, r8
 8007e4c:	e7df      	b.n	8007e0e <_printf_float+0x3ee>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	464a      	mov	r2, r9
 8007e52:	4631      	mov	r1, r6
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b8      	blx	r7
 8007e58:	3001      	adds	r0, #1
 8007e5a:	f43f ae3c 	beq.w	8007ad6 <_printf_float+0xb6>
 8007e5e:	f108 0801 	add.w	r8, r8, #1
 8007e62:	68e3      	ldr	r3, [r4, #12]
 8007e64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e66:	1a5b      	subs	r3, r3, r1
 8007e68:	4543      	cmp	r3, r8
 8007e6a:	dcf0      	bgt.n	8007e4e <_printf_float+0x42e>
 8007e6c:	e6fd      	b.n	8007c6a <_printf_float+0x24a>
 8007e6e:	f04f 0800 	mov.w	r8, #0
 8007e72:	f104 0919 	add.w	r9, r4, #25
 8007e76:	e7f4      	b.n	8007e62 <_printf_float+0x442>

08007e78 <_printf_common>:
 8007e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7c:	4616      	mov	r6, r2
 8007e7e:	4699      	mov	r9, r3
 8007e80:	688a      	ldr	r2, [r1, #8]
 8007e82:	690b      	ldr	r3, [r1, #16]
 8007e84:	4607      	mov	r7, r0
 8007e86:	4293      	cmp	r3, r2
 8007e88:	bfb8      	it	lt
 8007e8a:	4613      	movlt	r3, r2
 8007e8c:	6033      	str	r3, [r6, #0]
 8007e8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e92:	460c      	mov	r4, r1
 8007e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e98:	b10a      	cbz	r2, 8007e9e <_printf_common+0x26>
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	6033      	str	r3, [r6, #0]
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	0699      	lsls	r1, r3, #26
 8007ea2:	bf42      	ittt	mi
 8007ea4:	6833      	ldrmi	r3, [r6, #0]
 8007ea6:	3302      	addmi	r3, #2
 8007ea8:	6033      	strmi	r3, [r6, #0]
 8007eaa:	6825      	ldr	r5, [r4, #0]
 8007eac:	f015 0506 	ands.w	r5, r5, #6
 8007eb0:	d106      	bne.n	8007ec0 <_printf_common+0x48>
 8007eb2:	f104 0a19 	add.w	sl, r4, #25
 8007eb6:	68e3      	ldr	r3, [r4, #12]
 8007eb8:	6832      	ldr	r2, [r6, #0]
 8007eba:	1a9b      	subs	r3, r3, r2
 8007ebc:	42ab      	cmp	r3, r5
 8007ebe:	dc28      	bgt.n	8007f12 <_printf_common+0x9a>
 8007ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ec4:	1e13      	subs	r3, r2, #0
 8007ec6:	6822      	ldr	r2, [r4, #0]
 8007ec8:	bf18      	it	ne
 8007eca:	2301      	movne	r3, #1
 8007ecc:	0692      	lsls	r2, r2, #26
 8007ece:	d42d      	bmi.n	8007f2c <_printf_common+0xb4>
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ed8:	47c0      	blx	r8
 8007eda:	3001      	adds	r0, #1
 8007edc:	d020      	beq.n	8007f20 <_printf_common+0xa8>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	68e5      	ldr	r5, [r4, #12]
 8007ee2:	f003 0306 	and.w	r3, r3, #6
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	bf18      	it	ne
 8007eea:	2500      	movne	r5, #0
 8007eec:	6832      	ldr	r2, [r6, #0]
 8007eee:	f04f 0600 	mov.w	r6, #0
 8007ef2:	68a3      	ldr	r3, [r4, #8]
 8007ef4:	bf08      	it	eq
 8007ef6:	1aad      	subeq	r5, r5, r2
 8007ef8:	6922      	ldr	r2, [r4, #16]
 8007efa:	bf08      	it	eq
 8007efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f00:	4293      	cmp	r3, r2
 8007f02:	bfc4      	itt	gt
 8007f04:	1a9b      	subgt	r3, r3, r2
 8007f06:	18ed      	addgt	r5, r5, r3
 8007f08:	341a      	adds	r4, #26
 8007f0a:	42b5      	cmp	r5, r6
 8007f0c:	d11a      	bne.n	8007f44 <_printf_common+0xcc>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	e008      	b.n	8007f24 <_printf_common+0xac>
 8007f12:	2301      	movs	r3, #1
 8007f14:	4652      	mov	r2, sl
 8007f16:	4649      	mov	r1, r9
 8007f18:	4638      	mov	r0, r7
 8007f1a:	47c0      	blx	r8
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d103      	bne.n	8007f28 <_printf_common+0xb0>
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f28:	3501      	adds	r5, #1
 8007f2a:	e7c4      	b.n	8007eb6 <_printf_common+0x3e>
 8007f2c:	2030      	movs	r0, #48	; 0x30
 8007f2e:	18e1      	adds	r1, r4, r3
 8007f30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f3a:	4422      	add	r2, r4
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f42:	e7c5      	b.n	8007ed0 <_printf_common+0x58>
 8007f44:	2301      	movs	r3, #1
 8007f46:	4622      	mov	r2, r4
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	47c0      	blx	r8
 8007f4e:	3001      	adds	r0, #1
 8007f50:	d0e6      	beq.n	8007f20 <_printf_common+0xa8>
 8007f52:	3601      	adds	r6, #1
 8007f54:	e7d9      	b.n	8007f0a <_printf_common+0x92>
	...

08007f58 <_printf_i>:
 8007f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5c:	7e0f      	ldrb	r7, [r1, #24]
 8007f5e:	4691      	mov	r9, r2
 8007f60:	2f78      	cmp	r7, #120	; 0x78
 8007f62:	4680      	mov	r8, r0
 8007f64:	460c      	mov	r4, r1
 8007f66:	469a      	mov	sl, r3
 8007f68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f6e:	d807      	bhi.n	8007f80 <_printf_i+0x28>
 8007f70:	2f62      	cmp	r7, #98	; 0x62
 8007f72:	d80a      	bhi.n	8007f8a <_printf_i+0x32>
 8007f74:	2f00      	cmp	r7, #0
 8007f76:	f000 80d9 	beq.w	800812c <_printf_i+0x1d4>
 8007f7a:	2f58      	cmp	r7, #88	; 0x58
 8007f7c:	f000 80a4 	beq.w	80080c8 <_printf_i+0x170>
 8007f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f88:	e03a      	b.n	8008000 <_printf_i+0xa8>
 8007f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f8e:	2b15      	cmp	r3, #21
 8007f90:	d8f6      	bhi.n	8007f80 <_printf_i+0x28>
 8007f92:	a101      	add	r1, pc, #4	; (adr r1, 8007f98 <_printf_i+0x40>)
 8007f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f98:	08007ff1 	.word	0x08007ff1
 8007f9c:	08008005 	.word	0x08008005
 8007fa0:	08007f81 	.word	0x08007f81
 8007fa4:	08007f81 	.word	0x08007f81
 8007fa8:	08007f81 	.word	0x08007f81
 8007fac:	08007f81 	.word	0x08007f81
 8007fb0:	08008005 	.word	0x08008005
 8007fb4:	08007f81 	.word	0x08007f81
 8007fb8:	08007f81 	.word	0x08007f81
 8007fbc:	08007f81 	.word	0x08007f81
 8007fc0:	08007f81 	.word	0x08007f81
 8007fc4:	08008113 	.word	0x08008113
 8007fc8:	08008035 	.word	0x08008035
 8007fcc:	080080f5 	.word	0x080080f5
 8007fd0:	08007f81 	.word	0x08007f81
 8007fd4:	08007f81 	.word	0x08007f81
 8007fd8:	08008135 	.word	0x08008135
 8007fdc:	08007f81 	.word	0x08007f81
 8007fe0:	08008035 	.word	0x08008035
 8007fe4:	08007f81 	.word	0x08007f81
 8007fe8:	08007f81 	.word	0x08007f81
 8007fec:	080080fd 	.word	0x080080fd
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	1d1a      	adds	r2, r3, #4
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	602a      	str	r2, [r5, #0]
 8007ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008000:	2301      	movs	r3, #1
 8008002:	e0a4      	b.n	800814e <_printf_i+0x1f6>
 8008004:	6820      	ldr	r0, [r4, #0]
 8008006:	6829      	ldr	r1, [r5, #0]
 8008008:	0606      	lsls	r6, r0, #24
 800800a:	f101 0304 	add.w	r3, r1, #4
 800800e:	d50a      	bpl.n	8008026 <_printf_i+0xce>
 8008010:	680e      	ldr	r6, [r1, #0]
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	2e00      	cmp	r6, #0
 8008016:	da03      	bge.n	8008020 <_printf_i+0xc8>
 8008018:	232d      	movs	r3, #45	; 0x2d
 800801a:	4276      	negs	r6, r6
 800801c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008020:	230a      	movs	r3, #10
 8008022:	485e      	ldr	r0, [pc, #376]	; (800819c <_printf_i+0x244>)
 8008024:	e019      	b.n	800805a <_printf_i+0x102>
 8008026:	680e      	ldr	r6, [r1, #0]
 8008028:	f010 0f40 	tst.w	r0, #64	; 0x40
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	bf18      	it	ne
 8008030:	b236      	sxthne	r6, r6
 8008032:	e7ef      	b.n	8008014 <_printf_i+0xbc>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	6820      	ldr	r0, [r4, #0]
 8008038:	1d19      	adds	r1, r3, #4
 800803a:	6029      	str	r1, [r5, #0]
 800803c:	0601      	lsls	r1, r0, #24
 800803e:	d501      	bpl.n	8008044 <_printf_i+0xec>
 8008040:	681e      	ldr	r6, [r3, #0]
 8008042:	e002      	b.n	800804a <_printf_i+0xf2>
 8008044:	0646      	lsls	r6, r0, #25
 8008046:	d5fb      	bpl.n	8008040 <_printf_i+0xe8>
 8008048:	881e      	ldrh	r6, [r3, #0]
 800804a:	2f6f      	cmp	r7, #111	; 0x6f
 800804c:	bf0c      	ite	eq
 800804e:	2308      	moveq	r3, #8
 8008050:	230a      	movne	r3, #10
 8008052:	4852      	ldr	r0, [pc, #328]	; (800819c <_printf_i+0x244>)
 8008054:	2100      	movs	r1, #0
 8008056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800805a:	6865      	ldr	r5, [r4, #4]
 800805c:	2d00      	cmp	r5, #0
 800805e:	bfa8      	it	ge
 8008060:	6821      	ldrge	r1, [r4, #0]
 8008062:	60a5      	str	r5, [r4, #8]
 8008064:	bfa4      	itt	ge
 8008066:	f021 0104 	bicge.w	r1, r1, #4
 800806a:	6021      	strge	r1, [r4, #0]
 800806c:	b90e      	cbnz	r6, 8008072 <_printf_i+0x11a>
 800806e:	2d00      	cmp	r5, #0
 8008070:	d04d      	beq.n	800810e <_printf_i+0x1b6>
 8008072:	4615      	mov	r5, r2
 8008074:	fbb6 f1f3 	udiv	r1, r6, r3
 8008078:	fb03 6711 	mls	r7, r3, r1, r6
 800807c:	5dc7      	ldrb	r7, [r0, r7]
 800807e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008082:	4637      	mov	r7, r6
 8008084:	42bb      	cmp	r3, r7
 8008086:	460e      	mov	r6, r1
 8008088:	d9f4      	bls.n	8008074 <_printf_i+0x11c>
 800808a:	2b08      	cmp	r3, #8
 800808c:	d10b      	bne.n	80080a6 <_printf_i+0x14e>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	07de      	lsls	r6, r3, #31
 8008092:	d508      	bpl.n	80080a6 <_printf_i+0x14e>
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	6861      	ldr	r1, [r4, #4]
 8008098:	4299      	cmp	r1, r3
 800809a:	bfde      	ittt	le
 800809c:	2330      	movle	r3, #48	; 0x30
 800809e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080a6:	1b52      	subs	r2, r2, r5
 80080a8:	6122      	str	r2, [r4, #16]
 80080aa:	464b      	mov	r3, r9
 80080ac:	4621      	mov	r1, r4
 80080ae:	4640      	mov	r0, r8
 80080b0:	f8cd a000 	str.w	sl, [sp]
 80080b4:	aa03      	add	r2, sp, #12
 80080b6:	f7ff fedf 	bl	8007e78 <_printf_common>
 80080ba:	3001      	adds	r0, #1
 80080bc:	d14c      	bne.n	8008158 <_printf_i+0x200>
 80080be:	f04f 30ff 	mov.w	r0, #4294967295
 80080c2:	b004      	add	sp, #16
 80080c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c8:	4834      	ldr	r0, [pc, #208]	; (800819c <_printf_i+0x244>)
 80080ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080ce:	6829      	ldr	r1, [r5, #0]
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80080d6:	6029      	str	r1, [r5, #0]
 80080d8:	061d      	lsls	r5, r3, #24
 80080da:	d514      	bpl.n	8008106 <_printf_i+0x1ae>
 80080dc:	07df      	lsls	r7, r3, #31
 80080de:	bf44      	itt	mi
 80080e0:	f043 0320 	orrmi.w	r3, r3, #32
 80080e4:	6023      	strmi	r3, [r4, #0]
 80080e6:	b91e      	cbnz	r6, 80080f0 <_printf_i+0x198>
 80080e8:	6823      	ldr	r3, [r4, #0]
 80080ea:	f023 0320 	bic.w	r3, r3, #32
 80080ee:	6023      	str	r3, [r4, #0]
 80080f0:	2310      	movs	r3, #16
 80080f2:	e7af      	b.n	8008054 <_printf_i+0xfc>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	f043 0320 	orr.w	r3, r3, #32
 80080fa:	6023      	str	r3, [r4, #0]
 80080fc:	2378      	movs	r3, #120	; 0x78
 80080fe:	4828      	ldr	r0, [pc, #160]	; (80081a0 <_printf_i+0x248>)
 8008100:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008104:	e7e3      	b.n	80080ce <_printf_i+0x176>
 8008106:	0659      	lsls	r1, r3, #25
 8008108:	bf48      	it	mi
 800810a:	b2b6      	uxthmi	r6, r6
 800810c:	e7e6      	b.n	80080dc <_printf_i+0x184>
 800810e:	4615      	mov	r5, r2
 8008110:	e7bb      	b.n	800808a <_printf_i+0x132>
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	6826      	ldr	r6, [r4, #0]
 8008116:	1d18      	adds	r0, r3, #4
 8008118:	6961      	ldr	r1, [r4, #20]
 800811a:	6028      	str	r0, [r5, #0]
 800811c:	0635      	lsls	r5, r6, #24
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	d501      	bpl.n	8008126 <_printf_i+0x1ce>
 8008122:	6019      	str	r1, [r3, #0]
 8008124:	e002      	b.n	800812c <_printf_i+0x1d4>
 8008126:	0670      	lsls	r0, r6, #25
 8008128:	d5fb      	bpl.n	8008122 <_printf_i+0x1ca>
 800812a:	8019      	strh	r1, [r3, #0]
 800812c:	2300      	movs	r3, #0
 800812e:	4615      	mov	r5, r2
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	e7ba      	b.n	80080aa <_printf_i+0x152>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	2100      	movs	r1, #0
 8008138:	1d1a      	adds	r2, r3, #4
 800813a:	602a      	str	r2, [r5, #0]
 800813c:	681d      	ldr	r5, [r3, #0]
 800813e:	6862      	ldr	r2, [r4, #4]
 8008140:	4628      	mov	r0, r5
 8008142:	f000 fed7 	bl	8008ef4 <memchr>
 8008146:	b108      	cbz	r0, 800814c <_printf_i+0x1f4>
 8008148:	1b40      	subs	r0, r0, r5
 800814a:	6060      	str	r0, [r4, #4]
 800814c:	6863      	ldr	r3, [r4, #4]
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	2300      	movs	r3, #0
 8008152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008156:	e7a8      	b.n	80080aa <_printf_i+0x152>
 8008158:	462a      	mov	r2, r5
 800815a:	4649      	mov	r1, r9
 800815c:	4640      	mov	r0, r8
 800815e:	6923      	ldr	r3, [r4, #16]
 8008160:	47d0      	blx	sl
 8008162:	3001      	adds	r0, #1
 8008164:	d0ab      	beq.n	80080be <_printf_i+0x166>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	079b      	lsls	r3, r3, #30
 800816a:	d413      	bmi.n	8008194 <_printf_i+0x23c>
 800816c:	68e0      	ldr	r0, [r4, #12]
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	4298      	cmp	r0, r3
 8008172:	bfb8      	it	lt
 8008174:	4618      	movlt	r0, r3
 8008176:	e7a4      	b.n	80080c2 <_printf_i+0x16a>
 8008178:	2301      	movs	r3, #1
 800817a:	4632      	mov	r2, r6
 800817c:	4649      	mov	r1, r9
 800817e:	4640      	mov	r0, r8
 8008180:	47d0      	blx	sl
 8008182:	3001      	adds	r0, #1
 8008184:	d09b      	beq.n	80080be <_printf_i+0x166>
 8008186:	3501      	adds	r5, #1
 8008188:	68e3      	ldr	r3, [r4, #12]
 800818a:	9903      	ldr	r1, [sp, #12]
 800818c:	1a5b      	subs	r3, r3, r1
 800818e:	42ab      	cmp	r3, r5
 8008190:	dcf2      	bgt.n	8008178 <_printf_i+0x220>
 8008192:	e7eb      	b.n	800816c <_printf_i+0x214>
 8008194:	2500      	movs	r5, #0
 8008196:	f104 0619 	add.w	r6, r4, #25
 800819a:	e7f5      	b.n	8008188 <_printf_i+0x230>
 800819c:	0800b4e2 	.word	0x0800b4e2
 80081a0:	0800b4f3 	.word	0x0800b4f3

080081a4 <siprintf>:
 80081a4:	b40e      	push	{r1, r2, r3}
 80081a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081aa:	b500      	push	{lr}
 80081ac:	b09c      	sub	sp, #112	; 0x70
 80081ae:	ab1d      	add	r3, sp, #116	; 0x74
 80081b0:	9002      	str	r0, [sp, #8]
 80081b2:	9006      	str	r0, [sp, #24]
 80081b4:	9107      	str	r1, [sp, #28]
 80081b6:	9104      	str	r1, [sp, #16]
 80081b8:	4808      	ldr	r0, [pc, #32]	; (80081dc <siprintf+0x38>)
 80081ba:	4909      	ldr	r1, [pc, #36]	; (80081e0 <siprintf+0x3c>)
 80081bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c0:	9105      	str	r1, [sp, #20]
 80081c2:	6800      	ldr	r0, [r0, #0]
 80081c4:	a902      	add	r1, sp, #8
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	f001 fb70 	bl	80098ac <_svfiprintf_r>
 80081cc:	2200      	movs	r2, #0
 80081ce:	9b02      	ldr	r3, [sp, #8]
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	b01c      	add	sp, #112	; 0x70
 80081d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081d8:	b003      	add	sp, #12
 80081da:	4770      	bx	lr
 80081dc:	2000000c 	.word	0x2000000c
 80081e0:	ffff0208 	.word	0xffff0208

080081e4 <quorem>:
 80081e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	6903      	ldr	r3, [r0, #16]
 80081ea:	690c      	ldr	r4, [r1, #16]
 80081ec:	4607      	mov	r7, r0
 80081ee:	42a3      	cmp	r3, r4
 80081f0:	f2c0 8082 	blt.w	80082f8 <quorem+0x114>
 80081f4:	3c01      	subs	r4, #1
 80081f6:	f100 0514 	add.w	r5, r0, #20
 80081fa:	f101 0814 	add.w	r8, r1, #20
 80081fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008208:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800820c:	3301      	adds	r3, #1
 800820e:	429a      	cmp	r2, r3
 8008210:	fbb2 f6f3 	udiv	r6, r2, r3
 8008214:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008218:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800821c:	d331      	bcc.n	8008282 <quorem+0x9e>
 800821e:	f04f 0e00 	mov.w	lr, #0
 8008222:	4640      	mov	r0, r8
 8008224:	46ac      	mov	ip, r5
 8008226:	46f2      	mov	sl, lr
 8008228:	f850 2b04 	ldr.w	r2, [r0], #4
 800822c:	b293      	uxth	r3, r2
 800822e:	fb06 e303 	mla	r3, r6, r3, lr
 8008232:	0c12      	lsrs	r2, r2, #16
 8008234:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008238:	b29b      	uxth	r3, r3
 800823a:	fb06 e202 	mla	r2, r6, r2, lr
 800823e:	ebaa 0303 	sub.w	r3, sl, r3
 8008242:	f8dc a000 	ldr.w	sl, [ip]
 8008246:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800824a:	fa1f fa8a 	uxth.w	sl, sl
 800824e:	4453      	add	r3, sl
 8008250:	f8dc a000 	ldr.w	sl, [ip]
 8008254:	b292      	uxth	r2, r2
 8008256:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800825a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800825e:	b29b      	uxth	r3, r3
 8008260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008264:	4581      	cmp	r9, r0
 8008266:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800826a:	f84c 3b04 	str.w	r3, [ip], #4
 800826e:	d2db      	bcs.n	8008228 <quorem+0x44>
 8008270:	f855 300b 	ldr.w	r3, [r5, fp]
 8008274:	b92b      	cbnz	r3, 8008282 <quorem+0x9e>
 8008276:	9b01      	ldr	r3, [sp, #4]
 8008278:	3b04      	subs	r3, #4
 800827a:	429d      	cmp	r5, r3
 800827c:	461a      	mov	r2, r3
 800827e:	d32f      	bcc.n	80082e0 <quorem+0xfc>
 8008280:	613c      	str	r4, [r7, #16]
 8008282:	4638      	mov	r0, r7
 8008284:	f001 f8c2 	bl	800940c <__mcmp>
 8008288:	2800      	cmp	r0, #0
 800828a:	db25      	blt.n	80082d8 <quorem+0xf4>
 800828c:	4628      	mov	r0, r5
 800828e:	f04f 0c00 	mov.w	ip, #0
 8008292:	3601      	adds	r6, #1
 8008294:	f858 1b04 	ldr.w	r1, [r8], #4
 8008298:	f8d0 e000 	ldr.w	lr, [r0]
 800829c:	b28b      	uxth	r3, r1
 800829e:	ebac 0303 	sub.w	r3, ip, r3
 80082a2:	fa1f f28e 	uxth.w	r2, lr
 80082a6:	4413      	add	r3, r2
 80082a8:	0c0a      	lsrs	r2, r1, #16
 80082aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b8:	45c1      	cmp	r9, r8
 80082ba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082be:	f840 3b04 	str.w	r3, [r0], #4
 80082c2:	d2e7      	bcs.n	8008294 <quorem+0xb0>
 80082c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082cc:	b922      	cbnz	r2, 80082d8 <quorem+0xf4>
 80082ce:	3b04      	subs	r3, #4
 80082d0:	429d      	cmp	r5, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	d30a      	bcc.n	80082ec <quorem+0x108>
 80082d6:	613c      	str	r4, [r7, #16]
 80082d8:	4630      	mov	r0, r6
 80082da:	b003      	add	sp, #12
 80082dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	3b04      	subs	r3, #4
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	d1cb      	bne.n	8008280 <quorem+0x9c>
 80082e8:	3c01      	subs	r4, #1
 80082ea:	e7c6      	b.n	800827a <quorem+0x96>
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	3b04      	subs	r3, #4
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	d1f0      	bne.n	80082d6 <quorem+0xf2>
 80082f4:	3c01      	subs	r4, #1
 80082f6:	e7eb      	b.n	80082d0 <quorem+0xec>
 80082f8:	2000      	movs	r0, #0
 80082fa:	e7ee      	b.n	80082da <quorem+0xf6>
 80082fc:	0000      	movs	r0, r0
	...

08008300 <_dtoa_r>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	4616      	mov	r6, r2
 8008306:	461f      	mov	r7, r3
 8008308:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800830a:	b099      	sub	sp, #100	; 0x64
 800830c:	4605      	mov	r5, r0
 800830e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008312:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008316:	b974      	cbnz	r4, 8008336 <_dtoa_r+0x36>
 8008318:	2010      	movs	r0, #16
 800831a:	f000 fde3 	bl	8008ee4 <malloc>
 800831e:	4602      	mov	r2, r0
 8008320:	6268      	str	r0, [r5, #36]	; 0x24
 8008322:	b920      	cbnz	r0, 800832e <_dtoa_r+0x2e>
 8008324:	21ea      	movs	r1, #234	; 0xea
 8008326:	4ba8      	ldr	r3, [pc, #672]	; (80085c8 <_dtoa_r+0x2c8>)
 8008328:	48a8      	ldr	r0, [pc, #672]	; (80085cc <_dtoa_r+0x2cc>)
 800832a:	f001 fbcf 	bl	8009acc <__assert_func>
 800832e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008332:	6004      	str	r4, [r0, #0]
 8008334:	60c4      	str	r4, [r0, #12]
 8008336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008338:	6819      	ldr	r1, [r3, #0]
 800833a:	b151      	cbz	r1, 8008352 <_dtoa_r+0x52>
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	2301      	movs	r3, #1
 8008340:	4093      	lsls	r3, r2
 8008342:	604a      	str	r2, [r1, #4]
 8008344:	608b      	str	r3, [r1, #8]
 8008346:	4628      	mov	r0, r5
 8008348:	f000 fe22 	bl	8008f90 <_Bfree>
 800834c:	2200      	movs	r2, #0
 800834e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	1e3b      	subs	r3, r7, #0
 8008354:	bfaf      	iteee	ge
 8008356:	2300      	movge	r3, #0
 8008358:	2201      	movlt	r2, #1
 800835a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800835e:	9305      	strlt	r3, [sp, #20]
 8008360:	bfa8      	it	ge
 8008362:	f8c8 3000 	strge.w	r3, [r8]
 8008366:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800836a:	4b99      	ldr	r3, [pc, #612]	; (80085d0 <_dtoa_r+0x2d0>)
 800836c:	bfb8      	it	lt
 800836e:	f8c8 2000 	strlt.w	r2, [r8]
 8008372:	ea33 0309 	bics.w	r3, r3, r9
 8008376:	d119      	bne.n	80083ac <_dtoa_r+0xac>
 8008378:	f242 730f 	movw	r3, #9999	; 0x270f
 800837c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008384:	4333      	orrs	r3, r6
 8008386:	f000 857f 	beq.w	8008e88 <_dtoa_r+0xb88>
 800838a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800838c:	b953      	cbnz	r3, 80083a4 <_dtoa_r+0xa4>
 800838e:	4b91      	ldr	r3, [pc, #580]	; (80085d4 <_dtoa_r+0x2d4>)
 8008390:	e022      	b.n	80083d8 <_dtoa_r+0xd8>
 8008392:	4b91      	ldr	r3, [pc, #580]	; (80085d8 <_dtoa_r+0x2d8>)
 8008394:	9303      	str	r3, [sp, #12]
 8008396:	3308      	adds	r3, #8
 8008398:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	9803      	ldr	r0, [sp, #12]
 800839e:	b019      	add	sp, #100	; 0x64
 80083a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a4:	4b8b      	ldr	r3, [pc, #556]	; (80085d4 <_dtoa_r+0x2d4>)
 80083a6:	9303      	str	r3, [sp, #12]
 80083a8:	3303      	adds	r3, #3
 80083aa:	e7f5      	b.n	8008398 <_dtoa_r+0x98>
 80083ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80083b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80083b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083b8:	2200      	movs	r2, #0
 80083ba:	2300      	movs	r3, #0
 80083bc:	f7f8 faf4 	bl	80009a8 <__aeabi_dcmpeq>
 80083c0:	4680      	mov	r8, r0
 80083c2:	b158      	cbz	r0, 80083dc <_dtoa_r+0xdc>
 80083c4:	2301      	movs	r3, #1
 80083c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 8558 	beq.w	8008e82 <_dtoa_r+0xb82>
 80083d2:	4882      	ldr	r0, [pc, #520]	; (80085dc <_dtoa_r+0x2dc>)
 80083d4:	6018      	str	r0, [r3, #0]
 80083d6:	1e43      	subs	r3, r0, #1
 80083d8:	9303      	str	r3, [sp, #12]
 80083da:	e7df      	b.n	800839c <_dtoa_r+0x9c>
 80083dc:	ab16      	add	r3, sp, #88	; 0x58
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	ab17      	add	r3, sp, #92	; 0x5c
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	4628      	mov	r0, r5
 80083e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083ea:	f001 f8b7 	bl	800955c <__d2b>
 80083ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80083f2:	4683      	mov	fp, r0
 80083f4:	2c00      	cmp	r4, #0
 80083f6:	d07f      	beq.n	80084f8 <_dtoa_r+0x1f8>
 80083f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008406:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800840a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800840e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008412:	2200      	movs	r2, #0
 8008414:	4b72      	ldr	r3, [pc, #456]	; (80085e0 <_dtoa_r+0x2e0>)
 8008416:	f7f7 fea7 	bl	8000168 <__aeabi_dsub>
 800841a:	a365      	add	r3, pc, #404	; (adr r3, 80085b0 <_dtoa_r+0x2b0>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	f7f8 f85a 	bl	80004d8 <__aeabi_dmul>
 8008424:	a364      	add	r3, pc, #400	; (adr r3, 80085b8 <_dtoa_r+0x2b8>)
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	f7f7 fe9f 	bl	800016c <__adddf3>
 800842e:	4606      	mov	r6, r0
 8008430:	4620      	mov	r0, r4
 8008432:	460f      	mov	r7, r1
 8008434:	f7f7 ffe6 	bl	8000404 <__aeabi_i2d>
 8008438:	a361      	add	r3, pc, #388	; (adr r3, 80085c0 <_dtoa_r+0x2c0>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f7f8 f84b 	bl	80004d8 <__aeabi_dmul>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4630      	mov	r0, r6
 8008448:	4639      	mov	r1, r7
 800844a:	f7f7 fe8f 	bl	800016c <__adddf3>
 800844e:	4606      	mov	r6, r0
 8008450:	460f      	mov	r7, r1
 8008452:	f7f8 faf1 	bl	8000a38 <__aeabi_d2iz>
 8008456:	2200      	movs	r2, #0
 8008458:	4682      	mov	sl, r0
 800845a:	2300      	movs	r3, #0
 800845c:	4630      	mov	r0, r6
 800845e:	4639      	mov	r1, r7
 8008460:	f7f8 faac 	bl	80009bc <__aeabi_dcmplt>
 8008464:	b148      	cbz	r0, 800847a <_dtoa_r+0x17a>
 8008466:	4650      	mov	r0, sl
 8008468:	f7f7 ffcc 	bl	8000404 <__aeabi_i2d>
 800846c:	4632      	mov	r2, r6
 800846e:	463b      	mov	r3, r7
 8008470:	f7f8 fa9a 	bl	80009a8 <__aeabi_dcmpeq>
 8008474:	b908      	cbnz	r0, 800847a <_dtoa_r+0x17a>
 8008476:	f10a 3aff 	add.w	sl, sl, #4294967295
 800847a:	f1ba 0f16 	cmp.w	sl, #22
 800847e:	d858      	bhi.n	8008532 <_dtoa_r+0x232>
 8008480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008484:	4b57      	ldr	r3, [pc, #348]	; (80085e4 <_dtoa_r+0x2e4>)
 8008486:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f8 fa95 	bl	80009bc <__aeabi_dcmplt>
 8008492:	2800      	cmp	r0, #0
 8008494:	d04f      	beq.n	8008536 <_dtoa_r+0x236>
 8008496:	2300      	movs	r3, #0
 8008498:	f10a 3aff 	add.w	sl, sl, #4294967295
 800849c:	930f      	str	r3, [sp, #60]	; 0x3c
 800849e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80084a0:	1b1c      	subs	r4, r3, r4
 80084a2:	1e63      	subs	r3, r4, #1
 80084a4:	9309      	str	r3, [sp, #36]	; 0x24
 80084a6:	bf49      	itett	mi
 80084a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80084ac:	2300      	movpl	r3, #0
 80084ae:	9306      	strmi	r3, [sp, #24]
 80084b0:	2300      	movmi	r3, #0
 80084b2:	bf54      	ite	pl
 80084b4:	9306      	strpl	r3, [sp, #24]
 80084b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80084b8:	f1ba 0f00 	cmp.w	sl, #0
 80084bc:	db3d      	blt.n	800853a <_dtoa_r+0x23a>
 80084be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80084c4:	4453      	add	r3, sl
 80084c6:	9309      	str	r3, [sp, #36]	; 0x24
 80084c8:	2300      	movs	r3, #0
 80084ca:	930a      	str	r3, [sp, #40]	; 0x28
 80084cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	f200 808c 	bhi.w	80085ec <_dtoa_r+0x2ec>
 80084d4:	2b05      	cmp	r3, #5
 80084d6:	bfc4      	itt	gt
 80084d8:	3b04      	subgt	r3, #4
 80084da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80084dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084de:	bfc8      	it	gt
 80084e0:	2400      	movgt	r4, #0
 80084e2:	f1a3 0302 	sub.w	r3, r3, #2
 80084e6:	bfd8      	it	le
 80084e8:	2401      	movle	r4, #1
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	f200 808a 	bhi.w	8008604 <_dtoa_r+0x304>
 80084f0:	e8df f003 	tbb	[pc, r3]
 80084f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80084f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80084fc:	441c      	add	r4, r3
 80084fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008502:	2b20      	cmp	r3, #32
 8008504:	bfc3      	ittte	gt
 8008506:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800850a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800850e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008512:	f1c3 0320 	rsble	r3, r3, #32
 8008516:	bfc6      	itte	gt
 8008518:	fa26 f000 	lsrgt.w	r0, r6, r0
 800851c:	4318      	orrgt	r0, r3
 800851e:	fa06 f003 	lslle.w	r0, r6, r3
 8008522:	f7f7 ff5f 	bl	80003e4 <__aeabi_ui2d>
 8008526:	2301      	movs	r3, #1
 8008528:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800852c:	3c01      	subs	r4, #1
 800852e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008530:	e76f      	b.n	8008412 <_dtoa_r+0x112>
 8008532:	2301      	movs	r3, #1
 8008534:	e7b2      	b.n	800849c <_dtoa_r+0x19c>
 8008536:	900f      	str	r0, [sp, #60]	; 0x3c
 8008538:	e7b1      	b.n	800849e <_dtoa_r+0x19e>
 800853a:	9b06      	ldr	r3, [sp, #24]
 800853c:	eba3 030a 	sub.w	r3, r3, sl
 8008540:	9306      	str	r3, [sp, #24]
 8008542:	f1ca 0300 	rsb	r3, sl, #0
 8008546:	930a      	str	r3, [sp, #40]	; 0x28
 8008548:	2300      	movs	r3, #0
 800854a:	930e      	str	r3, [sp, #56]	; 0x38
 800854c:	e7be      	b.n	80084cc <_dtoa_r+0x1cc>
 800854e:	2300      	movs	r3, #0
 8008550:	930b      	str	r3, [sp, #44]	; 0x2c
 8008552:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008554:	2b00      	cmp	r3, #0
 8008556:	dc58      	bgt.n	800860a <_dtoa_r+0x30a>
 8008558:	f04f 0901 	mov.w	r9, #1
 800855c:	464b      	mov	r3, r9
 800855e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008562:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008566:	2200      	movs	r2, #0
 8008568:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800856a:	6042      	str	r2, [r0, #4]
 800856c:	2204      	movs	r2, #4
 800856e:	f102 0614 	add.w	r6, r2, #20
 8008572:	429e      	cmp	r6, r3
 8008574:	6841      	ldr	r1, [r0, #4]
 8008576:	d94e      	bls.n	8008616 <_dtoa_r+0x316>
 8008578:	4628      	mov	r0, r5
 800857a:	f000 fcc9 	bl	8008f10 <_Balloc>
 800857e:	9003      	str	r0, [sp, #12]
 8008580:	2800      	cmp	r0, #0
 8008582:	d14c      	bne.n	800861e <_dtoa_r+0x31e>
 8008584:	4602      	mov	r2, r0
 8008586:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800858a:	4b17      	ldr	r3, [pc, #92]	; (80085e8 <_dtoa_r+0x2e8>)
 800858c:	e6cc      	b.n	8008328 <_dtoa_r+0x28>
 800858e:	2301      	movs	r3, #1
 8008590:	e7de      	b.n	8008550 <_dtoa_r+0x250>
 8008592:	2300      	movs	r3, #0
 8008594:	930b      	str	r3, [sp, #44]	; 0x2c
 8008596:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008598:	eb0a 0903 	add.w	r9, sl, r3
 800859c:	f109 0301 	add.w	r3, r9, #1
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	9308      	str	r3, [sp, #32]
 80085a4:	bfb8      	it	lt
 80085a6:	2301      	movlt	r3, #1
 80085a8:	e7dd      	b.n	8008566 <_dtoa_r+0x266>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e7f2      	b.n	8008594 <_dtoa_r+0x294>
 80085ae:	bf00      	nop
 80085b0:	636f4361 	.word	0x636f4361
 80085b4:	3fd287a7 	.word	0x3fd287a7
 80085b8:	8b60c8b3 	.word	0x8b60c8b3
 80085bc:	3fc68a28 	.word	0x3fc68a28
 80085c0:	509f79fb 	.word	0x509f79fb
 80085c4:	3fd34413 	.word	0x3fd34413
 80085c8:	0800b511 	.word	0x0800b511
 80085cc:	0800b528 	.word	0x0800b528
 80085d0:	7ff00000 	.word	0x7ff00000
 80085d4:	0800b50d 	.word	0x0800b50d
 80085d8:	0800b504 	.word	0x0800b504
 80085dc:	0800b4e1 	.word	0x0800b4e1
 80085e0:	3ff80000 	.word	0x3ff80000
 80085e4:	0800b618 	.word	0x0800b618
 80085e8:	0800b583 	.word	0x0800b583
 80085ec:	2401      	movs	r4, #1
 80085ee:	2300      	movs	r3, #0
 80085f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80085f2:	9322      	str	r3, [sp, #136]	; 0x88
 80085f4:	f04f 39ff 	mov.w	r9, #4294967295
 80085f8:	2200      	movs	r2, #0
 80085fa:	2312      	movs	r3, #18
 80085fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8008600:	9223      	str	r2, [sp, #140]	; 0x8c
 8008602:	e7b0      	b.n	8008566 <_dtoa_r+0x266>
 8008604:	2301      	movs	r3, #1
 8008606:	930b      	str	r3, [sp, #44]	; 0x2c
 8008608:	e7f4      	b.n	80085f4 <_dtoa_r+0x2f4>
 800860a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800860e:	464b      	mov	r3, r9
 8008610:	f8cd 9020 	str.w	r9, [sp, #32]
 8008614:	e7a7      	b.n	8008566 <_dtoa_r+0x266>
 8008616:	3101      	adds	r1, #1
 8008618:	6041      	str	r1, [r0, #4]
 800861a:	0052      	lsls	r2, r2, #1
 800861c:	e7a7      	b.n	800856e <_dtoa_r+0x26e>
 800861e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008620:	9a03      	ldr	r2, [sp, #12]
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	9b08      	ldr	r3, [sp, #32]
 8008626:	2b0e      	cmp	r3, #14
 8008628:	f200 80a8 	bhi.w	800877c <_dtoa_r+0x47c>
 800862c:	2c00      	cmp	r4, #0
 800862e:	f000 80a5 	beq.w	800877c <_dtoa_r+0x47c>
 8008632:	f1ba 0f00 	cmp.w	sl, #0
 8008636:	dd34      	ble.n	80086a2 <_dtoa_r+0x3a2>
 8008638:	4a9a      	ldr	r2, [pc, #616]	; (80088a4 <_dtoa_r+0x5a4>)
 800863a:	f00a 030f 	and.w	r3, sl, #15
 800863e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008642:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800864a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800864e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008652:	d016      	beq.n	8008682 <_dtoa_r+0x382>
 8008654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008658:	4b93      	ldr	r3, [pc, #588]	; (80088a8 <_dtoa_r+0x5a8>)
 800865a:	2703      	movs	r7, #3
 800865c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008660:	f7f8 f864 	bl	800072c <__aeabi_ddiv>
 8008664:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008668:	f004 040f 	and.w	r4, r4, #15
 800866c:	4e8e      	ldr	r6, [pc, #568]	; (80088a8 <_dtoa_r+0x5a8>)
 800866e:	b954      	cbnz	r4, 8008686 <_dtoa_r+0x386>
 8008670:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008678:	f7f8 f858 	bl	800072c <__aeabi_ddiv>
 800867c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008680:	e029      	b.n	80086d6 <_dtoa_r+0x3d6>
 8008682:	2702      	movs	r7, #2
 8008684:	e7f2      	b.n	800866c <_dtoa_r+0x36c>
 8008686:	07e1      	lsls	r1, r4, #31
 8008688:	d508      	bpl.n	800869c <_dtoa_r+0x39c>
 800868a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800868e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008692:	f7f7 ff21 	bl	80004d8 <__aeabi_dmul>
 8008696:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800869a:	3701      	adds	r7, #1
 800869c:	1064      	asrs	r4, r4, #1
 800869e:	3608      	adds	r6, #8
 80086a0:	e7e5      	b.n	800866e <_dtoa_r+0x36e>
 80086a2:	f000 80a5 	beq.w	80087f0 <_dtoa_r+0x4f0>
 80086a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086aa:	f1ca 0400 	rsb	r4, sl, #0
 80086ae:	4b7d      	ldr	r3, [pc, #500]	; (80088a4 <_dtoa_r+0x5a4>)
 80086b0:	f004 020f 	and.w	r2, r4, #15
 80086b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	f7f7 ff0c 	bl	80004d8 <__aeabi_dmul>
 80086c0:	2702      	movs	r7, #2
 80086c2:	2300      	movs	r3, #0
 80086c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086c8:	4e77      	ldr	r6, [pc, #476]	; (80088a8 <_dtoa_r+0x5a8>)
 80086ca:	1124      	asrs	r4, r4, #4
 80086cc:	2c00      	cmp	r4, #0
 80086ce:	f040 8084 	bne.w	80087da <_dtoa_r+0x4da>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1d2      	bne.n	800867c <_dtoa_r+0x37c>
 80086d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 808b 	beq.w	80087f4 <_dtoa_r+0x4f4>
 80086de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80086e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80086e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086ea:	2200      	movs	r2, #0
 80086ec:	4b6f      	ldr	r3, [pc, #444]	; (80088ac <_dtoa_r+0x5ac>)
 80086ee:	f7f8 f965 	bl	80009bc <__aeabi_dcmplt>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d07e      	beq.n	80087f4 <_dtoa_r+0x4f4>
 80086f6:	9b08      	ldr	r3, [sp, #32]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d07b      	beq.n	80087f4 <_dtoa_r+0x4f4>
 80086fc:	f1b9 0f00 	cmp.w	r9, #0
 8008700:	dd38      	ble.n	8008774 <_dtoa_r+0x474>
 8008702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008706:	2200      	movs	r2, #0
 8008708:	4b69      	ldr	r3, [pc, #420]	; (80088b0 <_dtoa_r+0x5b0>)
 800870a:	f7f7 fee5 	bl	80004d8 <__aeabi_dmul>
 800870e:	464c      	mov	r4, r9
 8008710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008714:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008718:	3701      	adds	r7, #1
 800871a:	4638      	mov	r0, r7
 800871c:	f7f7 fe72 	bl	8000404 <__aeabi_i2d>
 8008720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008724:	f7f7 fed8 	bl	80004d8 <__aeabi_dmul>
 8008728:	2200      	movs	r2, #0
 800872a:	4b62      	ldr	r3, [pc, #392]	; (80088b4 <_dtoa_r+0x5b4>)
 800872c:	f7f7 fd1e 	bl	800016c <__adddf3>
 8008730:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008734:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008738:	9611      	str	r6, [sp, #68]	; 0x44
 800873a:	2c00      	cmp	r4, #0
 800873c:	d15d      	bne.n	80087fa <_dtoa_r+0x4fa>
 800873e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008742:	2200      	movs	r2, #0
 8008744:	4b5c      	ldr	r3, [pc, #368]	; (80088b8 <_dtoa_r+0x5b8>)
 8008746:	f7f7 fd0f 	bl	8000168 <__aeabi_dsub>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008752:	4633      	mov	r3, r6
 8008754:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008756:	f7f8 f94f 	bl	80009f8 <__aeabi_dcmpgt>
 800875a:	2800      	cmp	r0, #0
 800875c:	f040 829c 	bne.w	8008c98 <_dtoa_r+0x998>
 8008760:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008764:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008766:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800876a:	f7f8 f927 	bl	80009bc <__aeabi_dcmplt>
 800876e:	2800      	cmp	r0, #0
 8008770:	f040 8290 	bne.w	8008c94 <_dtoa_r+0x994>
 8008774:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008778:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800877c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800877e:	2b00      	cmp	r3, #0
 8008780:	f2c0 8152 	blt.w	8008a28 <_dtoa_r+0x728>
 8008784:	f1ba 0f0e 	cmp.w	sl, #14
 8008788:	f300 814e 	bgt.w	8008a28 <_dtoa_r+0x728>
 800878c:	4b45      	ldr	r3, [pc, #276]	; (80088a4 <_dtoa_r+0x5a4>)
 800878e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008792:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008796:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800879a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800879c:	2b00      	cmp	r3, #0
 800879e:	f280 80db 	bge.w	8008958 <_dtoa_r+0x658>
 80087a2:	9b08      	ldr	r3, [sp, #32]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f300 80d7 	bgt.w	8008958 <_dtoa_r+0x658>
 80087aa:	f040 8272 	bne.w	8008c92 <_dtoa_r+0x992>
 80087ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087b2:	2200      	movs	r2, #0
 80087b4:	4b40      	ldr	r3, [pc, #256]	; (80088b8 <_dtoa_r+0x5b8>)
 80087b6:	f7f7 fe8f 	bl	80004d8 <__aeabi_dmul>
 80087ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087be:	f7f8 f911 	bl	80009e4 <__aeabi_dcmpge>
 80087c2:	9c08      	ldr	r4, [sp, #32]
 80087c4:	4626      	mov	r6, r4
 80087c6:	2800      	cmp	r0, #0
 80087c8:	f040 8248 	bne.w	8008c5c <_dtoa_r+0x95c>
 80087cc:	2331      	movs	r3, #49	; 0x31
 80087ce:	9f03      	ldr	r7, [sp, #12]
 80087d0:	f10a 0a01 	add.w	sl, sl, #1
 80087d4:	f807 3b01 	strb.w	r3, [r7], #1
 80087d8:	e244      	b.n	8008c64 <_dtoa_r+0x964>
 80087da:	07e2      	lsls	r2, r4, #31
 80087dc:	d505      	bpl.n	80087ea <_dtoa_r+0x4ea>
 80087de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087e2:	f7f7 fe79 	bl	80004d8 <__aeabi_dmul>
 80087e6:	2301      	movs	r3, #1
 80087e8:	3701      	adds	r7, #1
 80087ea:	1064      	asrs	r4, r4, #1
 80087ec:	3608      	adds	r6, #8
 80087ee:	e76d      	b.n	80086cc <_dtoa_r+0x3cc>
 80087f0:	2702      	movs	r7, #2
 80087f2:	e770      	b.n	80086d6 <_dtoa_r+0x3d6>
 80087f4:	46d0      	mov	r8, sl
 80087f6:	9c08      	ldr	r4, [sp, #32]
 80087f8:	e78f      	b.n	800871a <_dtoa_r+0x41a>
 80087fa:	9903      	ldr	r1, [sp, #12]
 80087fc:	4b29      	ldr	r3, [pc, #164]	; (80088a4 <_dtoa_r+0x5a4>)
 80087fe:	4421      	add	r1, r4
 8008800:	9112      	str	r1, [sp, #72]	; 0x48
 8008802:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008804:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008808:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800880c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008810:	2900      	cmp	r1, #0
 8008812:	d055      	beq.n	80088c0 <_dtoa_r+0x5c0>
 8008814:	2000      	movs	r0, #0
 8008816:	4929      	ldr	r1, [pc, #164]	; (80088bc <_dtoa_r+0x5bc>)
 8008818:	f7f7 ff88 	bl	800072c <__aeabi_ddiv>
 800881c:	463b      	mov	r3, r7
 800881e:	4632      	mov	r2, r6
 8008820:	f7f7 fca2 	bl	8000168 <__aeabi_dsub>
 8008824:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008828:	9f03      	ldr	r7, [sp, #12]
 800882a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800882e:	f7f8 f903 	bl	8000a38 <__aeabi_d2iz>
 8008832:	4604      	mov	r4, r0
 8008834:	f7f7 fde6 	bl	8000404 <__aeabi_i2d>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008840:	f7f7 fc92 	bl	8000168 <__aeabi_dsub>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	3430      	adds	r4, #48	; 0x30
 800884a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800884e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008852:	f807 4b01 	strb.w	r4, [r7], #1
 8008856:	f7f8 f8b1 	bl	80009bc <__aeabi_dcmplt>
 800885a:	2800      	cmp	r0, #0
 800885c:	d174      	bne.n	8008948 <_dtoa_r+0x648>
 800885e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008862:	2000      	movs	r0, #0
 8008864:	4911      	ldr	r1, [pc, #68]	; (80088ac <_dtoa_r+0x5ac>)
 8008866:	f7f7 fc7f 	bl	8000168 <__aeabi_dsub>
 800886a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800886e:	f7f8 f8a5 	bl	80009bc <__aeabi_dcmplt>
 8008872:	2800      	cmp	r0, #0
 8008874:	f040 80b7 	bne.w	80089e6 <_dtoa_r+0x6e6>
 8008878:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800887a:	429f      	cmp	r7, r3
 800887c:	f43f af7a 	beq.w	8008774 <_dtoa_r+0x474>
 8008880:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008884:	2200      	movs	r2, #0
 8008886:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <_dtoa_r+0x5b0>)
 8008888:	f7f7 fe26 	bl	80004d8 <__aeabi_dmul>
 800888c:	2200      	movs	r2, #0
 800888e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008896:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <_dtoa_r+0x5b0>)
 8008898:	f7f7 fe1e 	bl	80004d8 <__aeabi_dmul>
 800889c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088a0:	e7c3      	b.n	800882a <_dtoa_r+0x52a>
 80088a2:	bf00      	nop
 80088a4:	0800b618 	.word	0x0800b618
 80088a8:	0800b5f0 	.word	0x0800b5f0
 80088ac:	3ff00000 	.word	0x3ff00000
 80088b0:	40240000 	.word	0x40240000
 80088b4:	401c0000 	.word	0x401c0000
 80088b8:	40140000 	.word	0x40140000
 80088bc:	3fe00000 	.word	0x3fe00000
 80088c0:	4630      	mov	r0, r6
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f7 fe08 	bl	80004d8 <__aeabi_dmul>
 80088c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088ce:	9c03      	ldr	r4, [sp, #12]
 80088d0:	9314      	str	r3, [sp, #80]	; 0x50
 80088d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088d6:	f7f8 f8af 	bl	8000a38 <__aeabi_d2iz>
 80088da:	9015      	str	r0, [sp, #84]	; 0x54
 80088dc:	f7f7 fd92 	bl	8000404 <__aeabi_i2d>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088e8:	f7f7 fc3e 	bl	8000168 <__aeabi_dsub>
 80088ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088ee:	4606      	mov	r6, r0
 80088f0:	3330      	adds	r3, #48	; 0x30
 80088f2:	f804 3b01 	strb.w	r3, [r4], #1
 80088f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088f8:	460f      	mov	r7, r1
 80088fa:	429c      	cmp	r4, r3
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	d124      	bne.n	800894c <_dtoa_r+0x64c>
 8008902:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008906:	4bb0      	ldr	r3, [pc, #704]	; (8008bc8 <_dtoa_r+0x8c8>)
 8008908:	f7f7 fc30 	bl	800016c <__adddf3>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4630      	mov	r0, r6
 8008912:	4639      	mov	r1, r7
 8008914:	f7f8 f870 	bl	80009f8 <__aeabi_dcmpgt>
 8008918:	2800      	cmp	r0, #0
 800891a:	d163      	bne.n	80089e4 <_dtoa_r+0x6e4>
 800891c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008920:	2000      	movs	r0, #0
 8008922:	49a9      	ldr	r1, [pc, #676]	; (8008bc8 <_dtoa_r+0x8c8>)
 8008924:	f7f7 fc20 	bl	8000168 <__aeabi_dsub>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4630      	mov	r0, r6
 800892e:	4639      	mov	r1, r7
 8008930:	f7f8 f844 	bl	80009bc <__aeabi_dcmplt>
 8008934:	2800      	cmp	r0, #0
 8008936:	f43f af1d 	beq.w	8008774 <_dtoa_r+0x474>
 800893a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800893c:	1e7b      	subs	r3, r7, #1
 800893e:	9314      	str	r3, [sp, #80]	; 0x50
 8008940:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008944:	2b30      	cmp	r3, #48	; 0x30
 8008946:	d0f8      	beq.n	800893a <_dtoa_r+0x63a>
 8008948:	46c2      	mov	sl, r8
 800894a:	e03b      	b.n	80089c4 <_dtoa_r+0x6c4>
 800894c:	4b9f      	ldr	r3, [pc, #636]	; (8008bcc <_dtoa_r+0x8cc>)
 800894e:	f7f7 fdc3 	bl	80004d8 <__aeabi_dmul>
 8008952:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008956:	e7bc      	b.n	80088d2 <_dtoa_r+0x5d2>
 8008958:	9f03      	ldr	r7, [sp, #12]
 800895a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800895e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008962:	4640      	mov	r0, r8
 8008964:	4649      	mov	r1, r9
 8008966:	f7f7 fee1 	bl	800072c <__aeabi_ddiv>
 800896a:	f7f8 f865 	bl	8000a38 <__aeabi_d2iz>
 800896e:	4604      	mov	r4, r0
 8008970:	f7f7 fd48 	bl	8000404 <__aeabi_i2d>
 8008974:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008978:	f7f7 fdae 	bl	80004d8 <__aeabi_dmul>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	4640      	mov	r0, r8
 8008982:	4649      	mov	r1, r9
 8008984:	f7f7 fbf0 	bl	8000168 <__aeabi_dsub>
 8008988:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800898c:	f807 6b01 	strb.w	r6, [r7], #1
 8008990:	9e03      	ldr	r6, [sp, #12]
 8008992:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008996:	1bbe      	subs	r6, r7, r6
 8008998:	45b4      	cmp	ip, r6
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	d136      	bne.n	8008a0e <_dtoa_r+0x70e>
 80089a0:	f7f7 fbe4 	bl	800016c <__adddf3>
 80089a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089a8:	4680      	mov	r8, r0
 80089aa:	4689      	mov	r9, r1
 80089ac:	f7f8 f824 	bl	80009f8 <__aeabi_dcmpgt>
 80089b0:	bb58      	cbnz	r0, 8008a0a <_dtoa_r+0x70a>
 80089b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089b6:	4640      	mov	r0, r8
 80089b8:	4649      	mov	r1, r9
 80089ba:	f7f7 fff5 	bl	80009a8 <__aeabi_dcmpeq>
 80089be:	b108      	cbz	r0, 80089c4 <_dtoa_r+0x6c4>
 80089c0:	07e1      	lsls	r1, r4, #31
 80089c2:	d422      	bmi.n	8008a0a <_dtoa_r+0x70a>
 80089c4:	4628      	mov	r0, r5
 80089c6:	4659      	mov	r1, fp
 80089c8:	f000 fae2 	bl	8008f90 <_Bfree>
 80089cc:	2300      	movs	r3, #0
 80089ce:	703b      	strb	r3, [r7, #0]
 80089d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80089d2:	f10a 0001 	add.w	r0, sl, #1
 80089d6:	6018      	str	r0, [r3, #0]
 80089d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f43f acde 	beq.w	800839c <_dtoa_r+0x9c>
 80089e0:	601f      	str	r7, [r3, #0]
 80089e2:	e4db      	b.n	800839c <_dtoa_r+0x9c>
 80089e4:	4627      	mov	r7, r4
 80089e6:	463b      	mov	r3, r7
 80089e8:	461f      	mov	r7, r3
 80089ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089ee:	2a39      	cmp	r2, #57	; 0x39
 80089f0:	d107      	bne.n	8008a02 <_dtoa_r+0x702>
 80089f2:	9a03      	ldr	r2, [sp, #12]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d1f7      	bne.n	80089e8 <_dtoa_r+0x6e8>
 80089f8:	2230      	movs	r2, #48	; 0x30
 80089fa:	9903      	ldr	r1, [sp, #12]
 80089fc:	f108 0801 	add.w	r8, r8, #1
 8008a00:	700a      	strb	r2, [r1, #0]
 8008a02:	781a      	ldrb	r2, [r3, #0]
 8008a04:	3201      	adds	r2, #1
 8008a06:	701a      	strb	r2, [r3, #0]
 8008a08:	e79e      	b.n	8008948 <_dtoa_r+0x648>
 8008a0a:	46d0      	mov	r8, sl
 8008a0c:	e7eb      	b.n	80089e6 <_dtoa_r+0x6e6>
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4b6e      	ldr	r3, [pc, #440]	; (8008bcc <_dtoa_r+0x8cc>)
 8008a12:	f7f7 fd61 	bl	80004d8 <__aeabi_dmul>
 8008a16:	2200      	movs	r2, #0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	4689      	mov	r9, r1
 8008a1e:	f7f7 ffc3 	bl	80009a8 <__aeabi_dcmpeq>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d09b      	beq.n	800895e <_dtoa_r+0x65e>
 8008a26:	e7cd      	b.n	80089c4 <_dtoa_r+0x6c4>
 8008a28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	f000 80d0 	beq.w	8008bd0 <_dtoa_r+0x8d0>
 8008a30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a32:	2a01      	cmp	r2, #1
 8008a34:	f300 80ae 	bgt.w	8008b94 <_dtoa_r+0x894>
 8008a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	f000 80a6 	beq.w	8008b8c <_dtoa_r+0x88c>
 8008a40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a46:	9f06      	ldr	r7, [sp, #24]
 8008a48:	9a06      	ldr	r2, [sp, #24]
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	441a      	add	r2, r3
 8008a4e:	9206      	str	r2, [sp, #24]
 8008a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a52:	4628      	mov	r0, r5
 8008a54:	441a      	add	r2, r3
 8008a56:	9209      	str	r2, [sp, #36]	; 0x24
 8008a58:	f000 fb50 	bl	80090fc <__i2b>
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	2f00      	cmp	r7, #0
 8008a60:	dd0c      	ble.n	8008a7c <_dtoa_r+0x77c>
 8008a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dd09      	ble.n	8008a7c <_dtoa_r+0x77c>
 8008a68:	42bb      	cmp	r3, r7
 8008a6a:	bfa8      	it	ge
 8008a6c:	463b      	movge	r3, r7
 8008a6e:	9a06      	ldr	r2, [sp, #24]
 8008a70:	1aff      	subs	r7, r7, r3
 8008a72:	1ad2      	subs	r2, r2, r3
 8008a74:	9206      	str	r2, [sp, #24]
 8008a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7e:	b1f3      	cbz	r3, 8008abe <_dtoa_r+0x7be>
 8008a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 80a8 	beq.w	8008bd8 <_dtoa_r+0x8d8>
 8008a88:	2c00      	cmp	r4, #0
 8008a8a:	dd10      	ble.n	8008aae <_dtoa_r+0x7ae>
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4622      	mov	r2, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	f000 fbf1 	bl	8009278 <__pow5mult>
 8008a96:	465a      	mov	r2, fp
 8008a98:	4601      	mov	r1, r0
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f000 fb43 	bl	8009128 <__multiply>
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	4659      	mov	r1, fp
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 fa72 	bl	8008f90 <_Bfree>
 8008aac:	46c3      	mov	fp, r8
 8008aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab0:	1b1a      	subs	r2, r3, r4
 8008ab2:	d004      	beq.n	8008abe <_dtoa_r+0x7be>
 8008ab4:	4659      	mov	r1, fp
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f000 fbde 	bl	8009278 <__pow5mult>
 8008abc:	4683      	mov	fp, r0
 8008abe:	2101      	movs	r1, #1
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	f000 fb1b 	bl	80090fc <__i2b>
 8008ac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac8:	4604      	mov	r4, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f340 8086 	ble.w	8008bdc <_dtoa_r+0x8dc>
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	f000 fbcf 	bl	8009278 <__pow5mult>
 8008ada:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008adc:	4604      	mov	r4, r0
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	dd7f      	ble.n	8008be2 <_dtoa_r+0x8e2>
 8008ae2:	f04f 0800 	mov.w	r8, #0
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008aec:	6918      	ldr	r0, [r3, #16]
 8008aee:	f000 fab7 	bl	8009060 <__hi0bits>
 8008af2:	f1c0 0020 	rsb	r0, r0, #32
 8008af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af8:	4418      	add	r0, r3
 8008afa:	f010 001f 	ands.w	r0, r0, #31
 8008afe:	f000 8092 	beq.w	8008c26 <_dtoa_r+0x926>
 8008b02:	f1c0 0320 	rsb	r3, r0, #32
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	f340 808a 	ble.w	8008c20 <_dtoa_r+0x920>
 8008b0c:	f1c0 001c 	rsb	r0, r0, #28
 8008b10:	9b06      	ldr	r3, [sp, #24]
 8008b12:	4407      	add	r7, r0
 8008b14:	4403      	add	r3, r0
 8008b16:	9306      	str	r3, [sp, #24]
 8008b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1a:	4403      	add	r3, r0
 8008b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1e:	9b06      	ldr	r3, [sp, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	dd05      	ble.n	8008b30 <_dtoa_r+0x830>
 8008b24:	4659      	mov	r1, fp
 8008b26:	461a      	mov	r2, r3
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f000 fbff 	bl	800932c <__lshift>
 8008b2e:	4683      	mov	fp, r0
 8008b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dd05      	ble.n	8008b42 <_dtoa_r+0x842>
 8008b36:	4621      	mov	r1, r4
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f000 fbf6 	bl	800932c <__lshift>
 8008b40:	4604      	mov	r4, r0
 8008b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d070      	beq.n	8008c2a <_dtoa_r+0x92a>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4658      	mov	r0, fp
 8008b4c:	f000 fc5e 	bl	800940c <__mcmp>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	da6a      	bge.n	8008c2a <_dtoa_r+0x92a>
 8008b54:	2300      	movs	r3, #0
 8008b56:	4659      	mov	r1, fp
 8008b58:	220a      	movs	r2, #10
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f000 fa3a 	bl	8008fd4 <__multadd>
 8008b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b62:	4683      	mov	fp, r0
 8008b64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 8194 	beq.w	8008e96 <_dtoa_r+0xb96>
 8008b6e:	4631      	mov	r1, r6
 8008b70:	2300      	movs	r3, #0
 8008b72:	220a      	movs	r2, #10
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 fa2d 	bl	8008fd4 <__multadd>
 8008b7a:	f1b9 0f00 	cmp.w	r9, #0
 8008b7e:	4606      	mov	r6, r0
 8008b80:	f300 8093 	bgt.w	8008caa <_dtoa_r+0x9aa>
 8008b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	dc57      	bgt.n	8008c3a <_dtoa_r+0x93a>
 8008b8a:	e08e      	b.n	8008caa <_dtoa_r+0x9aa>
 8008b8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b92:	e757      	b.n	8008a44 <_dtoa_r+0x744>
 8008b94:	9b08      	ldr	r3, [sp, #32]
 8008b96:	1e5c      	subs	r4, r3, #1
 8008b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	bfb7      	itett	lt
 8008b9e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ba0:	1b1c      	subge	r4, r3, r4
 8008ba2:	1ae2      	sublt	r2, r4, r3
 8008ba4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008ba6:	bfbe      	ittt	lt
 8008ba8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008baa:	189b      	addlt	r3, r3, r2
 8008bac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008bae:	9b08      	ldr	r3, [sp, #32]
 8008bb0:	bfb8      	it	lt
 8008bb2:	2400      	movlt	r4, #0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	bfbb      	ittet	lt
 8008bb8:	9b06      	ldrlt	r3, [sp, #24]
 8008bba:	9a08      	ldrlt	r2, [sp, #32]
 8008bbc:	9f06      	ldrge	r7, [sp, #24]
 8008bbe:	1a9f      	sublt	r7, r3, r2
 8008bc0:	bfac      	ite	ge
 8008bc2:	9b08      	ldrge	r3, [sp, #32]
 8008bc4:	2300      	movlt	r3, #0
 8008bc6:	e73f      	b.n	8008a48 <_dtoa_r+0x748>
 8008bc8:	3fe00000 	.word	0x3fe00000
 8008bcc:	40240000 	.word	0x40240000
 8008bd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008bd2:	9f06      	ldr	r7, [sp, #24]
 8008bd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008bd6:	e742      	b.n	8008a5e <_dtoa_r+0x75e>
 8008bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bda:	e76b      	b.n	8008ab4 <_dtoa_r+0x7b4>
 8008bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	dc19      	bgt.n	8008c16 <_dtoa_r+0x916>
 8008be2:	9b04      	ldr	r3, [sp, #16]
 8008be4:	b9bb      	cbnz	r3, 8008c16 <_dtoa_r+0x916>
 8008be6:	9b05      	ldr	r3, [sp, #20]
 8008be8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bec:	b99b      	cbnz	r3, 8008c16 <_dtoa_r+0x916>
 8008bee:	9b05      	ldr	r3, [sp, #20]
 8008bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	0d1b      	lsrs	r3, r3, #20
 8008bf6:	051b      	lsls	r3, r3, #20
 8008bf8:	b183      	cbz	r3, 8008c1c <_dtoa_r+0x91c>
 8008bfa:	f04f 0801 	mov.w	r8, #1
 8008bfe:	9b06      	ldr	r3, [sp, #24]
 8008c00:	3301      	adds	r3, #1
 8008c02:	9306      	str	r3, [sp, #24]
 8008c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c06:	3301      	adds	r3, #1
 8008c08:	9309      	str	r3, [sp, #36]	; 0x24
 8008c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f47f af6a 	bne.w	8008ae6 <_dtoa_r+0x7e6>
 8008c12:	2001      	movs	r0, #1
 8008c14:	e76f      	b.n	8008af6 <_dtoa_r+0x7f6>
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	e7f6      	b.n	8008c0a <_dtoa_r+0x90a>
 8008c1c:	4698      	mov	r8, r3
 8008c1e:	e7f4      	b.n	8008c0a <_dtoa_r+0x90a>
 8008c20:	f43f af7d 	beq.w	8008b1e <_dtoa_r+0x81e>
 8008c24:	4618      	mov	r0, r3
 8008c26:	301c      	adds	r0, #28
 8008c28:	e772      	b.n	8008b10 <_dtoa_r+0x810>
 8008c2a:	9b08      	ldr	r3, [sp, #32]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	dc36      	bgt.n	8008c9e <_dtoa_r+0x99e>
 8008c30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	dd33      	ble.n	8008c9e <_dtoa_r+0x99e>
 8008c36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c3a:	f1b9 0f00 	cmp.w	r9, #0
 8008c3e:	d10d      	bne.n	8008c5c <_dtoa_r+0x95c>
 8008c40:	4621      	mov	r1, r4
 8008c42:	464b      	mov	r3, r9
 8008c44:	2205      	movs	r2, #5
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 f9c4 	bl	8008fd4 <__multadd>
 8008c4c:	4601      	mov	r1, r0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4658      	mov	r0, fp
 8008c52:	f000 fbdb 	bl	800940c <__mcmp>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f73f adb8 	bgt.w	80087cc <_dtoa_r+0x4cc>
 8008c5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c5e:	9f03      	ldr	r7, [sp, #12]
 8008c60:	ea6f 0a03 	mvn.w	sl, r3
 8008c64:	f04f 0800 	mov.w	r8, #0
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f000 f990 	bl	8008f90 <_Bfree>
 8008c70:	2e00      	cmp	r6, #0
 8008c72:	f43f aea7 	beq.w	80089c4 <_dtoa_r+0x6c4>
 8008c76:	f1b8 0f00 	cmp.w	r8, #0
 8008c7a:	d005      	beq.n	8008c88 <_dtoa_r+0x988>
 8008c7c:	45b0      	cmp	r8, r6
 8008c7e:	d003      	beq.n	8008c88 <_dtoa_r+0x988>
 8008c80:	4641      	mov	r1, r8
 8008c82:	4628      	mov	r0, r5
 8008c84:	f000 f984 	bl	8008f90 <_Bfree>
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 f980 	bl	8008f90 <_Bfree>
 8008c90:	e698      	b.n	80089c4 <_dtoa_r+0x6c4>
 8008c92:	2400      	movs	r4, #0
 8008c94:	4626      	mov	r6, r4
 8008c96:	e7e1      	b.n	8008c5c <_dtoa_r+0x95c>
 8008c98:	46c2      	mov	sl, r8
 8008c9a:	4626      	mov	r6, r4
 8008c9c:	e596      	b.n	80087cc <_dtoa_r+0x4cc>
 8008c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 80fd 	beq.w	8008ea4 <_dtoa_r+0xba4>
 8008caa:	2f00      	cmp	r7, #0
 8008cac:	dd05      	ble.n	8008cba <_dtoa_r+0x9ba>
 8008cae:	4631      	mov	r1, r6
 8008cb0:	463a      	mov	r2, r7
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 fb3a 	bl	800932c <__lshift>
 8008cb8:	4606      	mov	r6, r0
 8008cba:	f1b8 0f00 	cmp.w	r8, #0
 8008cbe:	d05c      	beq.n	8008d7a <_dtoa_r+0xa7a>
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	6871      	ldr	r1, [r6, #4]
 8008cc4:	f000 f924 	bl	8008f10 <_Balloc>
 8008cc8:	4607      	mov	r7, r0
 8008cca:	b928      	cbnz	r0, 8008cd8 <_dtoa_r+0x9d8>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008cd2:	4b7f      	ldr	r3, [pc, #508]	; (8008ed0 <_dtoa_r+0xbd0>)
 8008cd4:	f7ff bb28 	b.w	8008328 <_dtoa_r+0x28>
 8008cd8:	6932      	ldr	r2, [r6, #16]
 8008cda:	f106 010c 	add.w	r1, r6, #12
 8008cde:	3202      	adds	r2, #2
 8008ce0:	0092      	lsls	r2, r2, #2
 8008ce2:	300c      	adds	r0, #12
 8008ce4:	f7fe fde8 	bl	80078b8 <memcpy>
 8008ce8:	2201      	movs	r2, #1
 8008cea:	4639      	mov	r1, r7
 8008cec:	4628      	mov	r0, r5
 8008cee:	f000 fb1d 	bl	800932c <__lshift>
 8008cf2:	46b0      	mov	r8, r6
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	9308      	str	r3, [sp, #32]
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	444b      	add	r3, r9
 8008d00:	930a      	str	r3, [sp, #40]	; 0x28
 8008d02:	9b04      	ldr	r3, [sp, #16]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	4658      	mov	r0, fp
 8008d12:	9304      	str	r3, [sp, #16]
 8008d14:	f7ff fa66 	bl	80081e4 <quorem>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	4641      	mov	r1, r8
 8008d1c:	3330      	adds	r3, #48	; 0x30
 8008d1e:	9006      	str	r0, [sp, #24]
 8008d20:	4658      	mov	r0, fp
 8008d22:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d24:	f000 fb72 	bl	800940c <__mcmp>
 8008d28:	4632      	mov	r2, r6
 8008d2a:	4681      	mov	r9, r0
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 fb88 	bl	8009444 <__mdiff>
 8008d34:	68c2      	ldr	r2, [r0, #12]
 8008d36:	4607      	mov	r7, r0
 8008d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d3a:	bb02      	cbnz	r2, 8008d7e <_dtoa_r+0xa7e>
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	4658      	mov	r0, fp
 8008d40:	f000 fb64 	bl	800940c <__mcmp>
 8008d44:	4602      	mov	r2, r0
 8008d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d48:	4639      	mov	r1, r7
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008d50:	f000 f91e 	bl	8008f90 <_Bfree>
 8008d54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d58:	9f08      	ldr	r7, [sp, #32]
 8008d5a:	ea43 0102 	orr.w	r1, r3, r2
 8008d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d60:	430b      	orrs	r3, r1
 8008d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d64:	d10d      	bne.n	8008d82 <_dtoa_r+0xa82>
 8008d66:	2b39      	cmp	r3, #57	; 0x39
 8008d68:	d029      	beq.n	8008dbe <_dtoa_r+0xabe>
 8008d6a:	f1b9 0f00 	cmp.w	r9, #0
 8008d6e:	dd01      	ble.n	8008d74 <_dtoa_r+0xa74>
 8008d70:	9b06      	ldr	r3, [sp, #24]
 8008d72:	3331      	adds	r3, #49	; 0x31
 8008d74:	9a04      	ldr	r2, [sp, #16]
 8008d76:	7013      	strb	r3, [r2, #0]
 8008d78:	e776      	b.n	8008c68 <_dtoa_r+0x968>
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	e7b9      	b.n	8008cf2 <_dtoa_r+0x9f2>
 8008d7e:	2201      	movs	r2, #1
 8008d80:	e7e2      	b.n	8008d48 <_dtoa_r+0xa48>
 8008d82:	f1b9 0f00 	cmp.w	r9, #0
 8008d86:	db06      	blt.n	8008d96 <_dtoa_r+0xa96>
 8008d88:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008d8a:	ea41 0909 	orr.w	r9, r1, r9
 8008d8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d90:	ea59 0101 	orrs.w	r1, r9, r1
 8008d94:	d120      	bne.n	8008dd8 <_dtoa_r+0xad8>
 8008d96:	2a00      	cmp	r2, #0
 8008d98:	ddec      	ble.n	8008d74 <_dtoa_r+0xa74>
 8008d9a:	4659      	mov	r1, fp
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	4628      	mov	r0, r5
 8008da0:	9308      	str	r3, [sp, #32]
 8008da2:	f000 fac3 	bl	800932c <__lshift>
 8008da6:	4621      	mov	r1, r4
 8008da8:	4683      	mov	fp, r0
 8008daa:	f000 fb2f 	bl	800940c <__mcmp>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	9b08      	ldr	r3, [sp, #32]
 8008db2:	dc02      	bgt.n	8008dba <_dtoa_r+0xaba>
 8008db4:	d1de      	bne.n	8008d74 <_dtoa_r+0xa74>
 8008db6:	07da      	lsls	r2, r3, #31
 8008db8:	d5dc      	bpl.n	8008d74 <_dtoa_r+0xa74>
 8008dba:	2b39      	cmp	r3, #57	; 0x39
 8008dbc:	d1d8      	bne.n	8008d70 <_dtoa_r+0xa70>
 8008dbe:	2339      	movs	r3, #57	; 0x39
 8008dc0:	9a04      	ldr	r2, [sp, #16]
 8008dc2:	7013      	strb	r3, [r2, #0]
 8008dc4:	463b      	mov	r3, r7
 8008dc6:	461f      	mov	r7, r3
 8008dc8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	2a39      	cmp	r2, #57	; 0x39
 8008dd0:	d050      	beq.n	8008e74 <_dtoa_r+0xb74>
 8008dd2:	3201      	adds	r2, #1
 8008dd4:	701a      	strb	r2, [r3, #0]
 8008dd6:	e747      	b.n	8008c68 <_dtoa_r+0x968>
 8008dd8:	2a00      	cmp	r2, #0
 8008dda:	dd03      	ble.n	8008de4 <_dtoa_r+0xae4>
 8008ddc:	2b39      	cmp	r3, #57	; 0x39
 8008dde:	d0ee      	beq.n	8008dbe <_dtoa_r+0xabe>
 8008de0:	3301      	adds	r3, #1
 8008de2:	e7c7      	b.n	8008d74 <_dtoa_r+0xa74>
 8008de4:	9a08      	ldr	r2, [sp, #32]
 8008de6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008de8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008dec:	428a      	cmp	r2, r1
 8008dee:	d02a      	beq.n	8008e46 <_dtoa_r+0xb46>
 8008df0:	4659      	mov	r1, fp
 8008df2:	2300      	movs	r3, #0
 8008df4:	220a      	movs	r2, #10
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 f8ec 	bl	8008fd4 <__multadd>
 8008dfc:	45b0      	cmp	r8, r6
 8008dfe:	4683      	mov	fp, r0
 8008e00:	f04f 0300 	mov.w	r3, #0
 8008e04:	f04f 020a 	mov.w	r2, #10
 8008e08:	4641      	mov	r1, r8
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	d107      	bne.n	8008e1e <_dtoa_r+0xb1e>
 8008e0e:	f000 f8e1 	bl	8008fd4 <__multadd>
 8008e12:	4680      	mov	r8, r0
 8008e14:	4606      	mov	r6, r0
 8008e16:	9b08      	ldr	r3, [sp, #32]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	9308      	str	r3, [sp, #32]
 8008e1c:	e775      	b.n	8008d0a <_dtoa_r+0xa0a>
 8008e1e:	f000 f8d9 	bl	8008fd4 <__multadd>
 8008e22:	4631      	mov	r1, r6
 8008e24:	4680      	mov	r8, r0
 8008e26:	2300      	movs	r3, #0
 8008e28:	220a      	movs	r2, #10
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 f8d2 	bl	8008fd4 <__multadd>
 8008e30:	4606      	mov	r6, r0
 8008e32:	e7f0      	b.n	8008e16 <_dtoa_r+0xb16>
 8008e34:	f1b9 0f00 	cmp.w	r9, #0
 8008e38:	bfcc      	ite	gt
 8008e3a:	464f      	movgt	r7, r9
 8008e3c:	2701      	movle	r7, #1
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	9a03      	ldr	r2, [sp, #12]
 8008e44:	4417      	add	r7, r2
 8008e46:	4659      	mov	r1, fp
 8008e48:	2201      	movs	r2, #1
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	9308      	str	r3, [sp, #32]
 8008e4e:	f000 fa6d 	bl	800932c <__lshift>
 8008e52:	4621      	mov	r1, r4
 8008e54:	4683      	mov	fp, r0
 8008e56:	f000 fad9 	bl	800940c <__mcmp>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	dcb2      	bgt.n	8008dc4 <_dtoa_r+0xac4>
 8008e5e:	d102      	bne.n	8008e66 <_dtoa_r+0xb66>
 8008e60:	9b08      	ldr	r3, [sp, #32]
 8008e62:	07db      	lsls	r3, r3, #31
 8008e64:	d4ae      	bmi.n	8008dc4 <_dtoa_r+0xac4>
 8008e66:	463b      	mov	r3, r7
 8008e68:	461f      	mov	r7, r3
 8008e6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e6e:	2a30      	cmp	r2, #48	; 0x30
 8008e70:	d0fa      	beq.n	8008e68 <_dtoa_r+0xb68>
 8008e72:	e6f9      	b.n	8008c68 <_dtoa_r+0x968>
 8008e74:	9a03      	ldr	r2, [sp, #12]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d1a5      	bne.n	8008dc6 <_dtoa_r+0xac6>
 8008e7a:	2331      	movs	r3, #49	; 0x31
 8008e7c:	f10a 0a01 	add.w	sl, sl, #1
 8008e80:	e779      	b.n	8008d76 <_dtoa_r+0xa76>
 8008e82:	4b14      	ldr	r3, [pc, #80]	; (8008ed4 <_dtoa_r+0xbd4>)
 8008e84:	f7ff baa8 	b.w	80083d8 <_dtoa_r+0xd8>
 8008e88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f47f aa81 	bne.w	8008392 <_dtoa_r+0x92>
 8008e90:	4b11      	ldr	r3, [pc, #68]	; (8008ed8 <_dtoa_r+0xbd8>)
 8008e92:	f7ff baa1 	b.w	80083d8 <_dtoa_r+0xd8>
 8008e96:	f1b9 0f00 	cmp.w	r9, #0
 8008e9a:	dc03      	bgt.n	8008ea4 <_dtoa_r+0xba4>
 8008e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	f73f aecb 	bgt.w	8008c3a <_dtoa_r+0x93a>
 8008ea4:	9f03      	ldr	r7, [sp, #12]
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4658      	mov	r0, fp
 8008eaa:	f7ff f99b 	bl	80081e4 <quorem>
 8008eae:	9a03      	ldr	r2, [sp, #12]
 8008eb0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008eb4:	f807 3b01 	strb.w	r3, [r7], #1
 8008eb8:	1aba      	subs	r2, r7, r2
 8008eba:	4591      	cmp	r9, r2
 8008ebc:	ddba      	ble.n	8008e34 <_dtoa_r+0xb34>
 8008ebe:	4659      	mov	r1, fp
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	220a      	movs	r2, #10
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f000 f885 	bl	8008fd4 <__multadd>
 8008eca:	4683      	mov	fp, r0
 8008ecc:	e7eb      	b.n	8008ea6 <_dtoa_r+0xba6>
 8008ece:	bf00      	nop
 8008ed0:	0800b583 	.word	0x0800b583
 8008ed4:	0800b4e0 	.word	0x0800b4e0
 8008ed8:	0800b504 	.word	0x0800b504

08008edc <_localeconv_r>:
 8008edc:	4800      	ldr	r0, [pc, #0]	; (8008ee0 <_localeconv_r+0x4>)
 8008ede:	4770      	bx	lr
 8008ee0:	20000160 	.word	0x20000160

08008ee4 <malloc>:
 8008ee4:	4b02      	ldr	r3, [pc, #8]	; (8008ef0 <malloc+0xc>)
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	f000 bc0f 	b.w	800970c <_malloc_r>
 8008eee:	bf00      	nop
 8008ef0:	2000000c 	.word	0x2000000c

08008ef4 <memchr>:
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	b2c9      	uxtb	r1, r1
 8008efa:	4402      	add	r2, r0
 8008efc:	4293      	cmp	r3, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	d101      	bne.n	8008f06 <memchr+0x12>
 8008f02:	2000      	movs	r0, #0
 8008f04:	e003      	b.n	8008f0e <memchr+0x1a>
 8008f06:	7804      	ldrb	r4, [r0, #0]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	428c      	cmp	r4, r1
 8008f0c:	d1f6      	bne.n	8008efc <memchr+0x8>
 8008f0e:	bd10      	pop	{r4, pc}

08008f10 <_Balloc>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f14:	4604      	mov	r4, r0
 8008f16:	460d      	mov	r5, r1
 8008f18:	b976      	cbnz	r6, 8008f38 <_Balloc+0x28>
 8008f1a:	2010      	movs	r0, #16
 8008f1c:	f7ff ffe2 	bl	8008ee4 <malloc>
 8008f20:	4602      	mov	r2, r0
 8008f22:	6260      	str	r0, [r4, #36]	; 0x24
 8008f24:	b920      	cbnz	r0, 8008f30 <_Balloc+0x20>
 8008f26:	2166      	movs	r1, #102	; 0x66
 8008f28:	4b17      	ldr	r3, [pc, #92]	; (8008f88 <_Balloc+0x78>)
 8008f2a:	4818      	ldr	r0, [pc, #96]	; (8008f8c <_Balloc+0x7c>)
 8008f2c:	f000 fdce 	bl	8009acc <__assert_func>
 8008f30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f34:	6006      	str	r6, [r0, #0]
 8008f36:	60c6      	str	r6, [r0, #12]
 8008f38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f3a:	68f3      	ldr	r3, [r6, #12]
 8008f3c:	b183      	cbz	r3, 8008f60 <_Balloc+0x50>
 8008f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f46:	b9b8      	cbnz	r0, 8008f78 <_Balloc+0x68>
 8008f48:	2101      	movs	r1, #1
 8008f4a:	fa01 f605 	lsl.w	r6, r1, r5
 8008f4e:	1d72      	adds	r2, r6, #5
 8008f50:	4620      	mov	r0, r4
 8008f52:	0092      	lsls	r2, r2, #2
 8008f54:	f000 fb5e 	bl	8009614 <_calloc_r>
 8008f58:	b160      	cbz	r0, 8008f74 <_Balloc+0x64>
 8008f5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f5e:	e00e      	b.n	8008f7e <_Balloc+0x6e>
 8008f60:	2221      	movs	r2, #33	; 0x21
 8008f62:	2104      	movs	r1, #4
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 fb55 	bl	8009614 <_calloc_r>
 8008f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f6c:	60f0      	str	r0, [r6, #12]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e4      	bne.n	8008f3e <_Balloc+0x2e>
 8008f74:	2000      	movs	r0, #0
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
 8008f78:	6802      	ldr	r2, [r0, #0]
 8008f7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f84:	e7f7      	b.n	8008f76 <_Balloc+0x66>
 8008f86:	bf00      	nop
 8008f88:	0800b511 	.word	0x0800b511
 8008f8c:	0800b594 	.word	0x0800b594

08008f90 <_Bfree>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f94:	4605      	mov	r5, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b976      	cbnz	r6, 8008fb8 <_Bfree+0x28>
 8008f9a:	2010      	movs	r0, #16
 8008f9c:	f7ff ffa2 	bl	8008ee4 <malloc>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	6268      	str	r0, [r5, #36]	; 0x24
 8008fa4:	b920      	cbnz	r0, 8008fb0 <_Bfree+0x20>
 8008fa6:	218a      	movs	r1, #138	; 0x8a
 8008fa8:	4b08      	ldr	r3, [pc, #32]	; (8008fcc <_Bfree+0x3c>)
 8008faa:	4809      	ldr	r0, [pc, #36]	; (8008fd0 <_Bfree+0x40>)
 8008fac:	f000 fd8e 	bl	8009acc <__assert_func>
 8008fb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fb4:	6006      	str	r6, [r0, #0]
 8008fb6:	60c6      	str	r6, [r0, #12]
 8008fb8:	b13c      	cbz	r4, 8008fca <_Bfree+0x3a>
 8008fba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fbc:	6862      	ldr	r2, [r4, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fc4:	6021      	str	r1, [r4, #0]
 8008fc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	0800b511 	.word	0x0800b511
 8008fd0:	0800b594 	.word	0x0800b594

08008fd4 <__multadd>:
 8008fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd8:	4607      	mov	r7, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	461e      	mov	r6, r3
 8008fde:	2000      	movs	r0, #0
 8008fe0:	690d      	ldr	r5, [r1, #16]
 8008fe2:	f101 0c14 	add.w	ip, r1, #20
 8008fe6:	f8dc 3000 	ldr.w	r3, [ip]
 8008fea:	3001      	adds	r0, #1
 8008fec:	b299      	uxth	r1, r3
 8008fee:	fb02 6101 	mla	r1, r2, r1, r6
 8008ff2:	0c1e      	lsrs	r6, r3, #16
 8008ff4:	0c0b      	lsrs	r3, r1, #16
 8008ff6:	fb02 3306 	mla	r3, r2, r6, r3
 8008ffa:	b289      	uxth	r1, r1
 8008ffc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009000:	4285      	cmp	r5, r0
 8009002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009006:	f84c 1b04 	str.w	r1, [ip], #4
 800900a:	dcec      	bgt.n	8008fe6 <__multadd+0x12>
 800900c:	b30e      	cbz	r6, 8009052 <__multadd+0x7e>
 800900e:	68a3      	ldr	r3, [r4, #8]
 8009010:	42ab      	cmp	r3, r5
 8009012:	dc19      	bgt.n	8009048 <__multadd+0x74>
 8009014:	6861      	ldr	r1, [r4, #4]
 8009016:	4638      	mov	r0, r7
 8009018:	3101      	adds	r1, #1
 800901a:	f7ff ff79 	bl	8008f10 <_Balloc>
 800901e:	4680      	mov	r8, r0
 8009020:	b928      	cbnz	r0, 800902e <__multadd+0x5a>
 8009022:	4602      	mov	r2, r0
 8009024:	21b5      	movs	r1, #181	; 0xb5
 8009026:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <__multadd+0x84>)
 8009028:	480c      	ldr	r0, [pc, #48]	; (800905c <__multadd+0x88>)
 800902a:	f000 fd4f 	bl	8009acc <__assert_func>
 800902e:	6922      	ldr	r2, [r4, #16]
 8009030:	f104 010c 	add.w	r1, r4, #12
 8009034:	3202      	adds	r2, #2
 8009036:	0092      	lsls	r2, r2, #2
 8009038:	300c      	adds	r0, #12
 800903a:	f7fe fc3d 	bl	80078b8 <memcpy>
 800903e:	4621      	mov	r1, r4
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ffa5 	bl	8008f90 <_Bfree>
 8009046:	4644      	mov	r4, r8
 8009048:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800904c:	3501      	adds	r5, #1
 800904e:	615e      	str	r6, [r3, #20]
 8009050:	6125      	str	r5, [r4, #16]
 8009052:	4620      	mov	r0, r4
 8009054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009058:	0800b583 	.word	0x0800b583
 800905c:	0800b594 	.word	0x0800b594

08009060 <__hi0bits>:
 8009060:	0c02      	lsrs	r2, r0, #16
 8009062:	0412      	lsls	r2, r2, #16
 8009064:	4603      	mov	r3, r0
 8009066:	b9ca      	cbnz	r2, 800909c <__hi0bits+0x3c>
 8009068:	0403      	lsls	r3, r0, #16
 800906a:	2010      	movs	r0, #16
 800906c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009070:	bf04      	itt	eq
 8009072:	021b      	lsleq	r3, r3, #8
 8009074:	3008      	addeq	r0, #8
 8009076:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800907a:	bf04      	itt	eq
 800907c:	011b      	lsleq	r3, r3, #4
 800907e:	3004      	addeq	r0, #4
 8009080:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009084:	bf04      	itt	eq
 8009086:	009b      	lsleq	r3, r3, #2
 8009088:	3002      	addeq	r0, #2
 800908a:	2b00      	cmp	r3, #0
 800908c:	db05      	blt.n	800909a <__hi0bits+0x3a>
 800908e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009092:	f100 0001 	add.w	r0, r0, #1
 8009096:	bf08      	it	eq
 8009098:	2020      	moveq	r0, #32
 800909a:	4770      	bx	lr
 800909c:	2000      	movs	r0, #0
 800909e:	e7e5      	b.n	800906c <__hi0bits+0xc>

080090a0 <__lo0bits>:
 80090a0:	6803      	ldr	r3, [r0, #0]
 80090a2:	4602      	mov	r2, r0
 80090a4:	f013 0007 	ands.w	r0, r3, #7
 80090a8:	d00b      	beq.n	80090c2 <__lo0bits+0x22>
 80090aa:	07d9      	lsls	r1, r3, #31
 80090ac:	d421      	bmi.n	80090f2 <__lo0bits+0x52>
 80090ae:	0798      	lsls	r0, r3, #30
 80090b0:	bf49      	itett	mi
 80090b2:	085b      	lsrmi	r3, r3, #1
 80090b4:	089b      	lsrpl	r3, r3, #2
 80090b6:	2001      	movmi	r0, #1
 80090b8:	6013      	strmi	r3, [r2, #0]
 80090ba:	bf5c      	itt	pl
 80090bc:	2002      	movpl	r0, #2
 80090be:	6013      	strpl	r3, [r2, #0]
 80090c0:	4770      	bx	lr
 80090c2:	b299      	uxth	r1, r3
 80090c4:	b909      	cbnz	r1, 80090ca <__lo0bits+0x2a>
 80090c6:	2010      	movs	r0, #16
 80090c8:	0c1b      	lsrs	r3, r3, #16
 80090ca:	b2d9      	uxtb	r1, r3
 80090cc:	b909      	cbnz	r1, 80090d2 <__lo0bits+0x32>
 80090ce:	3008      	adds	r0, #8
 80090d0:	0a1b      	lsrs	r3, r3, #8
 80090d2:	0719      	lsls	r1, r3, #28
 80090d4:	bf04      	itt	eq
 80090d6:	091b      	lsreq	r3, r3, #4
 80090d8:	3004      	addeq	r0, #4
 80090da:	0799      	lsls	r1, r3, #30
 80090dc:	bf04      	itt	eq
 80090de:	089b      	lsreq	r3, r3, #2
 80090e0:	3002      	addeq	r0, #2
 80090e2:	07d9      	lsls	r1, r3, #31
 80090e4:	d403      	bmi.n	80090ee <__lo0bits+0x4e>
 80090e6:	085b      	lsrs	r3, r3, #1
 80090e8:	f100 0001 	add.w	r0, r0, #1
 80090ec:	d003      	beq.n	80090f6 <__lo0bits+0x56>
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	4770      	bx	lr
 80090f2:	2000      	movs	r0, #0
 80090f4:	4770      	bx	lr
 80090f6:	2020      	movs	r0, #32
 80090f8:	4770      	bx	lr
	...

080090fc <__i2b>:
 80090fc:	b510      	push	{r4, lr}
 80090fe:	460c      	mov	r4, r1
 8009100:	2101      	movs	r1, #1
 8009102:	f7ff ff05 	bl	8008f10 <_Balloc>
 8009106:	4602      	mov	r2, r0
 8009108:	b928      	cbnz	r0, 8009116 <__i2b+0x1a>
 800910a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800910e:	4b04      	ldr	r3, [pc, #16]	; (8009120 <__i2b+0x24>)
 8009110:	4804      	ldr	r0, [pc, #16]	; (8009124 <__i2b+0x28>)
 8009112:	f000 fcdb 	bl	8009acc <__assert_func>
 8009116:	2301      	movs	r3, #1
 8009118:	6144      	str	r4, [r0, #20]
 800911a:	6103      	str	r3, [r0, #16]
 800911c:	bd10      	pop	{r4, pc}
 800911e:	bf00      	nop
 8009120:	0800b583 	.word	0x0800b583
 8009124:	0800b594 	.word	0x0800b594

08009128 <__multiply>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	4691      	mov	r9, r2
 800912e:	690a      	ldr	r2, [r1, #16]
 8009130:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009134:	460c      	mov	r4, r1
 8009136:	429a      	cmp	r2, r3
 8009138:	bfbe      	ittt	lt
 800913a:	460b      	movlt	r3, r1
 800913c:	464c      	movlt	r4, r9
 800913e:	4699      	movlt	r9, r3
 8009140:	6927      	ldr	r7, [r4, #16]
 8009142:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009146:	68a3      	ldr	r3, [r4, #8]
 8009148:	6861      	ldr	r1, [r4, #4]
 800914a:	eb07 060a 	add.w	r6, r7, sl
 800914e:	42b3      	cmp	r3, r6
 8009150:	b085      	sub	sp, #20
 8009152:	bfb8      	it	lt
 8009154:	3101      	addlt	r1, #1
 8009156:	f7ff fedb 	bl	8008f10 <_Balloc>
 800915a:	b930      	cbnz	r0, 800916a <__multiply+0x42>
 800915c:	4602      	mov	r2, r0
 800915e:	f240 115d 	movw	r1, #349	; 0x15d
 8009162:	4b43      	ldr	r3, [pc, #268]	; (8009270 <__multiply+0x148>)
 8009164:	4843      	ldr	r0, [pc, #268]	; (8009274 <__multiply+0x14c>)
 8009166:	f000 fcb1 	bl	8009acc <__assert_func>
 800916a:	f100 0514 	add.w	r5, r0, #20
 800916e:	462b      	mov	r3, r5
 8009170:	2200      	movs	r2, #0
 8009172:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009176:	4543      	cmp	r3, r8
 8009178:	d321      	bcc.n	80091be <__multiply+0x96>
 800917a:	f104 0314 	add.w	r3, r4, #20
 800917e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009182:	f109 0314 	add.w	r3, r9, #20
 8009186:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800918a:	9202      	str	r2, [sp, #8]
 800918c:	1b3a      	subs	r2, r7, r4
 800918e:	3a15      	subs	r2, #21
 8009190:	f022 0203 	bic.w	r2, r2, #3
 8009194:	3204      	adds	r2, #4
 8009196:	f104 0115 	add.w	r1, r4, #21
 800919a:	428f      	cmp	r7, r1
 800919c:	bf38      	it	cc
 800919e:	2204      	movcc	r2, #4
 80091a0:	9201      	str	r2, [sp, #4]
 80091a2:	9a02      	ldr	r2, [sp, #8]
 80091a4:	9303      	str	r3, [sp, #12]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d80c      	bhi.n	80091c4 <__multiply+0x9c>
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	dd03      	ble.n	80091b6 <__multiply+0x8e>
 80091ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d059      	beq.n	800926a <__multiply+0x142>
 80091b6:	6106      	str	r6, [r0, #16]
 80091b8:	b005      	add	sp, #20
 80091ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091be:	f843 2b04 	str.w	r2, [r3], #4
 80091c2:	e7d8      	b.n	8009176 <__multiply+0x4e>
 80091c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80091c8:	f1ba 0f00 	cmp.w	sl, #0
 80091cc:	d023      	beq.n	8009216 <__multiply+0xee>
 80091ce:	46a9      	mov	r9, r5
 80091d0:	f04f 0c00 	mov.w	ip, #0
 80091d4:	f104 0e14 	add.w	lr, r4, #20
 80091d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091dc:	f8d9 1000 	ldr.w	r1, [r9]
 80091e0:	fa1f fb82 	uxth.w	fp, r2
 80091e4:	b289      	uxth	r1, r1
 80091e6:	fb0a 110b 	mla	r1, sl, fp, r1
 80091ea:	4461      	add	r1, ip
 80091ec:	f8d9 c000 	ldr.w	ip, [r9]
 80091f0:	0c12      	lsrs	r2, r2, #16
 80091f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80091f6:	fb0a c202 	mla	r2, sl, r2, ip
 80091fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091fe:	b289      	uxth	r1, r1
 8009200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009204:	4577      	cmp	r7, lr
 8009206:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800920a:	f849 1b04 	str.w	r1, [r9], #4
 800920e:	d8e3      	bhi.n	80091d8 <__multiply+0xb0>
 8009210:	9a01      	ldr	r2, [sp, #4]
 8009212:	f845 c002 	str.w	ip, [r5, r2]
 8009216:	9a03      	ldr	r2, [sp, #12]
 8009218:	3304      	adds	r3, #4
 800921a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800921e:	f1b9 0f00 	cmp.w	r9, #0
 8009222:	d020      	beq.n	8009266 <__multiply+0x13e>
 8009224:	46ae      	mov	lr, r5
 8009226:	f04f 0a00 	mov.w	sl, #0
 800922a:	6829      	ldr	r1, [r5, #0]
 800922c:	f104 0c14 	add.w	ip, r4, #20
 8009230:	f8bc b000 	ldrh.w	fp, [ip]
 8009234:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009238:	b289      	uxth	r1, r1
 800923a:	fb09 220b 	mla	r2, r9, fp, r2
 800923e:	4492      	add	sl, r2
 8009240:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009244:	f84e 1b04 	str.w	r1, [lr], #4
 8009248:	f85c 2b04 	ldr.w	r2, [ip], #4
 800924c:	f8be 1000 	ldrh.w	r1, [lr]
 8009250:	0c12      	lsrs	r2, r2, #16
 8009252:	fb09 1102 	mla	r1, r9, r2, r1
 8009256:	4567      	cmp	r7, ip
 8009258:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800925c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009260:	d8e6      	bhi.n	8009230 <__multiply+0x108>
 8009262:	9a01      	ldr	r2, [sp, #4]
 8009264:	50a9      	str	r1, [r5, r2]
 8009266:	3504      	adds	r5, #4
 8009268:	e79b      	b.n	80091a2 <__multiply+0x7a>
 800926a:	3e01      	subs	r6, #1
 800926c:	e79d      	b.n	80091aa <__multiply+0x82>
 800926e:	bf00      	nop
 8009270:	0800b583 	.word	0x0800b583
 8009274:	0800b594 	.word	0x0800b594

08009278 <__pow5mult>:
 8009278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800927c:	4615      	mov	r5, r2
 800927e:	f012 0203 	ands.w	r2, r2, #3
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	d007      	beq.n	8009298 <__pow5mult+0x20>
 8009288:	4c25      	ldr	r4, [pc, #148]	; (8009320 <__pow5mult+0xa8>)
 800928a:	3a01      	subs	r2, #1
 800928c:	2300      	movs	r3, #0
 800928e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009292:	f7ff fe9f 	bl	8008fd4 <__multadd>
 8009296:	4607      	mov	r7, r0
 8009298:	10ad      	asrs	r5, r5, #2
 800929a:	d03d      	beq.n	8009318 <__pow5mult+0xa0>
 800929c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800929e:	b97c      	cbnz	r4, 80092c0 <__pow5mult+0x48>
 80092a0:	2010      	movs	r0, #16
 80092a2:	f7ff fe1f 	bl	8008ee4 <malloc>
 80092a6:	4602      	mov	r2, r0
 80092a8:	6270      	str	r0, [r6, #36]	; 0x24
 80092aa:	b928      	cbnz	r0, 80092b8 <__pow5mult+0x40>
 80092ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092b0:	4b1c      	ldr	r3, [pc, #112]	; (8009324 <__pow5mult+0xac>)
 80092b2:	481d      	ldr	r0, [pc, #116]	; (8009328 <__pow5mult+0xb0>)
 80092b4:	f000 fc0a 	bl	8009acc <__assert_func>
 80092b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092bc:	6004      	str	r4, [r0, #0]
 80092be:	60c4      	str	r4, [r0, #12]
 80092c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092c8:	b94c      	cbnz	r4, 80092de <__pow5mult+0x66>
 80092ca:	f240 2171 	movw	r1, #625	; 0x271
 80092ce:	4630      	mov	r0, r6
 80092d0:	f7ff ff14 	bl	80090fc <__i2b>
 80092d4:	2300      	movs	r3, #0
 80092d6:	4604      	mov	r4, r0
 80092d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	f04f 0900 	mov.w	r9, #0
 80092e2:	07eb      	lsls	r3, r5, #31
 80092e4:	d50a      	bpl.n	80092fc <__pow5mult+0x84>
 80092e6:	4639      	mov	r1, r7
 80092e8:	4622      	mov	r2, r4
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7ff ff1c 	bl	8009128 <__multiply>
 80092f0:	4680      	mov	r8, r0
 80092f2:	4639      	mov	r1, r7
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7ff fe4b 	bl	8008f90 <_Bfree>
 80092fa:	4647      	mov	r7, r8
 80092fc:	106d      	asrs	r5, r5, #1
 80092fe:	d00b      	beq.n	8009318 <__pow5mult+0xa0>
 8009300:	6820      	ldr	r0, [r4, #0]
 8009302:	b938      	cbnz	r0, 8009314 <__pow5mult+0x9c>
 8009304:	4622      	mov	r2, r4
 8009306:	4621      	mov	r1, r4
 8009308:	4630      	mov	r0, r6
 800930a:	f7ff ff0d 	bl	8009128 <__multiply>
 800930e:	6020      	str	r0, [r4, #0]
 8009310:	f8c0 9000 	str.w	r9, [r0]
 8009314:	4604      	mov	r4, r0
 8009316:	e7e4      	b.n	80092e2 <__pow5mult+0x6a>
 8009318:	4638      	mov	r0, r7
 800931a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931e:	bf00      	nop
 8009320:	0800b6e0 	.word	0x0800b6e0
 8009324:	0800b511 	.word	0x0800b511
 8009328:	0800b594 	.word	0x0800b594

0800932c <__lshift>:
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	460c      	mov	r4, r1
 8009332:	4607      	mov	r7, r0
 8009334:	4691      	mov	r9, r2
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	6849      	ldr	r1, [r1, #4]
 800933a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800933e:	68a3      	ldr	r3, [r4, #8]
 8009340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009344:	f108 0601 	add.w	r6, r8, #1
 8009348:	42b3      	cmp	r3, r6
 800934a:	db0b      	blt.n	8009364 <__lshift+0x38>
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff fddf 	bl	8008f10 <_Balloc>
 8009352:	4605      	mov	r5, r0
 8009354:	b948      	cbnz	r0, 800936a <__lshift+0x3e>
 8009356:	4602      	mov	r2, r0
 8009358:	f240 11d9 	movw	r1, #473	; 0x1d9
 800935c:	4b29      	ldr	r3, [pc, #164]	; (8009404 <__lshift+0xd8>)
 800935e:	482a      	ldr	r0, [pc, #168]	; (8009408 <__lshift+0xdc>)
 8009360:	f000 fbb4 	bl	8009acc <__assert_func>
 8009364:	3101      	adds	r1, #1
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	e7ee      	b.n	8009348 <__lshift+0x1c>
 800936a:	2300      	movs	r3, #0
 800936c:	f100 0114 	add.w	r1, r0, #20
 8009370:	f100 0210 	add.w	r2, r0, #16
 8009374:	4618      	mov	r0, r3
 8009376:	4553      	cmp	r3, sl
 8009378:	db37      	blt.n	80093ea <__lshift+0xbe>
 800937a:	6920      	ldr	r0, [r4, #16]
 800937c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009380:	f104 0314 	add.w	r3, r4, #20
 8009384:	f019 091f 	ands.w	r9, r9, #31
 8009388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800938c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009390:	d02f      	beq.n	80093f2 <__lshift+0xc6>
 8009392:	468a      	mov	sl, r1
 8009394:	f04f 0c00 	mov.w	ip, #0
 8009398:	f1c9 0e20 	rsb	lr, r9, #32
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	fa02 f209 	lsl.w	r2, r2, r9
 80093a2:	ea42 020c 	orr.w	r2, r2, ip
 80093a6:	f84a 2b04 	str.w	r2, [sl], #4
 80093aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ae:	4298      	cmp	r0, r3
 80093b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80093b4:	d8f2      	bhi.n	800939c <__lshift+0x70>
 80093b6:	1b03      	subs	r3, r0, r4
 80093b8:	3b15      	subs	r3, #21
 80093ba:	f023 0303 	bic.w	r3, r3, #3
 80093be:	3304      	adds	r3, #4
 80093c0:	f104 0215 	add.w	r2, r4, #21
 80093c4:	4290      	cmp	r0, r2
 80093c6:	bf38      	it	cc
 80093c8:	2304      	movcc	r3, #4
 80093ca:	f841 c003 	str.w	ip, [r1, r3]
 80093ce:	f1bc 0f00 	cmp.w	ip, #0
 80093d2:	d001      	beq.n	80093d8 <__lshift+0xac>
 80093d4:	f108 0602 	add.w	r6, r8, #2
 80093d8:	3e01      	subs	r6, #1
 80093da:	4638      	mov	r0, r7
 80093dc:	4621      	mov	r1, r4
 80093de:	612e      	str	r6, [r5, #16]
 80093e0:	f7ff fdd6 	bl	8008f90 <_Bfree>
 80093e4:	4628      	mov	r0, r5
 80093e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80093ee:	3301      	adds	r3, #1
 80093f0:	e7c1      	b.n	8009376 <__lshift+0x4a>
 80093f2:	3904      	subs	r1, #4
 80093f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f8:	4298      	cmp	r0, r3
 80093fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80093fe:	d8f9      	bhi.n	80093f4 <__lshift+0xc8>
 8009400:	e7ea      	b.n	80093d8 <__lshift+0xac>
 8009402:	bf00      	nop
 8009404:	0800b583 	.word	0x0800b583
 8009408:	0800b594 	.word	0x0800b594

0800940c <__mcmp>:
 800940c:	4603      	mov	r3, r0
 800940e:	690a      	ldr	r2, [r1, #16]
 8009410:	6900      	ldr	r0, [r0, #16]
 8009412:	b530      	push	{r4, r5, lr}
 8009414:	1a80      	subs	r0, r0, r2
 8009416:	d10d      	bne.n	8009434 <__mcmp+0x28>
 8009418:	3314      	adds	r3, #20
 800941a:	3114      	adds	r1, #20
 800941c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009420:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009424:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009428:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800942c:	4295      	cmp	r5, r2
 800942e:	d002      	beq.n	8009436 <__mcmp+0x2a>
 8009430:	d304      	bcc.n	800943c <__mcmp+0x30>
 8009432:	2001      	movs	r0, #1
 8009434:	bd30      	pop	{r4, r5, pc}
 8009436:	42a3      	cmp	r3, r4
 8009438:	d3f4      	bcc.n	8009424 <__mcmp+0x18>
 800943a:	e7fb      	b.n	8009434 <__mcmp+0x28>
 800943c:	f04f 30ff 	mov.w	r0, #4294967295
 8009440:	e7f8      	b.n	8009434 <__mcmp+0x28>
	...

08009444 <__mdiff>:
 8009444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	460d      	mov	r5, r1
 800944a:	4607      	mov	r7, r0
 800944c:	4611      	mov	r1, r2
 800944e:	4628      	mov	r0, r5
 8009450:	4614      	mov	r4, r2
 8009452:	f7ff ffdb 	bl	800940c <__mcmp>
 8009456:	1e06      	subs	r6, r0, #0
 8009458:	d111      	bne.n	800947e <__mdiff+0x3a>
 800945a:	4631      	mov	r1, r6
 800945c:	4638      	mov	r0, r7
 800945e:	f7ff fd57 	bl	8008f10 <_Balloc>
 8009462:	4602      	mov	r2, r0
 8009464:	b928      	cbnz	r0, 8009472 <__mdiff+0x2e>
 8009466:	f240 2132 	movw	r1, #562	; 0x232
 800946a:	4b3a      	ldr	r3, [pc, #232]	; (8009554 <__mdiff+0x110>)
 800946c:	483a      	ldr	r0, [pc, #232]	; (8009558 <__mdiff+0x114>)
 800946e:	f000 fb2d 	bl	8009acc <__assert_func>
 8009472:	2301      	movs	r3, #1
 8009474:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009478:	4610      	mov	r0, r2
 800947a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947e:	bfa4      	itt	ge
 8009480:	4623      	movge	r3, r4
 8009482:	462c      	movge	r4, r5
 8009484:	4638      	mov	r0, r7
 8009486:	6861      	ldr	r1, [r4, #4]
 8009488:	bfa6      	itte	ge
 800948a:	461d      	movge	r5, r3
 800948c:	2600      	movge	r6, #0
 800948e:	2601      	movlt	r6, #1
 8009490:	f7ff fd3e 	bl	8008f10 <_Balloc>
 8009494:	4602      	mov	r2, r0
 8009496:	b918      	cbnz	r0, 80094a0 <__mdiff+0x5c>
 8009498:	f44f 7110 	mov.w	r1, #576	; 0x240
 800949c:	4b2d      	ldr	r3, [pc, #180]	; (8009554 <__mdiff+0x110>)
 800949e:	e7e5      	b.n	800946c <__mdiff+0x28>
 80094a0:	f102 0814 	add.w	r8, r2, #20
 80094a4:	46c2      	mov	sl, r8
 80094a6:	f04f 0c00 	mov.w	ip, #0
 80094aa:	6927      	ldr	r7, [r4, #16]
 80094ac:	60c6      	str	r6, [r0, #12]
 80094ae:	692e      	ldr	r6, [r5, #16]
 80094b0:	f104 0014 	add.w	r0, r4, #20
 80094b4:	f105 0914 	add.w	r9, r5, #20
 80094b8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80094bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094c0:	3410      	adds	r4, #16
 80094c2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80094c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80094ca:	fa1f f18b 	uxth.w	r1, fp
 80094ce:	448c      	add	ip, r1
 80094d0:	b299      	uxth	r1, r3
 80094d2:	0c1b      	lsrs	r3, r3, #16
 80094d4:	ebac 0101 	sub.w	r1, ip, r1
 80094d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094dc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80094e0:	b289      	uxth	r1, r1
 80094e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80094e6:	454e      	cmp	r6, r9
 80094e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80094ec:	f84a 3b04 	str.w	r3, [sl], #4
 80094f0:	d8e7      	bhi.n	80094c2 <__mdiff+0x7e>
 80094f2:	1b73      	subs	r3, r6, r5
 80094f4:	3b15      	subs	r3, #21
 80094f6:	f023 0303 	bic.w	r3, r3, #3
 80094fa:	3515      	adds	r5, #21
 80094fc:	3304      	adds	r3, #4
 80094fe:	42ae      	cmp	r6, r5
 8009500:	bf38      	it	cc
 8009502:	2304      	movcc	r3, #4
 8009504:	4418      	add	r0, r3
 8009506:	4443      	add	r3, r8
 8009508:	461e      	mov	r6, r3
 800950a:	4605      	mov	r5, r0
 800950c:	4575      	cmp	r5, lr
 800950e:	d30e      	bcc.n	800952e <__mdiff+0xea>
 8009510:	f10e 0103 	add.w	r1, lr, #3
 8009514:	1a09      	subs	r1, r1, r0
 8009516:	f021 0103 	bic.w	r1, r1, #3
 800951a:	3803      	subs	r0, #3
 800951c:	4586      	cmp	lr, r0
 800951e:	bf38      	it	cc
 8009520:	2100      	movcc	r1, #0
 8009522:	4419      	add	r1, r3
 8009524:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009528:	b18b      	cbz	r3, 800954e <__mdiff+0x10a>
 800952a:	6117      	str	r7, [r2, #16]
 800952c:	e7a4      	b.n	8009478 <__mdiff+0x34>
 800952e:	f855 8b04 	ldr.w	r8, [r5], #4
 8009532:	fa1f f188 	uxth.w	r1, r8
 8009536:	4461      	add	r1, ip
 8009538:	140c      	asrs	r4, r1, #16
 800953a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800953e:	b289      	uxth	r1, r1
 8009540:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009544:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009548:	f846 1b04 	str.w	r1, [r6], #4
 800954c:	e7de      	b.n	800950c <__mdiff+0xc8>
 800954e:	3f01      	subs	r7, #1
 8009550:	e7e8      	b.n	8009524 <__mdiff+0xe0>
 8009552:	bf00      	nop
 8009554:	0800b583 	.word	0x0800b583
 8009558:	0800b594 	.word	0x0800b594

0800955c <__d2b>:
 800955c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009560:	2101      	movs	r1, #1
 8009562:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009566:	4690      	mov	r8, r2
 8009568:	461d      	mov	r5, r3
 800956a:	f7ff fcd1 	bl	8008f10 <_Balloc>
 800956e:	4604      	mov	r4, r0
 8009570:	b930      	cbnz	r0, 8009580 <__d2b+0x24>
 8009572:	4602      	mov	r2, r0
 8009574:	f240 310a 	movw	r1, #778	; 0x30a
 8009578:	4b24      	ldr	r3, [pc, #144]	; (800960c <__d2b+0xb0>)
 800957a:	4825      	ldr	r0, [pc, #148]	; (8009610 <__d2b+0xb4>)
 800957c:	f000 faa6 	bl	8009acc <__assert_func>
 8009580:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009584:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009588:	bb2d      	cbnz	r5, 80095d6 <__d2b+0x7a>
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	f1b8 0300 	subs.w	r3, r8, #0
 8009590:	d026      	beq.n	80095e0 <__d2b+0x84>
 8009592:	4668      	mov	r0, sp
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	f7ff fd83 	bl	80090a0 <__lo0bits>
 800959a:	9900      	ldr	r1, [sp, #0]
 800959c:	b1f0      	cbz	r0, 80095dc <__d2b+0x80>
 800959e:	9a01      	ldr	r2, [sp, #4]
 80095a0:	f1c0 0320 	rsb	r3, r0, #32
 80095a4:	fa02 f303 	lsl.w	r3, r2, r3
 80095a8:	430b      	orrs	r3, r1
 80095aa:	40c2      	lsrs	r2, r0
 80095ac:	6163      	str	r3, [r4, #20]
 80095ae:	9201      	str	r2, [sp, #4]
 80095b0:	9b01      	ldr	r3, [sp, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	bf14      	ite	ne
 80095b6:	2102      	movne	r1, #2
 80095b8:	2101      	moveq	r1, #1
 80095ba:	61a3      	str	r3, [r4, #24]
 80095bc:	6121      	str	r1, [r4, #16]
 80095be:	b1c5      	cbz	r5, 80095f2 <__d2b+0x96>
 80095c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095c4:	4405      	add	r5, r0
 80095c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095ca:	603d      	str	r5, [r7, #0]
 80095cc:	6030      	str	r0, [r6, #0]
 80095ce:	4620      	mov	r0, r4
 80095d0:	b002      	add	sp, #8
 80095d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095da:	e7d6      	b.n	800958a <__d2b+0x2e>
 80095dc:	6161      	str	r1, [r4, #20]
 80095de:	e7e7      	b.n	80095b0 <__d2b+0x54>
 80095e0:	a801      	add	r0, sp, #4
 80095e2:	f7ff fd5d 	bl	80090a0 <__lo0bits>
 80095e6:	2101      	movs	r1, #1
 80095e8:	9b01      	ldr	r3, [sp, #4]
 80095ea:	6121      	str	r1, [r4, #16]
 80095ec:	6163      	str	r3, [r4, #20]
 80095ee:	3020      	adds	r0, #32
 80095f0:	e7e5      	b.n	80095be <__d2b+0x62>
 80095f2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80095f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095fa:	6038      	str	r0, [r7, #0]
 80095fc:	6918      	ldr	r0, [r3, #16]
 80095fe:	f7ff fd2f 	bl	8009060 <__hi0bits>
 8009602:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009606:	6031      	str	r1, [r6, #0]
 8009608:	e7e1      	b.n	80095ce <__d2b+0x72>
 800960a:	bf00      	nop
 800960c:	0800b583 	.word	0x0800b583
 8009610:	0800b594 	.word	0x0800b594

08009614 <_calloc_r>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	fba1 5402 	umull	r5, r4, r1, r2
 800961a:	b934      	cbnz	r4, 800962a <_calloc_r+0x16>
 800961c:	4629      	mov	r1, r5
 800961e:	f000 f875 	bl	800970c <_malloc_r>
 8009622:	4606      	mov	r6, r0
 8009624:	b928      	cbnz	r0, 8009632 <_calloc_r+0x1e>
 8009626:	4630      	mov	r0, r6
 8009628:	bd70      	pop	{r4, r5, r6, pc}
 800962a:	220c      	movs	r2, #12
 800962c:	2600      	movs	r6, #0
 800962e:	6002      	str	r2, [r0, #0]
 8009630:	e7f9      	b.n	8009626 <_calloc_r+0x12>
 8009632:	462a      	mov	r2, r5
 8009634:	4621      	mov	r1, r4
 8009636:	f7fe f94d 	bl	80078d4 <memset>
 800963a:	e7f4      	b.n	8009626 <_calloc_r+0x12>

0800963c <_free_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4605      	mov	r5, r0
 8009640:	2900      	cmp	r1, #0
 8009642:	d040      	beq.n	80096c6 <_free_r+0x8a>
 8009644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009648:	1f0c      	subs	r4, r1, #4
 800964a:	2b00      	cmp	r3, #0
 800964c:	bfb8      	it	lt
 800964e:	18e4      	addlt	r4, r4, r3
 8009650:	f000 fa98 	bl	8009b84 <__malloc_lock>
 8009654:	4a1c      	ldr	r2, [pc, #112]	; (80096c8 <_free_r+0x8c>)
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	b933      	cbnz	r3, 8009668 <_free_r+0x2c>
 800965a:	6063      	str	r3, [r4, #4]
 800965c:	6014      	str	r4, [r2, #0]
 800965e:	4628      	mov	r0, r5
 8009660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009664:	f000 ba94 	b.w	8009b90 <__malloc_unlock>
 8009668:	42a3      	cmp	r3, r4
 800966a:	d908      	bls.n	800967e <_free_r+0x42>
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	1821      	adds	r1, r4, r0
 8009670:	428b      	cmp	r3, r1
 8009672:	bf01      	itttt	eq
 8009674:	6819      	ldreq	r1, [r3, #0]
 8009676:	685b      	ldreq	r3, [r3, #4]
 8009678:	1809      	addeq	r1, r1, r0
 800967a:	6021      	streq	r1, [r4, #0]
 800967c:	e7ed      	b.n	800965a <_free_r+0x1e>
 800967e:	461a      	mov	r2, r3
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	b10b      	cbz	r3, 8009688 <_free_r+0x4c>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d9fa      	bls.n	800967e <_free_r+0x42>
 8009688:	6811      	ldr	r1, [r2, #0]
 800968a:	1850      	adds	r0, r2, r1
 800968c:	42a0      	cmp	r0, r4
 800968e:	d10b      	bne.n	80096a8 <_free_r+0x6c>
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	4401      	add	r1, r0
 8009694:	1850      	adds	r0, r2, r1
 8009696:	4283      	cmp	r3, r0
 8009698:	6011      	str	r1, [r2, #0]
 800969a:	d1e0      	bne.n	800965e <_free_r+0x22>
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	4401      	add	r1, r0
 80096a2:	6011      	str	r1, [r2, #0]
 80096a4:	6053      	str	r3, [r2, #4]
 80096a6:	e7da      	b.n	800965e <_free_r+0x22>
 80096a8:	d902      	bls.n	80096b0 <_free_r+0x74>
 80096aa:	230c      	movs	r3, #12
 80096ac:	602b      	str	r3, [r5, #0]
 80096ae:	e7d6      	b.n	800965e <_free_r+0x22>
 80096b0:	6820      	ldr	r0, [r4, #0]
 80096b2:	1821      	adds	r1, r4, r0
 80096b4:	428b      	cmp	r3, r1
 80096b6:	bf01      	itttt	eq
 80096b8:	6819      	ldreq	r1, [r3, #0]
 80096ba:	685b      	ldreq	r3, [r3, #4]
 80096bc:	1809      	addeq	r1, r1, r0
 80096be:	6021      	streq	r1, [r4, #0]
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	6054      	str	r4, [r2, #4]
 80096c4:	e7cb      	b.n	800965e <_free_r+0x22>
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	200002e0 	.word	0x200002e0

080096cc <sbrk_aligned>:
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	4e0e      	ldr	r6, [pc, #56]	; (8009708 <sbrk_aligned+0x3c>)
 80096d0:	460c      	mov	r4, r1
 80096d2:	6831      	ldr	r1, [r6, #0]
 80096d4:	4605      	mov	r5, r0
 80096d6:	b911      	cbnz	r1, 80096de <sbrk_aligned+0x12>
 80096d8:	f000 f9e8 	bl	8009aac <_sbrk_r>
 80096dc:	6030      	str	r0, [r6, #0]
 80096de:	4621      	mov	r1, r4
 80096e0:	4628      	mov	r0, r5
 80096e2:	f000 f9e3 	bl	8009aac <_sbrk_r>
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	d00a      	beq.n	8009700 <sbrk_aligned+0x34>
 80096ea:	1cc4      	adds	r4, r0, #3
 80096ec:	f024 0403 	bic.w	r4, r4, #3
 80096f0:	42a0      	cmp	r0, r4
 80096f2:	d007      	beq.n	8009704 <sbrk_aligned+0x38>
 80096f4:	1a21      	subs	r1, r4, r0
 80096f6:	4628      	mov	r0, r5
 80096f8:	f000 f9d8 	bl	8009aac <_sbrk_r>
 80096fc:	3001      	adds	r0, #1
 80096fe:	d101      	bne.n	8009704 <sbrk_aligned+0x38>
 8009700:	f04f 34ff 	mov.w	r4, #4294967295
 8009704:	4620      	mov	r0, r4
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	200002e4 	.word	0x200002e4

0800970c <_malloc_r>:
 800970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009710:	1ccd      	adds	r5, r1, #3
 8009712:	f025 0503 	bic.w	r5, r5, #3
 8009716:	3508      	adds	r5, #8
 8009718:	2d0c      	cmp	r5, #12
 800971a:	bf38      	it	cc
 800971c:	250c      	movcc	r5, #12
 800971e:	2d00      	cmp	r5, #0
 8009720:	4607      	mov	r7, r0
 8009722:	db01      	blt.n	8009728 <_malloc_r+0x1c>
 8009724:	42a9      	cmp	r1, r5
 8009726:	d905      	bls.n	8009734 <_malloc_r+0x28>
 8009728:	230c      	movs	r3, #12
 800972a:	2600      	movs	r6, #0
 800972c:	603b      	str	r3, [r7, #0]
 800972e:	4630      	mov	r0, r6
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009734:	4e2e      	ldr	r6, [pc, #184]	; (80097f0 <_malloc_r+0xe4>)
 8009736:	f000 fa25 	bl	8009b84 <__malloc_lock>
 800973a:	6833      	ldr	r3, [r6, #0]
 800973c:	461c      	mov	r4, r3
 800973e:	bb34      	cbnz	r4, 800978e <_malloc_r+0x82>
 8009740:	4629      	mov	r1, r5
 8009742:	4638      	mov	r0, r7
 8009744:	f7ff ffc2 	bl	80096cc <sbrk_aligned>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	4604      	mov	r4, r0
 800974c:	d14d      	bne.n	80097ea <_malloc_r+0xde>
 800974e:	6834      	ldr	r4, [r6, #0]
 8009750:	4626      	mov	r6, r4
 8009752:	2e00      	cmp	r6, #0
 8009754:	d140      	bne.n	80097d8 <_malloc_r+0xcc>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	4631      	mov	r1, r6
 800975a:	4638      	mov	r0, r7
 800975c:	eb04 0803 	add.w	r8, r4, r3
 8009760:	f000 f9a4 	bl	8009aac <_sbrk_r>
 8009764:	4580      	cmp	r8, r0
 8009766:	d13a      	bne.n	80097de <_malloc_r+0xd2>
 8009768:	6821      	ldr	r1, [r4, #0]
 800976a:	3503      	adds	r5, #3
 800976c:	1a6d      	subs	r5, r5, r1
 800976e:	f025 0503 	bic.w	r5, r5, #3
 8009772:	3508      	adds	r5, #8
 8009774:	2d0c      	cmp	r5, #12
 8009776:	bf38      	it	cc
 8009778:	250c      	movcc	r5, #12
 800977a:	4638      	mov	r0, r7
 800977c:	4629      	mov	r1, r5
 800977e:	f7ff ffa5 	bl	80096cc <sbrk_aligned>
 8009782:	3001      	adds	r0, #1
 8009784:	d02b      	beq.n	80097de <_malloc_r+0xd2>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	442b      	add	r3, r5
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	e00e      	b.n	80097ac <_malloc_r+0xa0>
 800978e:	6822      	ldr	r2, [r4, #0]
 8009790:	1b52      	subs	r2, r2, r5
 8009792:	d41e      	bmi.n	80097d2 <_malloc_r+0xc6>
 8009794:	2a0b      	cmp	r2, #11
 8009796:	d916      	bls.n	80097c6 <_malloc_r+0xba>
 8009798:	1961      	adds	r1, r4, r5
 800979a:	42a3      	cmp	r3, r4
 800979c:	6025      	str	r5, [r4, #0]
 800979e:	bf18      	it	ne
 80097a0:	6059      	strne	r1, [r3, #4]
 80097a2:	6863      	ldr	r3, [r4, #4]
 80097a4:	bf08      	it	eq
 80097a6:	6031      	streq	r1, [r6, #0]
 80097a8:	5162      	str	r2, [r4, r5]
 80097aa:	604b      	str	r3, [r1, #4]
 80097ac:	4638      	mov	r0, r7
 80097ae:	f104 060b 	add.w	r6, r4, #11
 80097b2:	f000 f9ed 	bl	8009b90 <__malloc_unlock>
 80097b6:	f026 0607 	bic.w	r6, r6, #7
 80097ba:	1d23      	adds	r3, r4, #4
 80097bc:	1af2      	subs	r2, r6, r3
 80097be:	d0b6      	beq.n	800972e <_malloc_r+0x22>
 80097c0:	1b9b      	subs	r3, r3, r6
 80097c2:	50a3      	str	r3, [r4, r2]
 80097c4:	e7b3      	b.n	800972e <_malloc_r+0x22>
 80097c6:	6862      	ldr	r2, [r4, #4]
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	bf0c      	ite	eq
 80097cc:	6032      	streq	r2, [r6, #0]
 80097ce:	605a      	strne	r2, [r3, #4]
 80097d0:	e7ec      	b.n	80097ac <_malloc_r+0xa0>
 80097d2:	4623      	mov	r3, r4
 80097d4:	6864      	ldr	r4, [r4, #4]
 80097d6:	e7b2      	b.n	800973e <_malloc_r+0x32>
 80097d8:	4634      	mov	r4, r6
 80097da:	6876      	ldr	r6, [r6, #4]
 80097dc:	e7b9      	b.n	8009752 <_malloc_r+0x46>
 80097de:	230c      	movs	r3, #12
 80097e0:	4638      	mov	r0, r7
 80097e2:	603b      	str	r3, [r7, #0]
 80097e4:	f000 f9d4 	bl	8009b90 <__malloc_unlock>
 80097e8:	e7a1      	b.n	800972e <_malloc_r+0x22>
 80097ea:	6025      	str	r5, [r4, #0]
 80097ec:	e7de      	b.n	80097ac <_malloc_r+0xa0>
 80097ee:	bf00      	nop
 80097f0:	200002e0 	.word	0x200002e0

080097f4 <__ssputs_r>:
 80097f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f8:	688e      	ldr	r6, [r1, #8]
 80097fa:	4682      	mov	sl, r0
 80097fc:	429e      	cmp	r6, r3
 80097fe:	460c      	mov	r4, r1
 8009800:	4690      	mov	r8, r2
 8009802:	461f      	mov	r7, r3
 8009804:	d838      	bhi.n	8009878 <__ssputs_r+0x84>
 8009806:	898a      	ldrh	r2, [r1, #12]
 8009808:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800980c:	d032      	beq.n	8009874 <__ssputs_r+0x80>
 800980e:	6825      	ldr	r5, [r4, #0]
 8009810:	6909      	ldr	r1, [r1, #16]
 8009812:	3301      	adds	r3, #1
 8009814:	eba5 0901 	sub.w	r9, r5, r1
 8009818:	6965      	ldr	r5, [r4, #20]
 800981a:	444b      	add	r3, r9
 800981c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009820:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009824:	106d      	asrs	r5, r5, #1
 8009826:	429d      	cmp	r5, r3
 8009828:	bf38      	it	cc
 800982a:	461d      	movcc	r5, r3
 800982c:	0553      	lsls	r3, r2, #21
 800982e:	d531      	bpl.n	8009894 <__ssputs_r+0xa0>
 8009830:	4629      	mov	r1, r5
 8009832:	f7ff ff6b 	bl	800970c <_malloc_r>
 8009836:	4606      	mov	r6, r0
 8009838:	b950      	cbnz	r0, 8009850 <__ssputs_r+0x5c>
 800983a:	230c      	movs	r3, #12
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	f8ca 3000 	str.w	r3, [sl]
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800984a:	81a3      	strh	r3, [r4, #12]
 800984c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009850:	464a      	mov	r2, r9
 8009852:	6921      	ldr	r1, [r4, #16]
 8009854:	f7fe f830 	bl	80078b8 <memcpy>
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800985e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009862:	81a3      	strh	r3, [r4, #12]
 8009864:	6126      	str	r6, [r4, #16]
 8009866:	444e      	add	r6, r9
 8009868:	6026      	str	r6, [r4, #0]
 800986a:	463e      	mov	r6, r7
 800986c:	6165      	str	r5, [r4, #20]
 800986e:	eba5 0509 	sub.w	r5, r5, r9
 8009872:	60a5      	str	r5, [r4, #8]
 8009874:	42be      	cmp	r6, r7
 8009876:	d900      	bls.n	800987a <__ssputs_r+0x86>
 8009878:	463e      	mov	r6, r7
 800987a:	4632      	mov	r2, r6
 800987c:	4641      	mov	r1, r8
 800987e:	6820      	ldr	r0, [r4, #0]
 8009880:	f000 f966 	bl	8009b50 <memmove>
 8009884:	68a3      	ldr	r3, [r4, #8]
 8009886:	2000      	movs	r0, #0
 8009888:	1b9b      	subs	r3, r3, r6
 800988a:	60a3      	str	r3, [r4, #8]
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	4433      	add	r3, r6
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	e7db      	b.n	800984c <__ssputs_r+0x58>
 8009894:	462a      	mov	r2, r5
 8009896:	f000 f981 	bl	8009b9c <_realloc_r>
 800989a:	4606      	mov	r6, r0
 800989c:	2800      	cmp	r0, #0
 800989e:	d1e1      	bne.n	8009864 <__ssputs_r+0x70>
 80098a0:	4650      	mov	r0, sl
 80098a2:	6921      	ldr	r1, [r4, #16]
 80098a4:	f7ff feca 	bl	800963c <_free_r>
 80098a8:	e7c7      	b.n	800983a <__ssputs_r+0x46>
	...

080098ac <_svfiprintf_r>:
 80098ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b0:	4698      	mov	r8, r3
 80098b2:	898b      	ldrh	r3, [r1, #12]
 80098b4:	4607      	mov	r7, r0
 80098b6:	061b      	lsls	r3, r3, #24
 80098b8:	460d      	mov	r5, r1
 80098ba:	4614      	mov	r4, r2
 80098bc:	b09d      	sub	sp, #116	; 0x74
 80098be:	d50e      	bpl.n	80098de <_svfiprintf_r+0x32>
 80098c0:	690b      	ldr	r3, [r1, #16]
 80098c2:	b963      	cbnz	r3, 80098de <_svfiprintf_r+0x32>
 80098c4:	2140      	movs	r1, #64	; 0x40
 80098c6:	f7ff ff21 	bl	800970c <_malloc_r>
 80098ca:	6028      	str	r0, [r5, #0]
 80098cc:	6128      	str	r0, [r5, #16]
 80098ce:	b920      	cbnz	r0, 80098da <_svfiprintf_r+0x2e>
 80098d0:	230c      	movs	r3, #12
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	e0d1      	b.n	8009a7e <_svfiprintf_r+0x1d2>
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	616b      	str	r3, [r5, #20]
 80098de:	2300      	movs	r3, #0
 80098e0:	9309      	str	r3, [sp, #36]	; 0x24
 80098e2:	2320      	movs	r3, #32
 80098e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098e8:	2330      	movs	r3, #48	; 0x30
 80098ea:	f04f 0901 	mov.w	r9, #1
 80098ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80098f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a98 <_svfiprintf_r+0x1ec>
 80098f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098fa:	4623      	mov	r3, r4
 80098fc:	469a      	mov	sl, r3
 80098fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009902:	b10a      	cbz	r2, 8009908 <_svfiprintf_r+0x5c>
 8009904:	2a25      	cmp	r2, #37	; 0x25
 8009906:	d1f9      	bne.n	80098fc <_svfiprintf_r+0x50>
 8009908:	ebba 0b04 	subs.w	fp, sl, r4
 800990c:	d00b      	beq.n	8009926 <_svfiprintf_r+0x7a>
 800990e:	465b      	mov	r3, fp
 8009910:	4622      	mov	r2, r4
 8009912:	4629      	mov	r1, r5
 8009914:	4638      	mov	r0, r7
 8009916:	f7ff ff6d 	bl	80097f4 <__ssputs_r>
 800991a:	3001      	adds	r0, #1
 800991c:	f000 80aa 	beq.w	8009a74 <_svfiprintf_r+0x1c8>
 8009920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009922:	445a      	add	r2, fp
 8009924:	9209      	str	r2, [sp, #36]	; 0x24
 8009926:	f89a 3000 	ldrb.w	r3, [sl]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 80a2 	beq.w	8009a74 <_svfiprintf_r+0x1c8>
 8009930:	2300      	movs	r3, #0
 8009932:	f04f 32ff 	mov.w	r2, #4294967295
 8009936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800993a:	f10a 0a01 	add.w	sl, sl, #1
 800993e:	9304      	str	r3, [sp, #16]
 8009940:	9307      	str	r3, [sp, #28]
 8009942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009946:	931a      	str	r3, [sp, #104]	; 0x68
 8009948:	4654      	mov	r4, sl
 800994a:	2205      	movs	r2, #5
 800994c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009950:	4851      	ldr	r0, [pc, #324]	; (8009a98 <_svfiprintf_r+0x1ec>)
 8009952:	f7ff facf 	bl	8008ef4 <memchr>
 8009956:	9a04      	ldr	r2, [sp, #16]
 8009958:	b9d8      	cbnz	r0, 8009992 <_svfiprintf_r+0xe6>
 800995a:	06d0      	lsls	r0, r2, #27
 800995c:	bf44      	itt	mi
 800995e:	2320      	movmi	r3, #32
 8009960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009964:	0711      	lsls	r1, r2, #28
 8009966:	bf44      	itt	mi
 8009968:	232b      	movmi	r3, #43	; 0x2b
 800996a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800996e:	f89a 3000 	ldrb.w	r3, [sl]
 8009972:	2b2a      	cmp	r3, #42	; 0x2a
 8009974:	d015      	beq.n	80099a2 <_svfiprintf_r+0xf6>
 8009976:	4654      	mov	r4, sl
 8009978:	2000      	movs	r0, #0
 800997a:	f04f 0c0a 	mov.w	ip, #10
 800997e:	9a07      	ldr	r2, [sp, #28]
 8009980:	4621      	mov	r1, r4
 8009982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009986:	3b30      	subs	r3, #48	; 0x30
 8009988:	2b09      	cmp	r3, #9
 800998a:	d94e      	bls.n	8009a2a <_svfiprintf_r+0x17e>
 800998c:	b1b0      	cbz	r0, 80099bc <_svfiprintf_r+0x110>
 800998e:	9207      	str	r2, [sp, #28]
 8009990:	e014      	b.n	80099bc <_svfiprintf_r+0x110>
 8009992:	eba0 0308 	sub.w	r3, r0, r8
 8009996:	fa09 f303 	lsl.w	r3, r9, r3
 800999a:	4313      	orrs	r3, r2
 800999c:	46a2      	mov	sl, r4
 800999e:	9304      	str	r3, [sp, #16]
 80099a0:	e7d2      	b.n	8009948 <_svfiprintf_r+0x9c>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	1d19      	adds	r1, r3, #4
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	9103      	str	r1, [sp, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	bfbb      	ittet	lt
 80099ae:	425b      	neglt	r3, r3
 80099b0:	f042 0202 	orrlt.w	r2, r2, #2
 80099b4:	9307      	strge	r3, [sp, #28]
 80099b6:	9307      	strlt	r3, [sp, #28]
 80099b8:	bfb8      	it	lt
 80099ba:	9204      	strlt	r2, [sp, #16]
 80099bc:	7823      	ldrb	r3, [r4, #0]
 80099be:	2b2e      	cmp	r3, #46	; 0x2e
 80099c0:	d10c      	bne.n	80099dc <_svfiprintf_r+0x130>
 80099c2:	7863      	ldrb	r3, [r4, #1]
 80099c4:	2b2a      	cmp	r3, #42	; 0x2a
 80099c6:	d135      	bne.n	8009a34 <_svfiprintf_r+0x188>
 80099c8:	9b03      	ldr	r3, [sp, #12]
 80099ca:	3402      	adds	r4, #2
 80099cc:	1d1a      	adds	r2, r3, #4
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	9203      	str	r2, [sp, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	bfb8      	it	lt
 80099d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80099da:	9305      	str	r3, [sp, #20]
 80099dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009a9c <_svfiprintf_r+0x1f0>
 80099e0:	2203      	movs	r2, #3
 80099e2:	4650      	mov	r0, sl
 80099e4:	7821      	ldrb	r1, [r4, #0]
 80099e6:	f7ff fa85 	bl	8008ef4 <memchr>
 80099ea:	b140      	cbz	r0, 80099fe <_svfiprintf_r+0x152>
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	eba0 000a 	sub.w	r0, r0, sl
 80099f2:	fa03 f000 	lsl.w	r0, r3, r0
 80099f6:	9b04      	ldr	r3, [sp, #16]
 80099f8:	3401      	adds	r4, #1
 80099fa:	4303      	orrs	r3, r0
 80099fc:	9304      	str	r3, [sp, #16]
 80099fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a02:	2206      	movs	r2, #6
 8009a04:	4826      	ldr	r0, [pc, #152]	; (8009aa0 <_svfiprintf_r+0x1f4>)
 8009a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a0a:	f7ff fa73 	bl	8008ef4 <memchr>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d038      	beq.n	8009a84 <_svfiprintf_r+0x1d8>
 8009a12:	4b24      	ldr	r3, [pc, #144]	; (8009aa4 <_svfiprintf_r+0x1f8>)
 8009a14:	bb1b      	cbnz	r3, 8009a5e <_svfiprintf_r+0x1b2>
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	3307      	adds	r3, #7
 8009a1a:	f023 0307 	bic.w	r3, r3, #7
 8009a1e:	3308      	adds	r3, #8
 8009a20:	9303      	str	r3, [sp, #12]
 8009a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a24:	4433      	add	r3, r6
 8009a26:	9309      	str	r3, [sp, #36]	; 0x24
 8009a28:	e767      	b.n	80098fa <_svfiprintf_r+0x4e>
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	2001      	movs	r0, #1
 8009a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a32:	e7a5      	b.n	8009980 <_svfiprintf_r+0xd4>
 8009a34:	2300      	movs	r3, #0
 8009a36:	f04f 0c0a 	mov.w	ip, #10
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	3401      	adds	r4, #1
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	4620      	mov	r0, r4
 8009a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a46:	3a30      	subs	r2, #48	; 0x30
 8009a48:	2a09      	cmp	r2, #9
 8009a4a:	d903      	bls.n	8009a54 <_svfiprintf_r+0x1a8>
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0c5      	beq.n	80099dc <_svfiprintf_r+0x130>
 8009a50:	9105      	str	r1, [sp, #20]
 8009a52:	e7c3      	b.n	80099dc <_svfiprintf_r+0x130>
 8009a54:	4604      	mov	r4, r0
 8009a56:	2301      	movs	r3, #1
 8009a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a5c:	e7f0      	b.n	8009a40 <_svfiprintf_r+0x194>
 8009a5e:	ab03      	add	r3, sp, #12
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	462a      	mov	r2, r5
 8009a64:	4638      	mov	r0, r7
 8009a66:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <_svfiprintf_r+0x1fc>)
 8009a68:	a904      	add	r1, sp, #16
 8009a6a:	f7fd ffd9 	bl	8007a20 <_printf_float>
 8009a6e:	1c42      	adds	r2, r0, #1
 8009a70:	4606      	mov	r6, r0
 8009a72:	d1d6      	bne.n	8009a22 <_svfiprintf_r+0x176>
 8009a74:	89ab      	ldrh	r3, [r5, #12]
 8009a76:	065b      	lsls	r3, r3, #25
 8009a78:	f53f af2c 	bmi.w	80098d4 <_svfiprintf_r+0x28>
 8009a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a7e:	b01d      	add	sp, #116	; 0x74
 8009a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a84:	ab03      	add	r3, sp, #12
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	462a      	mov	r2, r5
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <_svfiprintf_r+0x1fc>)
 8009a8e:	a904      	add	r1, sp, #16
 8009a90:	f7fe fa62 	bl	8007f58 <_printf_i>
 8009a94:	e7eb      	b.n	8009a6e <_svfiprintf_r+0x1c2>
 8009a96:	bf00      	nop
 8009a98:	0800b6ec 	.word	0x0800b6ec
 8009a9c:	0800b6f2 	.word	0x0800b6f2
 8009aa0:	0800b6f6 	.word	0x0800b6f6
 8009aa4:	08007a21 	.word	0x08007a21
 8009aa8:	080097f5 	.word	0x080097f5

08009aac <_sbrk_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	2300      	movs	r3, #0
 8009ab0:	4d05      	ldr	r5, [pc, #20]	; (8009ac8 <_sbrk_r+0x1c>)
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	f7f9 f91a 	bl	8002cf0 <_sbrk>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_sbrk_r+0x1a>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_sbrk_r+0x1a>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	200002e8 	.word	0x200002e8

08009acc <__assert_func>:
 8009acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ace:	4614      	mov	r4, r2
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <__assert_func+0x2c>)
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68d8      	ldr	r0, [r3, #12]
 8009ada:	b14c      	cbz	r4, 8009af0 <__assert_func+0x24>
 8009adc:	4b07      	ldr	r3, [pc, #28]	; (8009afc <__assert_func+0x30>)
 8009ade:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ae2:	9100      	str	r1, [sp, #0]
 8009ae4:	462b      	mov	r3, r5
 8009ae6:	4906      	ldr	r1, [pc, #24]	; (8009b00 <__assert_func+0x34>)
 8009ae8:	f000 f80e 	bl	8009b08 <fiprintf>
 8009aec:	f000 faaa 	bl	800a044 <abort>
 8009af0:	4b04      	ldr	r3, [pc, #16]	; (8009b04 <__assert_func+0x38>)
 8009af2:	461c      	mov	r4, r3
 8009af4:	e7f3      	b.n	8009ade <__assert_func+0x12>
 8009af6:	bf00      	nop
 8009af8:	2000000c 	.word	0x2000000c
 8009afc:	0800b6fd 	.word	0x0800b6fd
 8009b00:	0800b70a 	.word	0x0800b70a
 8009b04:	0800b738 	.word	0x0800b738

08009b08 <fiprintf>:
 8009b08:	b40e      	push	{r1, r2, r3}
 8009b0a:	b503      	push	{r0, r1, lr}
 8009b0c:	4601      	mov	r1, r0
 8009b0e:	ab03      	add	r3, sp, #12
 8009b10:	4805      	ldr	r0, [pc, #20]	; (8009b28 <fiprintf+0x20>)
 8009b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b16:	6800      	ldr	r0, [r0, #0]
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	f000 f895 	bl	8009c48 <_vfiprintf_r>
 8009b1e:	b002      	add	sp, #8
 8009b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b24:	b003      	add	sp, #12
 8009b26:	4770      	bx	lr
 8009b28:	2000000c 	.word	0x2000000c

08009b2c <__ascii_mbtowc>:
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	b901      	cbnz	r1, 8009b32 <__ascii_mbtowc+0x6>
 8009b30:	a901      	add	r1, sp, #4
 8009b32:	b142      	cbz	r2, 8009b46 <__ascii_mbtowc+0x1a>
 8009b34:	b14b      	cbz	r3, 8009b4a <__ascii_mbtowc+0x1e>
 8009b36:	7813      	ldrb	r3, [r2, #0]
 8009b38:	600b      	str	r3, [r1, #0]
 8009b3a:	7812      	ldrb	r2, [r2, #0]
 8009b3c:	1e10      	subs	r0, r2, #0
 8009b3e:	bf18      	it	ne
 8009b40:	2001      	movne	r0, #1
 8009b42:	b002      	add	sp, #8
 8009b44:	4770      	bx	lr
 8009b46:	4610      	mov	r0, r2
 8009b48:	e7fb      	b.n	8009b42 <__ascii_mbtowc+0x16>
 8009b4a:	f06f 0001 	mvn.w	r0, #1
 8009b4e:	e7f8      	b.n	8009b42 <__ascii_mbtowc+0x16>

08009b50 <memmove>:
 8009b50:	4288      	cmp	r0, r1
 8009b52:	b510      	push	{r4, lr}
 8009b54:	eb01 0402 	add.w	r4, r1, r2
 8009b58:	d902      	bls.n	8009b60 <memmove+0x10>
 8009b5a:	4284      	cmp	r4, r0
 8009b5c:	4623      	mov	r3, r4
 8009b5e:	d807      	bhi.n	8009b70 <memmove+0x20>
 8009b60:	1e43      	subs	r3, r0, #1
 8009b62:	42a1      	cmp	r1, r4
 8009b64:	d008      	beq.n	8009b78 <memmove+0x28>
 8009b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b6e:	e7f8      	b.n	8009b62 <memmove+0x12>
 8009b70:	4601      	mov	r1, r0
 8009b72:	4402      	add	r2, r0
 8009b74:	428a      	cmp	r2, r1
 8009b76:	d100      	bne.n	8009b7a <memmove+0x2a>
 8009b78:	bd10      	pop	{r4, pc}
 8009b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b82:	e7f7      	b.n	8009b74 <memmove+0x24>

08009b84 <__malloc_lock>:
 8009b84:	4801      	ldr	r0, [pc, #4]	; (8009b8c <__malloc_lock+0x8>)
 8009b86:	f000 bc19 	b.w	800a3bc <__retarget_lock_acquire_recursive>
 8009b8a:	bf00      	nop
 8009b8c:	200002ec 	.word	0x200002ec

08009b90 <__malloc_unlock>:
 8009b90:	4801      	ldr	r0, [pc, #4]	; (8009b98 <__malloc_unlock+0x8>)
 8009b92:	f000 bc14 	b.w	800a3be <__retarget_lock_release_recursive>
 8009b96:	bf00      	nop
 8009b98:	200002ec 	.word	0x200002ec

08009b9c <_realloc_r>:
 8009b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	4614      	mov	r4, r2
 8009ba4:	460e      	mov	r6, r1
 8009ba6:	b921      	cbnz	r1, 8009bb2 <_realloc_r+0x16>
 8009ba8:	4611      	mov	r1, r2
 8009baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bae:	f7ff bdad 	b.w	800970c <_malloc_r>
 8009bb2:	b92a      	cbnz	r2, 8009bc0 <_realloc_r+0x24>
 8009bb4:	f7ff fd42 	bl	800963c <_free_r>
 8009bb8:	4625      	mov	r5, r4
 8009bba:	4628      	mov	r0, r5
 8009bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc0:	f000 fc64 	bl	800a48c <_malloc_usable_size_r>
 8009bc4:	4284      	cmp	r4, r0
 8009bc6:	4607      	mov	r7, r0
 8009bc8:	d802      	bhi.n	8009bd0 <_realloc_r+0x34>
 8009bca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bce:	d812      	bhi.n	8009bf6 <_realloc_r+0x5a>
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	f7ff fd9a 	bl	800970c <_malloc_r>
 8009bd8:	4605      	mov	r5, r0
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d0ed      	beq.n	8009bba <_realloc_r+0x1e>
 8009bde:	42bc      	cmp	r4, r7
 8009be0:	4622      	mov	r2, r4
 8009be2:	4631      	mov	r1, r6
 8009be4:	bf28      	it	cs
 8009be6:	463a      	movcs	r2, r7
 8009be8:	f7fd fe66 	bl	80078b8 <memcpy>
 8009bec:	4631      	mov	r1, r6
 8009bee:	4640      	mov	r0, r8
 8009bf0:	f7ff fd24 	bl	800963c <_free_r>
 8009bf4:	e7e1      	b.n	8009bba <_realloc_r+0x1e>
 8009bf6:	4635      	mov	r5, r6
 8009bf8:	e7df      	b.n	8009bba <_realloc_r+0x1e>

08009bfa <__sfputc_r>:
 8009bfa:	6893      	ldr	r3, [r2, #8]
 8009bfc:	b410      	push	{r4}
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	6093      	str	r3, [r2, #8]
 8009c04:	da07      	bge.n	8009c16 <__sfputc_r+0x1c>
 8009c06:	6994      	ldr	r4, [r2, #24]
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	db01      	blt.n	8009c10 <__sfputc_r+0x16>
 8009c0c:	290a      	cmp	r1, #10
 8009c0e:	d102      	bne.n	8009c16 <__sfputc_r+0x1c>
 8009c10:	bc10      	pop	{r4}
 8009c12:	f000 b949 	b.w	8009ea8 <__swbuf_r>
 8009c16:	6813      	ldr	r3, [r2, #0]
 8009c18:	1c58      	adds	r0, r3, #1
 8009c1a:	6010      	str	r0, [r2, #0]
 8009c1c:	7019      	strb	r1, [r3, #0]
 8009c1e:	4608      	mov	r0, r1
 8009c20:	bc10      	pop	{r4}
 8009c22:	4770      	bx	lr

08009c24 <__sfputs_r>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	4606      	mov	r6, r0
 8009c28:	460f      	mov	r7, r1
 8009c2a:	4614      	mov	r4, r2
 8009c2c:	18d5      	adds	r5, r2, r3
 8009c2e:	42ac      	cmp	r4, r5
 8009c30:	d101      	bne.n	8009c36 <__sfputs_r+0x12>
 8009c32:	2000      	movs	r0, #0
 8009c34:	e007      	b.n	8009c46 <__sfputs_r+0x22>
 8009c36:	463a      	mov	r2, r7
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3e:	f7ff ffdc 	bl	8009bfa <__sfputc_r>
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	d1f3      	bne.n	8009c2e <__sfputs_r+0xa>
 8009c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c48 <_vfiprintf_r>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	460d      	mov	r5, r1
 8009c4e:	4614      	mov	r4, r2
 8009c50:	4698      	mov	r8, r3
 8009c52:	4606      	mov	r6, r0
 8009c54:	b09d      	sub	sp, #116	; 0x74
 8009c56:	b118      	cbz	r0, 8009c60 <_vfiprintf_r+0x18>
 8009c58:	6983      	ldr	r3, [r0, #24]
 8009c5a:	b90b      	cbnz	r3, 8009c60 <_vfiprintf_r+0x18>
 8009c5c:	f000 fb10 	bl	800a280 <__sinit>
 8009c60:	4b89      	ldr	r3, [pc, #548]	; (8009e88 <_vfiprintf_r+0x240>)
 8009c62:	429d      	cmp	r5, r3
 8009c64:	d11b      	bne.n	8009c9e <_vfiprintf_r+0x56>
 8009c66:	6875      	ldr	r5, [r6, #4]
 8009c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c6a:	07d9      	lsls	r1, r3, #31
 8009c6c:	d405      	bmi.n	8009c7a <_vfiprintf_r+0x32>
 8009c6e:	89ab      	ldrh	r3, [r5, #12]
 8009c70:	059a      	lsls	r2, r3, #22
 8009c72:	d402      	bmi.n	8009c7a <_vfiprintf_r+0x32>
 8009c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c76:	f000 fba1 	bl	800a3bc <__retarget_lock_acquire_recursive>
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	071b      	lsls	r3, r3, #28
 8009c7e:	d501      	bpl.n	8009c84 <_vfiprintf_r+0x3c>
 8009c80:	692b      	ldr	r3, [r5, #16]
 8009c82:	b9eb      	cbnz	r3, 8009cc0 <_vfiprintf_r+0x78>
 8009c84:	4629      	mov	r1, r5
 8009c86:	4630      	mov	r0, r6
 8009c88:	f000 f96e 	bl	8009f68 <__swsetup_r>
 8009c8c:	b1c0      	cbz	r0, 8009cc0 <_vfiprintf_r+0x78>
 8009c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c90:	07dc      	lsls	r4, r3, #31
 8009c92:	d50e      	bpl.n	8009cb2 <_vfiprintf_r+0x6a>
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	b01d      	add	sp, #116	; 0x74
 8009c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9e:	4b7b      	ldr	r3, [pc, #492]	; (8009e8c <_vfiprintf_r+0x244>)
 8009ca0:	429d      	cmp	r5, r3
 8009ca2:	d101      	bne.n	8009ca8 <_vfiprintf_r+0x60>
 8009ca4:	68b5      	ldr	r5, [r6, #8]
 8009ca6:	e7df      	b.n	8009c68 <_vfiprintf_r+0x20>
 8009ca8:	4b79      	ldr	r3, [pc, #484]	; (8009e90 <_vfiprintf_r+0x248>)
 8009caa:	429d      	cmp	r5, r3
 8009cac:	bf08      	it	eq
 8009cae:	68f5      	ldreq	r5, [r6, #12]
 8009cb0:	e7da      	b.n	8009c68 <_vfiprintf_r+0x20>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	0598      	lsls	r0, r3, #22
 8009cb6:	d4ed      	bmi.n	8009c94 <_vfiprintf_r+0x4c>
 8009cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cba:	f000 fb80 	bl	800a3be <__retarget_lock_release_recursive>
 8009cbe:	e7e9      	b.n	8009c94 <_vfiprintf_r+0x4c>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc4:	2320      	movs	r3, #32
 8009cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cca:	2330      	movs	r3, #48	; 0x30
 8009ccc:	f04f 0901 	mov.w	r9, #1
 8009cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009e94 <_vfiprintf_r+0x24c>
 8009cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cdc:	4623      	mov	r3, r4
 8009cde:	469a      	mov	sl, r3
 8009ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ce4:	b10a      	cbz	r2, 8009cea <_vfiprintf_r+0xa2>
 8009ce6:	2a25      	cmp	r2, #37	; 0x25
 8009ce8:	d1f9      	bne.n	8009cde <_vfiprintf_r+0x96>
 8009cea:	ebba 0b04 	subs.w	fp, sl, r4
 8009cee:	d00b      	beq.n	8009d08 <_vfiprintf_r+0xc0>
 8009cf0:	465b      	mov	r3, fp
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff ff94 	bl	8009c24 <__sfputs_r>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	f000 80aa 	beq.w	8009e56 <_vfiprintf_r+0x20e>
 8009d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d04:	445a      	add	r2, fp
 8009d06:	9209      	str	r2, [sp, #36]	; 0x24
 8009d08:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 80a2 	beq.w	8009e56 <_vfiprintf_r+0x20e>
 8009d12:	2300      	movs	r3, #0
 8009d14:	f04f 32ff 	mov.w	r2, #4294967295
 8009d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d1c:	f10a 0a01 	add.w	sl, sl, #1
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d28:	931a      	str	r3, [sp, #104]	; 0x68
 8009d2a:	4654      	mov	r4, sl
 8009d2c:	2205      	movs	r2, #5
 8009d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d32:	4858      	ldr	r0, [pc, #352]	; (8009e94 <_vfiprintf_r+0x24c>)
 8009d34:	f7ff f8de 	bl	8008ef4 <memchr>
 8009d38:	9a04      	ldr	r2, [sp, #16]
 8009d3a:	b9d8      	cbnz	r0, 8009d74 <_vfiprintf_r+0x12c>
 8009d3c:	06d1      	lsls	r1, r2, #27
 8009d3e:	bf44      	itt	mi
 8009d40:	2320      	movmi	r3, #32
 8009d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d46:	0713      	lsls	r3, r2, #28
 8009d48:	bf44      	itt	mi
 8009d4a:	232b      	movmi	r3, #43	; 0x2b
 8009d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d50:	f89a 3000 	ldrb.w	r3, [sl]
 8009d54:	2b2a      	cmp	r3, #42	; 0x2a
 8009d56:	d015      	beq.n	8009d84 <_vfiprintf_r+0x13c>
 8009d58:	4654      	mov	r4, sl
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f04f 0c0a 	mov.w	ip, #10
 8009d60:	9a07      	ldr	r2, [sp, #28]
 8009d62:	4621      	mov	r1, r4
 8009d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d68:	3b30      	subs	r3, #48	; 0x30
 8009d6a:	2b09      	cmp	r3, #9
 8009d6c:	d94e      	bls.n	8009e0c <_vfiprintf_r+0x1c4>
 8009d6e:	b1b0      	cbz	r0, 8009d9e <_vfiprintf_r+0x156>
 8009d70:	9207      	str	r2, [sp, #28]
 8009d72:	e014      	b.n	8009d9e <_vfiprintf_r+0x156>
 8009d74:	eba0 0308 	sub.w	r3, r0, r8
 8009d78:	fa09 f303 	lsl.w	r3, r9, r3
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	46a2      	mov	sl, r4
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	e7d2      	b.n	8009d2a <_vfiprintf_r+0xe2>
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	1d19      	adds	r1, r3, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	9103      	str	r1, [sp, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bfbb      	ittet	lt
 8009d90:	425b      	neglt	r3, r3
 8009d92:	f042 0202 	orrlt.w	r2, r2, #2
 8009d96:	9307      	strge	r3, [sp, #28]
 8009d98:	9307      	strlt	r3, [sp, #28]
 8009d9a:	bfb8      	it	lt
 8009d9c:	9204      	strlt	r2, [sp, #16]
 8009d9e:	7823      	ldrb	r3, [r4, #0]
 8009da0:	2b2e      	cmp	r3, #46	; 0x2e
 8009da2:	d10c      	bne.n	8009dbe <_vfiprintf_r+0x176>
 8009da4:	7863      	ldrb	r3, [r4, #1]
 8009da6:	2b2a      	cmp	r3, #42	; 0x2a
 8009da8:	d135      	bne.n	8009e16 <_vfiprintf_r+0x1ce>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	3402      	adds	r4, #2
 8009dae:	1d1a      	adds	r2, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	9203      	str	r2, [sp, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfb8      	it	lt
 8009db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dbc:	9305      	str	r3, [sp, #20]
 8009dbe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009e98 <_vfiprintf_r+0x250>
 8009dc2:	2203      	movs	r2, #3
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	7821      	ldrb	r1, [r4, #0]
 8009dc8:	f7ff f894 	bl	8008ef4 <memchr>
 8009dcc:	b140      	cbz	r0, 8009de0 <_vfiprintf_r+0x198>
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	eba0 000a 	sub.w	r0, r0, sl
 8009dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8009dd8:	9b04      	ldr	r3, [sp, #16]
 8009dda:	3401      	adds	r4, #1
 8009ddc:	4303      	orrs	r3, r0
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de4:	2206      	movs	r2, #6
 8009de6:	482d      	ldr	r0, [pc, #180]	; (8009e9c <_vfiprintf_r+0x254>)
 8009de8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dec:	f7ff f882 	bl	8008ef4 <memchr>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d03f      	beq.n	8009e74 <_vfiprintf_r+0x22c>
 8009df4:	4b2a      	ldr	r3, [pc, #168]	; (8009ea0 <_vfiprintf_r+0x258>)
 8009df6:	bb1b      	cbnz	r3, 8009e40 <_vfiprintf_r+0x1f8>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	3307      	adds	r3, #7
 8009dfc:	f023 0307 	bic.w	r3, r3, #7
 8009e00:	3308      	adds	r3, #8
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e06:	443b      	add	r3, r7
 8009e08:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0a:	e767      	b.n	8009cdc <_vfiprintf_r+0x94>
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	2001      	movs	r0, #1
 8009e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e14:	e7a5      	b.n	8009d62 <_vfiprintf_r+0x11a>
 8009e16:	2300      	movs	r3, #0
 8009e18:	f04f 0c0a 	mov.w	ip, #10
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	3401      	adds	r4, #1
 8009e20:	9305      	str	r3, [sp, #20]
 8009e22:	4620      	mov	r0, r4
 8009e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e28:	3a30      	subs	r2, #48	; 0x30
 8009e2a:	2a09      	cmp	r2, #9
 8009e2c:	d903      	bls.n	8009e36 <_vfiprintf_r+0x1ee>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0c5      	beq.n	8009dbe <_vfiprintf_r+0x176>
 8009e32:	9105      	str	r1, [sp, #20]
 8009e34:	e7c3      	b.n	8009dbe <_vfiprintf_r+0x176>
 8009e36:	4604      	mov	r4, r0
 8009e38:	2301      	movs	r3, #1
 8009e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e3e:	e7f0      	b.n	8009e22 <_vfiprintf_r+0x1da>
 8009e40:	ab03      	add	r3, sp, #12
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	462a      	mov	r2, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	4b16      	ldr	r3, [pc, #88]	; (8009ea4 <_vfiprintf_r+0x25c>)
 8009e4a:	a904      	add	r1, sp, #16
 8009e4c:	f7fd fde8 	bl	8007a20 <_printf_float>
 8009e50:	4607      	mov	r7, r0
 8009e52:	1c78      	adds	r0, r7, #1
 8009e54:	d1d6      	bne.n	8009e04 <_vfiprintf_r+0x1bc>
 8009e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e58:	07d9      	lsls	r1, r3, #31
 8009e5a:	d405      	bmi.n	8009e68 <_vfiprintf_r+0x220>
 8009e5c:	89ab      	ldrh	r3, [r5, #12]
 8009e5e:	059a      	lsls	r2, r3, #22
 8009e60:	d402      	bmi.n	8009e68 <_vfiprintf_r+0x220>
 8009e62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e64:	f000 faab 	bl	800a3be <__retarget_lock_release_recursive>
 8009e68:	89ab      	ldrh	r3, [r5, #12]
 8009e6a:	065b      	lsls	r3, r3, #25
 8009e6c:	f53f af12 	bmi.w	8009c94 <_vfiprintf_r+0x4c>
 8009e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e72:	e711      	b.n	8009c98 <_vfiprintf_r+0x50>
 8009e74:	ab03      	add	r3, sp, #12
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	462a      	mov	r2, r5
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <_vfiprintf_r+0x25c>)
 8009e7e:	a904      	add	r1, sp, #16
 8009e80:	f7fe f86a 	bl	8007f58 <_printf_i>
 8009e84:	e7e4      	b.n	8009e50 <_vfiprintf_r+0x208>
 8009e86:	bf00      	nop
 8009e88:	0800b864 	.word	0x0800b864
 8009e8c:	0800b884 	.word	0x0800b884
 8009e90:	0800b844 	.word	0x0800b844
 8009e94:	0800b6ec 	.word	0x0800b6ec
 8009e98:	0800b6f2 	.word	0x0800b6f2
 8009e9c:	0800b6f6 	.word	0x0800b6f6
 8009ea0:	08007a21 	.word	0x08007a21
 8009ea4:	08009c25 	.word	0x08009c25

08009ea8 <__swbuf_r>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	460e      	mov	r6, r1
 8009eac:	4614      	mov	r4, r2
 8009eae:	4605      	mov	r5, r0
 8009eb0:	b118      	cbz	r0, 8009eba <__swbuf_r+0x12>
 8009eb2:	6983      	ldr	r3, [r0, #24]
 8009eb4:	b90b      	cbnz	r3, 8009eba <__swbuf_r+0x12>
 8009eb6:	f000 f9e3 	bl	800a280 <__sinit>
 8009eba:	4b21      	ldr	r3, [pc, #132]	; (8009f40 <__swbuf_r+0x98>)
 8009ebc:	429c      	cmp	r4, r3
 8009ebe:	d12b      	bne.n	8009f18 <__swbuf_r+0x70>
 8009ec0:	686c      	ldr	r4, [r5, #4]
 8009ec2:	69a3      	ldr	r3, [r4, #24]
 8009ec4:	60a3      	str	r3, [r4, #8]
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	071a      	lsls	r2, r3, #28
 8009eca:	d52f      	bpl.n	8009f2c <__swbuf_r+0x84>
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	b36b      	cbz	r3, 8009f2c <__swbuf_r+0x84>
 8009ed0:	6923      	ldr	r3, [r4, #16]
 8009ed2:	6820      	ldr	r0, [r4, #0]
 8009ed4:	b2f6      	uxtb	r6, r6
 8009ed6:	1ac0      	subs	r0, r0, r3
 8009ed8:	6963      	ldr	r3, [r4, #20]
 8009eda:	4637      	mov	r7, r6
 8009edc:	4283      	cmp	r3, r0
 8009ede:	dc04      	bgt.n	8009eea <__swbuf_r+0x42>
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	f000 f938 	bl	800a158 <_fflush_r>
 8009ee8:	bb30      	cbnz	r0, 8009f38 <__swbuf_r+0x90>
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	3001      	adds	r0, #1
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	60a3      	str	r3, [r4, #8]
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	1c5a      	adds	r2, r3, #1
 8009ef6:	6022      	str	r2, [r4, #0]
 8009ef8:	701e      	strb	r6, [r3, #0]
 8009efa:	6963      	ldr	r3, [r4, #20]
 8009efc:	4283      	cmp	r3, r0
 8009efe:	d004      	beq.n	8009f0a <__swbuf_r+0x62>
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	07db      	lsls	r3, r3, #31
 8009f04:	d506      	bpl.n	8009f14 <__swbuf_r+0x6c>
 8009f06:	2e0a      	cmp	r6, #10
 8009f08:	d104      	bne.n	8009f14 <__swbuf_r+0x6c>
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f000 f923 	bl	800a158 <_fflush_r>
 8009f12:	b988      	cbnz	r0, 8009f38 <__swbuf_r+0x90>
 8009f14:	4638      	mov	r0, r7
 8009f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f18:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <__swbuf_r+0x9c>)
 8009f1a:	429c      	cmp	r4, r3
 8009f1c:	d101      	bne.n	8009f22 <__swbuf_r+0x7a>
 8009f1e:	68ac      	ldr	r4, [r5, #8]
 8009f20:	e7cf      	b.n	8009ec2 <__swbuf_r+0x1a>
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <__swbuf_r+0xa0>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	bf08      	it	eq
 8009f28:	68ec      	ldreq	r4, [r5, #12]
 8009f2a:	e7ca      	b.n	8009ec2 <__swbuf_r+0x1a>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	4628      	mov	r0, r5
 8009f30:	f000 f81a 	bl	8009f68 <__swsetup_r>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d0cb      	beq.n	8009ed0 <__swbuf_r+0x28>
 8009f38:	f04f 37ff 	mov.w	r7, #4294967295
 8009f3c:	e7ea      	b.n	8009f14 <__swbuf_r+0x6c>
 8009f3e:	bf00      	nop
 8009f40:	0800b864 	.word	0x0800b864
 8009f44:	0800b884 	.word	0x0800b884
 8009f48:	0800b844 	.word	0x0800b844

08009f4c <__ascii_wctomb>:
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	4608      	mov	r0, r1
 8009f50:	b141      	cbz	r1, 8009f64 <__ascii_wctomb+0x18>
 8009f52:	2aff      	cmp	r2, #255	; 0xff
 8009f54:	d904      	bls.n	8009f60 <__ascii_wctomb+0x14>
 8009f56:	228a      	movs	r2, #138	; 0x8a
 8009f58:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	4770      	bx	lr
 8009f60:	2001      	movs	r0, #1
 8009f62:	700a      	strb	r2, [r1, #0]
 8009f64:	4770      	bx	lr
	...

08009f68 <__swsetup_r>:
 8009f68:	4b32      	ldr	r3, [pc, #200]	; (800a034 <__swsetup_r+0xcc>)
 8009f6a:	b570      	push	{r4, r5, r6, lr}
 8009f6c:	681d      	ldr	r5, [r3, #0]
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460c      	mov	r4, r1
 8009f72:	b125      	cbz	r5, 8009f7e <__swsetup_r+0x16>
 8009f74:	69ab      	ldr	r3, [r5, #24]
 8009f76:	b913      	cbnz	r3, 8009f7e <__swsetup_r+0x16>
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f000 f981 	bl	800a280 <__sinit>
 8009f7e:	4b2e      	ldr	r3, [pc, #184]	; (800a038 <__swsetup_r+0xd0>)
 8009f80:	429c      	cmp	r4, r3
 8009f82:	d10f      	bne.n	8009fa4 <__swsetup_r+0x3c>
 8009f84:	686c      	ldr	r4, [r5, #4]
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f8c:	0719      	lsls	r1, r3, #28
 8009f8e:	d42c      	bmi.n	8009fea <__swsetup_r+0x82>
 8009f90:	06dd      	lsls	r5, r3, #27
 8009f92:	d411      	bmi.n	8009fb8 <__swsetup_r+0x50>
 8009f94:	2309      	movs	r3, #9
 8009f96:	6033      	str	r3, [r6, #0]
 8009f98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	81a3      	strh	r3, [r4, #12]
 8009fa2:	e03e      	b.n	800a022 <__swsetup_r+0xba>
 8009fa4:	4b25      	ldr	r3, [pc, #148]	; (800a03c <__swsetup_r+0xd4>)
 8009fa6:	429c      	cmp	r4, r3
 8009fa8:	d101      	bne.n	8009fae <__swsetup_r+0x46>
 8009faa:	68ac      	ldr	r4, [r5, #8]
 8009fac:	e7eb      	b.n	8009f86 <__swsetup_r+0x1e>
 8009fae:	4b24      	ldr	r3, [pc, #144]	; (800a040 <__swsetup_r+0xd8>)
 8009fb0:	429c      	cmp	r4, r3
 8009fb2:	bf08      	it	eq
 8009fb4:	68ec      	ldreq	r4, [r5, #12]
 8009fb6:	e7e6      	b.n	8009f86 <__swsetup_r+0x1e>
 8009fb8:	0758      	lsls	r0, r3, #29
 8009fba:	d512      	bpl.n	8009fe2 <__swsetup_r+0x7a>
 8009fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fbe:	b141      	cbz	r1, 8009fd2 <__swsetup_r+0x6a>
 8009fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc4:	4299      	cmp	r1, r3
 8009fc6:	d002      	beq.n	8009fce <__swsetup_r+0x66>
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7ff fb37 	bl	800963c <_free_r>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6063      	str	r3, [r4, #4]
 8009fde:	6923      	ldr	r3, [r4, #16]
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f043 0308 	orr.w	r3, r3, #8
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	6923      	ldr	r3, [r4, #16]
 8009fec:	b94b      	cbnz	r3, 800a002 <__swsetup_r+0x9a>
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff8:	d003      	beq.n	800a002 <__swsetup_r+0x9a>
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f000 fa05 	bl	800a40c <__smakebuf_r>
 800a002:	89a0      	ldrh	r0, [r4, #12]
 800a004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a008:	f010 0301 	ands.w	r3, r0, #1
 800a00c:	d00a      	beq.n	800a024 <__swsetup_r+0xbc>
 800a00e:	2300      	movs	r3, #0
 800a010:	60a3      	str	r3, [r4, #8]
 800a012:	6963      	ldr	r3, [r4, #20]
 800a014:	425b      	negs	r3, r3
 800a016:	61a3      	str	r3, [r4, #24]
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	b943      	cbnz	r3, 800a02e <__swsetup_r+0xc6>
 800a01c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a020:	d1ba      	bne.n	8009f98 <__swsetup_r+0x30>
 800a022:	bd70      	pop	{r4, r5, r6, pc}
 800a024:	0781      	lsls	r1, r0, #30
 800a026:	bf58      	it	pl
 800a028:	6963      	ldrpl	r3, [r4, #20]
 800a02a:	60a3      	str	r3, [r4, #8]
 800a02c:	e7f4      	b.n	800a018 <__swsetup_r+0xb0>
 800a02e:	2000      	movs	r0, #0
 800a030:	e7f7      	b.n	800a022 <__swsetup_r+0xba>
 800a032:	bf00      	nop
 800a034:	2000000c 	.word	0x2000000c
 800a038:	0800b864 	.word	0x0800b864
 800a03c:	0800b884 	.word	0x0800b884
 800a040:	0800b844 	.word	0x0800b844

0800a044 <abort>:
 800a044:	2006      	movs	r0, #6
 800a046:	b508      	push	{r3, lr}
 800a048:	f000 fa50 	bl	800a4ec <raise>
 800a04c:	2001      	movs	r0, #1
 800a04e:	f7f8 fddc 	bl	8002c0a <_exit>
	...

0800a054 <__sflush_r>:
 800a054:	898a      	ldrh	r2, [r1, #12]
 800a056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a058:	4605      	mov	r5, r0
 800a05a:	0710      	lsls	r0, r2, #28
 800a05c:	460c      	mov	r4, r1
 800a05e:	d457      	bmi.n	800a110 <__sflush_r+0xbc>
 800a060:	684b      	ldr	r3, [r1, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	dc04      	bgt.n	800a070 <__sflush_r+0x1c>
 800a066:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	dc01      	bgt.n	800a070 <__sflush_r+0x1c>
 800a06c:	2000      	movs	r0, #0
 800a06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a072:	2e00      	cmp	r6, #0
 800a074:	d0fa      	beq.n	800a06c <__sflush_r+0x18>
 800a076:	2300      	movs	r3, #0
 800a078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a07c:	682f      	ldr	r7, [r5, #0]
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	d032      	beq.n	800a0e8 <__sflush_r+0x94>
 800a082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	075a      	lsls	r2, r3, #29
 800a088:	d505      	bpl.n	800a096 <__sflush_r+0x42>
 800a08a:	6863      	ldr	r3, [r4, #4]
 800a08c:	1ac0      	subs	r0, r0, r3
 800a08e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a090:	b10b      	cbz	r3, 800a096 <__sflush_r+0x42>
 800a092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a094:	1ac0      	subs	r0, r0, r3
 800a096:	2300      	movs	r3, #0
 800a098:	4602      	mov	r2, r0
 800a09a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a09c:	4628      	mov	r0, r5
 800a09e:	6a21      	ldr	r1, [r4, #32]
 800a0a0:	47b0      	blx	r6
 800a0a2:	1c43      	adds	r3, r0, #1
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	d106      	bne.n	800a0b6 <__sflush_r+0x62>
 800a0a8:	6829      	ldr	r1, [r5, #0]
 800a0aa:	291d      	cmp	r1, #29
 800a0ac:	d82c      	bhi.n	800a108 <__sflush_r+0xb4>
 800a0ae:	4a29      	ldr	r2, [pc, #164]	; (800a154 <__sflush_r+0x100>)
 800a0b0:	40ca      	lsrs	r2, r1
 800a0b2:	07d6      	lsls	r6, r2, #31
 800a0b4:	d528      	bpl.n	800a108 <__sflush_r+0xb4>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	6062      	str	r2, [r4, #4]
 800a0ba:	6922      	ldr	r2, [r4, #16]
 800a0bc:	04d9      	lsls	r1, r3, #19
 800a0be:	6022      	str	r2, [r4, #0]
 800a0c0:	d504      	bpl.n	800a0cc <__sflush_r+0x78>
 800a0c2:	1c42      	adds	r2, r0, #1
 800a0c4:	d101      	bne.n	800a0ca <__sflush_r+0x76>
 800a0c6:	682b      	ldr	r3, [r5, #0]
 800a0c8:	b903      	cbnz	r3, 800a0cc <__sflush_r+0x78>
 800a0ca:	6560      	str	r0, [r4, #84]	; 0x54
 800a0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ce:	602f      	str	r7, [r5, #0]
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	d0cb      	beq.n	800a06c <__sflush_r+0x18>
 800a0d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0d8:	4299      	cmp	r1, r3
 800a0da:	d002      	beq.n	800a0e2 <__sflush_r+0x8e>
 800a0dc:	4628      	mov	r0, r5
 800a0de:	f7ff faad 	bl	800963c <_free_r>
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	6360      	str	r0, [r4, #52]	; 0x34
 800a0e6:	e7c2      	b.n	800a06e <__sflush_r+0x1a>
 800a0e8:	6a21      	ldr	r1, [r4, #32]
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	47b0      	blx	r6
 800a0f0:	1c41      	adds	r1, r0, #1
 800a0f2:	d1c7      	bne.n	800a084 <__sflush_r+0x30>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0c4      	beq.n	800a084 <__sflush_r+0x30>
 800a0fa:	2b1d      	cmp	r3, #29
 800a0fc:	d001      	beq.n	800a102 <__sflush_r+0xae>
 800a0fe:	2b16      	cmp	r3, #22
 800a100:	d101      	bne.n	800a106 <__sflush_r+0xb2>
 800a102:	602f      	str	r7, [r5, #0]
 800a104:	e7b2      	b.n	800a06c <__sflush_r+0x18>
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a10c:	81a3      	strh	r3, [r4, #12]
 800a10e:	e7ae      	b.n	800a06e <__sflush_r+0x1a>
 800a110:	690f      	ldr	r7, [r1, #16]
 800a112:	2f00      	cmp	r7, #0
 800a114:	d0aa      	beq.n	800a06c <__sflush_r+0x18>
 800a116:	0793      	lsls	r3, r2, #30
 800a118:	bf18      	it	ne
 800a11a:	2300      	movne	r3, #0
 800a11c:	680e      	ldr	r6, [r1, #0]
 800a11e:	bf08      	it	eq
 800a120:	694b      	ldreq	r3, [r1, #20]
 800a122:	1bf6      	subs	r6, r6, r7
 800a124:	600f      	str	r7, [r1, #0]
 800a126:	608b      	str	r3, [r1, #8]
 800a128:	2e00      	cmp	r6, #0
 800a12a:	dd9f      	ble.n	800a06c <__sflush_r+0x18>
 800a12c:	4633      	mov	r3, r6
 800a12e:	463a      	mov	r2, r7
 800a130:	4628      	mov	r0, r5
 800a132:	6a21      	ldr	r1, [r4, #32]
 800a134:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a138:	47e0      	blx	ip
 800a13a:	2800      	cmp	r0, #0
 800a13c:	dc06      	bgt.n	800a14c <__sflush_r+0xf8>
 800a13e:	89a3      	ldrh	r3, [r4, #12]
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
 800a144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a148:	81a3      	strh	r3, [r4, #12]
 800a14a:	e790      	b.n	800a06e <__sflush_r+0x1a>
 800a14c:	4407      	add	r7, r0
 800a14e:	1a36      	subs	r6, r6, r0
 800a150:	e7ea      	b.n	800a128 <__sflush_r+0xd4>
 800a152:	bf00      	nop
 800a154:	20400001 	.word	0x20400001

0800a158 <_fflush_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	690b      	ldr	r3, [r1, #16]
 800a15c:	4605      	mov	r5, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	b913      	cbnz	r3, 800a168 <_fflush_r+0x10>
 800a162:	2500      	movs	r5, #0
 800a164:	4628      	mov	r0, r5
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	b118      	cbz	r0, 800a172 <_fflush_r+0x1a>
 800a16a:	6983      	ldr	r3, [r0, #24]
 800a16c:	b90b      	cbnz	r3, 800a172 <_fflush_r+0x1a>
 800a16e:	f000 f887 	bl	800a280 <__sinit>
 800a172:	4b14      	ldr	r3, [pc, #80]	; (800a1c4 <_fflush_r+0x6c>)
 800a174:	429c      	cmp	r4, r3
 800a176:	d11b      	bne.n	800a1b0 <_fflush_r+0x58>
 800a178:	686c      	ldr	r4, [r5, #4]
 800a17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0ef      	beq.n	800a162 <_fflush_r+0xa>
 800a182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a184:	07d0      	lsls	r0, r2, #31
 800a186:	d404      	bmi.n	800a192 <_fflush_r+0x3a>
 800a188:	0599      	lsls	r1, r3, #22
 800a18a:	d402      	bmi.n	800a192 <_fflush_r+0x3a>
 800a18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a18e:	f000 f915 	bl	800a3bc <__retarget_lock_acquire_recursive>
 800a192:	4628      	mov	r0, r5
 800a194:	4621      	mov	r1, r4
 800a196:	f7ff ff5d 	bl	800a054 <__sflush_r>
 800a19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a19c:	4605      	mov	r5, r0
 800a19e:	07da      	lsls	r2, r3, #31
 800a1a0:	d4e0      	bmi.n	800a164 <_fflush_r+0xc>
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	059b      	lsls	r3, r3, #22
 800a1a6:	d4dd      	bmi.n	800a164 <_fflush_r+0xc>
 800a1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1aa:	f000 f908 	bl	800a3be <__retarget_lock_release_recursive>
 800a1ae:	e7d9      	b.n	800a164 <_fflush_r+0xc>
 800a1b0:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <_fflush_r+0x70>)
 800a1b2:	429c      	cmp	r4, r3
 800a1b4:	d101      	bne.n	800a1ba <_fflush_r+0x62>
 800a1b6:	68ac      	ldr	r4, [r5, #8]
 800a1b8:	e7df      	b.n	800a17a <_fflush_r+0x22>
 800a1ba:	4b04      	ldr	r3, [pc, #16]	; (800a1cc <_fflush_r+0x74>)
 800a1bc:	429c      	cmp	r4, r3
 800a1be:	bf08      	it	eq
 800a1c0:	68ec      	ldreq	r4, [r5, #12]
 800a1c2:	e7da      	b.n	800a17a <_fflush_r+0x22>
 800a1c4:	0800b864 	.word	0x0800b864
 800a1c8:	0800b884 	.word	0x0800b884
 800a1cc:	0800b844 	.word	0x0800b844

0800a1d0 <std>:
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	b510      	push	{r4, lr}
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a1da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1de:	6083      	str	r3, [r0, #8]
 800a1e0:	8181      	strh	r1, [r0, #12]
 800a1e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a1e4:	81c2      	strh	r2, [r0, #14]
 800a1e6:	6183      	str	r3, [r0, #24]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	2208      	movs	r2, #8
 800a1ec:	305c      	adds	r0, #92	; 0x5c
 800a1ee:	f7fd fb71 	bl	80078d4 <memset>
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <std+0x38>)
 800a1f4:	6224      	str	r4, [r4, #32]
 800a1f6:	6263      	str	r3, [r4, #36]	; 0x24
 800a1f8:	4b04      	ldr	r3, [pc, #16]	; (800a20c <std+0x3c>)
 800a1fa:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1fc:	4b04      	ldr	r3, [pc, #16]	; (800a210 <std+0x40>)
 800a1fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a200:	4b04      	ldr	r3, [pc, #16]	; (800a214 <std+0x44>)
 800a202:	6323      	str	r3, [r4, #48]	; 0x30
 800a204:	bd10      	pop	{r4, pc}
 800a206:	bf00      	nop
 800a208:	0800a525 	.word	0x0800a525
 800a20c:	0800a547 	.word	0x0800a547
 800a210:	0800a57f 	.word	0x0800a57f
 800a214:	0800a5a3 	.word	0x0800a5a3

0800a218 <_cleanup_r>:
 800a218:	4901      	ldr	r1, [pc, #4]	; (800a220 <_cleanup_r+0x8>)
 800a21a:	f000 b8af 	b.w	800a37c <_fwalk_reent>
 800a21e:	bf00      	nop
 800a220:	0800a159 	.word	0x0800a159

0800a224 <__sfmoreglue>:
 800a224:	2268      	movs	r2, #104	; 0x68
 800a226:	b570      	push	{r4, r5, r6, lr}
 800a228:	1e4d      	subs	r5, r1, #1
 800a22a:	4355      	muls	r5, r2
 800a22c:	460e      	mov	r6, r1
 800a22e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a232:	f7ff fa6b 	bl	800970c <_malloc_r>
 800a236:	4604      	mov	r4, r0
 800a238:	b140      	cbz	r0, 800a24c <__sfmoreglue+0x28>
 800a23a:	2100      	movs	r1, #0
 800a23c:	e9c0 1600 	strd	r1, r6, [r0]
 800a240:	300c      	adds	r0, #12
 800a242:	60a0      	str	r0, [r4, #8]
 800a244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a248:	f7fd fb44 	bl	80078d4 <memset>
 800a24c:	4620      	mov	r0, r4
 800a24e:	bd70      	pop	{r4, r5, r6, pc}

0800a250 <__sfp_lock_acquire>:
 800a250:	4801      	ldr	r0, [pc, #4]	; (800a258 <__sfp_lock_acquire+0x8>)
 800a252:	f000 b8b3 	b.w	800a3bc <__retarget_lock_acquire_recursive>
 800a256:	bf00      	nop
 800a258:	200002ed 	.word	0x200002ed

0800a25c <__sfp_lock_release>:
 800a25c:	4801      	ldr	r0, [pc, #4]	; (800a264 <__sfp_lock_release+0x8>)
 800a25e:	f000 b8ae 	b.w	800a3be <__retarget_lock_release_recursive>
 800a262:	bf00      	nop
 800a264:	200002ed 	.word	0x200002ed

0800a268 <__sinit_lock_acquire>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__sinit_lock_acquire+0x8>)
 800a26a:	f000 b8a7 	b.w	800a3bc <__retarget_lock_acquire_recursive>
 800a26e:	bf00      	nop
 800a270:	200002ee 	.word	0x200002ee

0800a274 <__sinit_lock_release>:
 800a274:	4801      	ldr	r0, [pc, #4]	; (800a27c <__sinit_lock_release+0x8>)
 800a276:	f000 b8a2 	b.w	800a3be <__retarget_lock_release_recursive>
 800a27a:	bf00      	nop
 800a27c:	200002ee 	.word	0x200002ee

0800a280 <__sinit>:
 800a280:	b510      	push	{r4, lr}
 800a282:	4604      	mov	r4, r0
 800a284:	f7ff fff0 	bl	800a268 <__sinit_lock_acquire>
 800a288:	69a3      	ldr	r3, [r4, #24]
 800a28a:	b11b      	cbz	r3, 800a294 <__sinit+0x14>
 800a28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a290:	f7ff bff0 	b.w	800a274 <__sinit_lock_release>
 800a294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a298:	6523      	str	r3, [r4, #80]	; 0x50
 800a29a:	4b13      	ldr	r3, [pc, #76]	; (800a2e8 <__sinit+0x68>)
 800a29c:	4a13      	ldr	r2, [pc, #76]	; (800a2ec <__sinit+0x6c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2a2:	42a3      	cmp	r3, r4
 800a2a4:	bf08      	it	eq
 800a2a6:	2301      	moveq	r3, #1
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	bf08      	it	eq
 800a2ac:	61a3      	streq	r3, [r4, #24]
 800a2ae:	f000 f81f 	bl	800a2f0 <__sfp>
 800a2b2:	6060      	str	r0, [r4, #4]
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f000 f81b 	bl	800a2f0 <__sfp>
 800a2ba:	60a0      	str	r0, [r4, #8]
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 f817 	bl	800a2f0 <__sfp>
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2104      	movs	r1, #4
 800a2c6:	60e0      	str	r0, [r4, #12]
 800a2c8:	6860      	ldr	r0, [r4, #4]
 800a2ca:	f7ff ff81 	bl	800a1d0 <std>
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	2109      	movs	r1, #9
 800a2d2:	68a0      	ldr	r0, [r4, #8]
 800a2d4:	f7ff ff7c 	bl	800a1d0 <std>
 800a2d8:	2202      	movs	r2, #2
 800a2da:	2112      	movs	r1, #18
 800a2dc:	68e0      	ldr	r0, [r4, #12]
 800a2de:	f7ff ff77 	bl	800a1d0 <std>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	61a3      	str	r3, [r4, #24]
 800a2e6:	e7d1      	b.n	800a28c <__sinit+0xc>
 800a2e8:	0800b4cc 	.word	0x0800b4cc
 800a2ec:	0800a219 	.word	0x0800a219

0800a2f0 <__sfp>:
 800a2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f2:	4607      	mov	r7, r0
 800a2f4:	f7ff ffac 	bl	800a250 <__sfp_lock_acquire>
 800a2f8:	4b1e      	ldr	r3, [pc, #120]	; (800a374 <__sfp+0x84>)
 800a2fa:	681e      	ldr	r6, [r3, #0]
 800a2fc:	69b3      	ldr	r3, [r6, #24]
 800a2fe:	b913      	cbnz	r3, 800a306 <__sfp+0x16>
 800a300:	4630      	mov	r0, r6
 800a302:	f7ff ffbd 	bl	800a280 <__sinit>
 800a306:	3648      	adds	r6, #72	; 0x48
 800a308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	d503      	bpl.n	800a318 <__sfp+0x28>
 800a310:	6833      	ldr	r3, [r6, #0]
 800a312:	b30b      	cbz	r3, 800a358 <__sfp+0x68>
 800a314:	6836      	ldr	r6, [r6, #0]
 800a316:	e7f7      	b.n	800a308 <__sfp+0x18>
 800a318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a31c:	b9d5      	cbnz	r5, 800a354 <__sfp+0x64>
 800a31e:	4b16      	ldr	r3, [pc, #88]	; (800a378 <__sfp+0x88>)
 800a320:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a324:	60e3      	str	r3, [r4, #12]
 800a326:	6665      	str	r5, [r4, #100]	; 0x64
 800a328:	f000 f847 	bl	800a3ba <__retarget_lock_init_recursive>
 800a32c:	f7ff ff96 	bl	800a25c <__sfp_lock_release>
 800a330:	2208      	movs	r2, #8
 800a332:	4629      	mov	r1, r5
 800a334:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a338:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a33c:	6025      	str	r5, [r4, #0]
 800a33e:	61a5      	str	r5, [r4, #24]
 800a340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a344:	f7fd fac6 	bl	80078d4 <memset>
 800a348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a34c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a350:	4620      	mov	r0, r4
 800a352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a354:	3468      	adds	r4, #104	; 0x68
 800a356:	e7d9      	b.n	800a30c <__sfp+0x1c>
 800a358:	2104      	movs	r1, #4
 800a35a:	4638      	mov	r0, r7
 800a35c:	f7ff ff62 	bl	800a224 <__sfmoreglue>
 800a360:	4604      	mov	r4, r0
 800a362:	6030      	str	r0, [r6, #0]
 800a364:	2800      	cmp	r0, #0
 800a366:	d1d5      	bne.n	800a314 <__sfp+0x24>
 800a368:	f7ff ff78 	bl	800a25c <__sfp_lock_release>
 800a36c:	230c      	movs	r3, #12
 800a36e:	603b      	str	r3, [r7, #0]
 800a370:	e7ee      	b.n	800a350 <__sfp+0x60>
 800a372:	bf00      	nop
 800a374:	0800b4cc 	.word	0x0800b4cc
 800a378:	ffff0001 	.word	0xffff0001

0800a37c <_fwalk_reent>:
 800a37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a380:	4606      	mov	r6, r0
 800a382:	4688      	mov	r8, r1
 800a384:	2700      	movs	r7, #0
 800a386:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a38a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a38e:	f1b9 0901 	subs.w	r9, r9, #1
 800a392:	d505      	bpl.n	800a3a0 <_fwalk_reent+0x24>
 800a394:	6824      	ldr	r4, [r4, #0]
 800a396:	2c00      	cmp	r4, #0
 800a398:	d1f7      	bne.n	800a38a <_fwalk_reent+0xe>
 800a39a:	4638      	mov	r0, r7
 800a39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a0:	89ab      	ldrh	r3, [r5, #12]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d907      	bls.n	800a3b6 <_fwalk_reent+0x3a>
 800a3a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	d003      	beq.n	800a3b6 <_fwalk_reent+0x3a>
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	47c0      	blx	r8
 800a3b4:	4307      	orrs	r7, r0
 800a3b6:	3568      	adds	r5, #104	; 0x68
 800a3b8:	e7e9      	b.n	800a38e <_fwalk_reent+0x12>

0800a3ba <__retarget_lock_init_recursive>:
 800a3ba:	4770      	bx	lr

0800a3bc <__retarget_lock_acquire_recursive>:
 800a3bc:	4770      	bx	lr

0800a3be <__retarget_lock_release_recursive>:
 800a3be:	4770      	bx	lr

0800a3c0 <__swhatbuf_r>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	460e      	mov	r6, r1
 800a3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c8:	4614      	mov	r4, r2
 800a3ca:	2900      	cmp	r1, #0
 800a3cc:	461d      	mov	r5, r3
 800a3ce:	b096      	sub	sp, #88	; 0x58
 800a3d0:	da08      	bge.n	800a3e4 <__swhatbuf_r+0x24>
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3d8:	602a      	str	r2, [r5, #0]
 800a3da:	061a      	lsls	r2, r3, #24
 800a3dc:	d410      	bmi.n	800a400 <__swhatbuf_r+0x40>
 800a3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3e2:	e00e      	b.n	800a402 <__swhatbuf_r+0x42>
 800a3e4:	466a      	mov	r2, sp
 800a3e6:	f000 f903 	bl	800a5f0 <_fstat_r>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	dbf1      	blt.n	800a3d2 <__swhatbuf_r+0x12>
 800a3ee:	9a01      	ldr	r2, [sp, #4]
 800a3f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3f8:	425a      	negs	r2, r3
 800a3fa:	415a      	adcs	r2, r3
 800a3fc:	602a      	str	r2, [r5, #0]
 800a3fe:	e7ee      	b.n	800a3de <__swhatbuf_r+0x1e>
 800a400:	2340      	movs	r3, #64	; 0x40
 800a402:	2000      	movs	r0, #0
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	b016      	add	sp, #88	; 0x58
 800a408:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a40c <__smakebuf_r>:
 800a40c:	898b      	ldrh	r3, [r1, #12]
 800a40e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a410:	079d      	lsls	r5, r3, #30
 800a412:	4606      	mov	r6, r0
 800a414:	460c      	mov	r4, r1
 800a416:	d507      	bpl.n	800a428 <__smakebuf_r+0x1c>
 800a418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	6123      	str	r3, [r4, #16]
 800a420:	2301      	movs	r3, #1
 800a422:	6163      	str	r3, [r4, #20]
 800a424:	b002      	add	sp, #8
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	466a      	mov	r2, sp
 800a42a:	ab01      	add	r3, sp, #4
 800a42c:	f7ff ffc8 	bl	800a3c0 <__swhatbuf_r>
 800a430:	9900      	ldr	r1, [sp, #0]
 800a432:	4605      	mov	r5, r0
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff f969 	bl	800970c <_malloc_r>
 800a43a:	b948      	cbnz	r0, 800a450 <__smakebuf_r+0x44>
 800a43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a440:	059a      	lsls	r2, r3, #22
 800a442:	d4ef      	bmi.n	800a424 <__smakebuf_r+0x18>
 800a444:	f023 0303 	bic.w	r3, r3, #3
 800a448:	f043 0302 	orr.w	r3, r3, #2
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	e7e3      	b.n	800a418 <__smakebuf_r+0xc>
 800a450:	4b0d      	ldr	r3, [pc, #52]	; (800a488 <__smakebuf_r+0x7c>)
 800a452:	62b3      	str	r3, [r6, #40]	; 0x28
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	6020      	str	r0, [r4, #0]
 800a458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	9b00      	ldr	r3, [sp, #0]
 800a460:	6120      	str	r0, [r4, #16]
 800a462:	6163      	str	r3, [r4, #20]
 800a464:	9b01      	ldr	r3, [sp, #4]
 800a466:	b15b      	cbz	r3, 800a480 <__smakebuf_r+0x74>
 800a468:	4630      	mov	r0, r6
 800a46a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a46e:	f000 f8d1 	bl	800a614 <_isatty_r>
 800a472:	b128      	cbz	r0, 800a480 <__smakebuf_r+0x74>
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	f023 0303 	bic.w	r3, r3, #3
 800a47a:	f043 0301 	orr.w	r3, r3, #1
 800a47e:	81a3      	strh	r3, [r4, #12]
 800a480:	89a0      	ldrh	r0, [r4, #12]
 800a482:	4305      	orrs	r5, r0
 800a484:	81a5      	strh	r5, [r4, #12]
 800a486:	e7cd      	b.n	800a424 <__smakebuf_r+0x18>
 800a488:	0800a219 	.word	0x0800a219

0800a48c <_malloc_usable_size_r>:
 800a48c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a490:	1f18      	subs	r0, r3, #4
 800a492:	2b00      	cmp	r3, #0
 800a494:	bfbc      	itt	lt
 800a496:	580b      	ldrlt	r3, [r1, r0]
 800a498:	18c0      	addlt	r0, r0, r3
 800a49a:	4770      	bx	lr

0800a49c <_raise_r>:
 800a49c:	291f      	cmp	r1, #31
 800a49e:	b538      	push	{r3, r4, r5, lr}
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	460d      	mov	r5, r1
 800a4a4:	d904      	bls.n	800a4b0 <_raise_r+0x14>
 800a4a6:	2316      	movs	r3, #22
 800a4a8:	6003      	str	r3, [r0, #0]
 800a4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4b2:	b112      	cbz	r2, 800a4ba <_raise_r+0x1e>
 800a4b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4b8:	b94b      	cbnz	r3, 800a4ce <_raise_r+0x32>
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 f830 	bl	800a520 <_getpid_r>
 800a4c0:	462a      	mov	r2, r5
 800a4c2:	4601      	mov	r1, r0
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ca:	f000 b817 	b.w	800a4fc <_kill_r>
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d00a      	beq.n	800a4e8 <_raise_r+0x4c>
 800a4d2:	1c59      	adds	r1, r3, #1
 800a4d4:	d103      	bne.n	800a4de <_raise_r+0x42>
 800a4d6:	2316      	movs	r3, #22
 800a4d8:	6003      	str	r3, [r0, #0]
 800a4da:	2001      	movs	r0, #1
 800a4dc:	e7e7      	b.n	800a4ae <_raise_r+0x12>
 800a4de:	2400      	movs	r4, #0
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4e6:	4798      	blx	r3
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	e7e0      	b.n	800a4ae <_raise_r+0x12>

0800a4ec <raise>:
 800a4ec:	4b02      	ldr	r3, [pc, #8]	; (800a4f8 <raise+0xc>)
 800a4ee:	4601      	mov	r1, r0
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	f7ff bfd3 	b.w	800a49c <_raise_r>
 800a4f6:	bf00      	nop
 800a4f8:	2000000c 	.word	0x2000000c

0800a4fc <_kill_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	2300      	movs	r3, #0
 800a500:	4d06      	ldr	r5, [pc, #24]	; (800a51c <_kill_r+0x20>)
 800a502:	4604      	mov	r4, r0
 800a504:	4608      	mov	r0, r1
 800a506:	4611      	mov	r1, r2
 800a508:	602b      	str	r3, [r5, #0]
 800a50a:	f7f8 fb6e 	bl	8002bea <_kill>
 800a50e:	1c43      	adds	r3, r0, #1
 800a510:	d102      	bne.n	800a518 <_kill_r+0x1c>
 800a512:	682b      	ldr	r3, [r5, #0]
 800a514:	b103      	cbz	r3, 800a518 <_kill_r+0x1c>
 800a516:	6023      	str	r3, [r4, #0]
 800a518:	bd38      	pop	{r3, r4, r5, pc}
 800a51a:	bf00      	nop
 800a51c:	200002e8 	.word	0x200002e8

0800a520 <_getpid_r>:
 800a520:	f7f8 bb5c 	b.w	8002bdc <_getpid>

0800a524 <__sread>:
 800a524:	b510      	push	{r4, lr}
 800a526:	460c      	mov	r4, r1
 800a528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a52c:	f000 f894 	bl	800a658 <_read_r>
 800a530:	2800      	cmp	r0, #0
 800a532:	bfab      	itete	ge
 800a534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a536:	89a3      	ldrhlt	r3, [r4, #12]
 800a538:	181b      	addge	r3, r3, r0
 800a53a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a53e:	bfac      	ite	ge
 800a540:	6563      	strge	r3, [r4, #84]	; 0x54
 800a542:	81a3      	strhlt	r3, [r4, #12]
 800a544:	bd10      	pop	{r4, pc}

0800a546 <__swrite>:
 800a546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a54a:	461f      	mov	r7, r3
 800a54c:	898b      	ldrh	r3, [r1, #12]
 800a54e:	4605      	mov	r5, r0
 800a550:	05db      	lsls	r3, r3, #23
 800a552:	460c      	mov	r4, r1
 800a554:	4616      	mov	r6, r2
 800a556:	d505      	bpl.n	800a564 <__swrite+0x1e>
 800a558:	2302      	movs	r3, #2
 800a55a:	2200      	movs	r2, #0
 800a55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a560:	f000 f868 	bl	800a634 <_lseek_r>
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	4632      	mov	r2, r6
 800a568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a56c:	81a3      	strh	r3, [r4, #12]
 800a56e:	4628      	mov	r0, r5
 800a570:	463b      	mov	r3, r7
 800a572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a57a:	f000 b817 	b.w	800a5ac <_write_r>

0800a57e <__sseek>:
 800a57e:	b510      	push	{r4, lr}
 800a580:	460c      	mov	r4, r1
 800a582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a586:	f000 f855 	bl	800a634 <_lseek_r>
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	bf15      	itete	ne
 800a590:	6560      	strne	r0, [r4, #84]	; 0x54
 800a592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a59a:	81a3      	strheq	r3, [r4, #12]
 800a59c:	bf18      	it	ne
 800a59e:	81a3      	strhne	r3, [r4, #12]
 800a5a0:	bd10      	pop	{r4, pc}

0800a5a2 <__sclose>:
 800a5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a6:	f000 b813 	b.w	800a5d0 <_close_r>
	...

0800a5ac <_write_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	4d05      	ldr	r5, [pc, #20]	; (800a5cc <_write_r+0x20>)
 800a5b8:	602a      	str	r2, [r5, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	f7f8 fb4c 	bl	8002c58 <_write>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d102      	bne.n	800a5ca <_write_r+0x1e>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	b103      	cbz	r3, 800a5ca <_write_r+0x1e>
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	200002e8 	.word	0x200002e8

0800a5d0 <_close_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	4d05      	ldr	r5, [pc, #20]	; (800a5ec <_close_r+0x1c>)
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	602b      	str	r3, [r5, #0]
 800a5dc:	f7f8 fb58 	bl	8002c90 <_close>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_close_r+0x1a>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_close_r+0x1a>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	200002e8 	.word	0x200002e8

0800a5f0 <_fstat_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	4d06      	ldr	r5, [pc, #24]	; (800a610 <_fstat_r+0x20>)
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	602b      	str	r3, [r5, #0]
 800a5fe:	f7f8 fb52 	bl	8002ca6 <_fstat>
 800a602:	1c43      	adds	r3, r0, #1
 800a604:	d102      	bne.n	800a60c <_fstat_r+0x1c>
 800a606:	682b      	ldr	r3, [r5, #0]
 800a608:	b103      	cbz	r3, 800a60c <_fstat_r+0x1c>
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	bd38      	pop	{r3, r4, r5, pc}
 800a60e:	bf00      	nop
 800a610:	200002e8 	.word	0x200002e8

0800a614 <_isatty_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	2300      	movs	r3, #0
 800a618:	4d05      	ldr	r5, [pc, #20]	; (800a630 <_isatty_r+0x1c>)
 800a61a:	4604      	mov	r4, r0
 800a61c:	4608      	mov	r0, r1
 800a61e:	602b      	str	r3, [r5, #0]
 800a620:	f7f8 fb50 	bl	8002cc4 <_isatty>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_isatty_r+0x1a>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_isatty_r+0x1a>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	200002e8 	.word	0x200002e8

0800a634 <_lseek_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	4611      	mov	r1, r2
 800a63c:	2200      	movs	r2, #0
 800a63e:	4d05      	ldr	r5, [pc, #20]	; (800a654 <_lseek_r+0x20>)
 800a640:	602a      	str	r2, [r5, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	f7f8 fb48 	bl	8002cd8 <_lseek>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d102      	bne.n	800a652 <_lseek_r+0x1e>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b103      	cbz	r3, 800a652 <_lseek_r+0x1e>
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	200002e8 	.word	0x200002e8

0800a658 <_read_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4604      	mov	r4, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	4611      	mov	r1, r2
 800a660:	2200      	movs	r2, #0
 800a662:	4d05      	ldr	r5, [pc, #20]	; (800a678 <_read_r+0x20>)
 800a664:	602a      	str	r2, [r5, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	f7f8 fad9 	bl	8002c1e <_read>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_read_r+0x1e>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	b103      	cbz	r3, 800a676 <_read_r+0x1e>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	200002e8 	.word	0x200002e8

0800a67c <pow>:
 800a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a680:	4614      	mov	r4, r2
 800a682:	461d      	mov	r5, r3
 800a684:	4680      	mov	r8, r0
 800a686:	4689      	mov	r9, r1
 800a688:	f000 f862 	bl	800a750 <__ieee754_pow>
 800a68c:	4622      	mov	r2, r4
 800a68e:	4606      	mov	r6, r0
 800a690:	460f      	mov	r7, r1
 800a692:	462b      	mov	r3, r5
 800a694:	4620      	mov	r0, r4
 800a696:	4629      	mov	r1, r5
 800a698:	f7f6 f9b8 	bl	8000a0c <__aeabi_dcmpun>
 800a69c:	bbc8      	cbnz	r0, 800a712 <pow+0x96>
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	f7f6 f97f 	bl	80009a8 <__aeabi_dcmpeq>
 800a6aa:	b1b8      	cbz	r0, 800a6dc <pow+0x60>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7f6 f978 	bl	80009a8 <__aeabi_dcmpeq>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d141      	bne.n	800a740 <pow+0xc4>
 800a6bc:	4620      	mov	r0, r4
 800a6be:	4629      	mov	r1, r5
 800a6c0:	f000 fe3b 	bl	800b33a <finite>
 800a6c4:	b328      	cbz	r0, 800a712 <pow+0x96>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	f7f6 f975 	bl	80009bc <__aeabi_dcmplt>
 800a6d2:	b1f0      	cbz	r0, 800a712 <pow+0x96>
 800a6d4:	f7fd f8c6 	bl	8007864 <__errno>
 800a6d8:	2322      	movs	r3, #34	; 0x22
 800a6da:	e019      	b.n	800a710 <pow+0x94>
 800a6dc:	4630      	mov	r0, r6
 800a6de:	4639      	mov	r1, r7
 800a6e0:	f000 fe2b 	bl	800b33a <finite>
 800a6e4:	b9c8      	cbnz	r0, 800a71a <pow+0x9e>
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	f000 fe26 	bl	800b33a <finite>
 800a6ee:	b1a0      	cbz	r0, 800a71a <pow+0x9e>
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	f000 fe21 	bl	800b33a <finite>
 800a6f8:	b178      	cbz	r0, 800a71a <pow+0x9e>
 800a6fa:	4632      	mov	r2, r6
 800a6fc:	463b      	mov	r3, r7
 800a6fe:	4630      	mov	r0, r6
 800a700:	4639      	mov	r1, r7
 800a702:	f7f6 f983 	bl	8000a0c <__aeabi_dcmpun>
 800a706:	2800      	cmp	r0, #0
 800a708:	d0e4      	beq.n	800a6d4 <pow+0x58>
 800a70a:	f7fd f8ab 	bl	8007864 <__errno>
 800a70e:	2321      	movs	r3, #33	; 0x21
 800a710:	6003      	str	r3, [r0, #0]
 800a712:	4630      	mov	r0, r6
 800a714:	4639      	mov	r1, r7
 800a716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a71a:	2200      	movs	r2, #0
 800a71c:	2300      	movs	r3, #0
 800a71e:	4630      	mov	r0, r6
 800a720:	4639      	mov	r1, r7
 800a722:	f7f6 f941 	bl	80009a8 <__aeabi_dcmpeq>
 800a726:	2800      	cmp	r0, #0
 800a728:	d0f3      	beq.n	800a712 <pow+0x96>
 800a72a:	4640      	mov	r0, r8
 800a72c:	4649      	mov	r1, r9
 800a72e:	f000 fe04 	bl	800b33a <finite>
 800a732:	2800      	cmp	r0, #0
 800a734:	d0ed      	beq.n	800a712 <pow+0x96>
 800a736:	4620      	mov	r0, r4
 800a738:	4629      	mov	r1, r5
 800a73a:	f000 fdfe 	bl	800b33a <finite>
 800a73e:	e7c8      	b.n	800a6d2 <pow+0x56>
 800a740:	2600      	movs	r6, #0
 800a742:	4f01      	ldr	r7, [pc, #4]	; (800a748 <pow+0xcc>)
 800a744:	e7e5      	b.n	800a712 <pow+0x96>
 800a746:	bf00      	nop
 800a748:	3ff00000 	.word	0x3ff00000
 800a74c:	00000000 	.word	0x00000000

0800a750 <__ieee754_pow>:
 800a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	b093      	sub	sp, #76	; 0x4c
 800a756:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a75a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800a75e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800a762:	4689      	mov	r9, r1
 800a764:	ea56 0102 	orrs.w	r1, r6, r2
 800a768:	4680      	mov	r8, r0
 800a76a:	d111      	bne.n	800a790 <__ieee754_pow+0x40>
 800a76c:	1803      	adds	r3, r0, r0
 800a76e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800a772:	4152      	adcs	r2, r2
 800a774:	4299      	cmp	r1, r3
 800a776:	4b82      	ldr	r3, [pc, #520]	; (800a980 <__ieee754_pow+0x230>)
 800a778:	4193      	sbcs	r3, r2
 800a77a:	f080 84b9 	bcs.w	800b0f0 <__ieee754_pow+0x9a0>
 800a77e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a782:	4640      	mov	r0, r8
 800a784:	4649      	mov	r1, r9
 800a786:	f7f5 fcf1 	bl	800016c <__adddf3>
 800a78a:	4683      	mov	fp, r0
 800a78c:	468c      	mov	ip, r1
 800a78e:	e06f      	b.n	800a870 <__ieee754_pow+0x120>
 800a790:	4b7c      	ldr	r3, [pc, #496]	; (800a984 <__ieee754_pow+0x234>)
 800a792:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800a796:	429c      	cmp	r4, r3
 800a798:	464d      	mov	r5, r9
 800a79a:	4682      	mov	sl, r0
 800a79c:	dc06      	bgt.n	800a7ac <__ieee754_pow+0x5c>
 800a79e:	d101      	bne.n	800a7a4 <__ieee754_pow+0x54>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d1ec      	bne.n	800a77e <__ieee754_pow+0x2e>
 800a7a4:	429e      	cmp	r6, r3
 800a7a6:	dc01      	bgt.n	800a7ac <__ieee754_pow+0x5c>
 800a7a8:	d10f      	bne.n	800a7ca <__ieee754_pow+0x7a>
 800a7aa:	b172      	cbz	r2, 800a7ca <__ieee754_pow+0x7a>
 800a7ac:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a7b0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a7b4:	ea55 050a 	orrs.w	r5, r5, sl
 800a7b8:	d1e1      	bne.n	800a77e <__ieee754_pow+0x2e>
 800a7ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a7be:	18db      	adds	r3, r3, r3
 800a7c0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a7c4:	4152      	adcs	r2, r2
 800a7c6:	429d      	cmp	r5, r3
 800a7c8:	e7d5      	b.n	800a776 <__ieee754_pow+0x26>
 800a7ca:	2d00      	cmp	r5, #0
 800a7cc:	da39      	bge.n	800a842 <__ieee754_pow+0xf2>
 800a7ce:	4b6e      	ldr	r3, [pc, #440]	; (800a988 <__ieee754_pow+0x238>)
 800a7d0:	429e      	cmp	r6, r3
 800a7d2:	dc52      	bgt.n	800a87a <__ieee754_pow+0x12a>
 800a7d4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a7d8:	429e      	cmp	r6, r3
 800a7da:	f340 849c 	ble.w	800b116 <__ieee754_pow+0x9c6>
 800a7de:	1533      	asrs	r3, r6, #20
 800a7e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a7e4:	2b14      	cmp	r3, #20
 800a7e6:	dd0f      	ble.n	800a808 <__ieee754_pow+0xb8>
 800a7e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a7ec:	fa22 f103 	lsr.w	r1, r2, r3
 800a7f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	f040 848e 	bne.w	800b116 <__ieee754_pow+0x9c6>
 800a7fa:	f001 0101 	and.w	r1, r1, #1
 800a7fe:	f1c1 0302 	rsb	r3, r1, #2
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	b182      	cbz	r2, 800a828 <__ieee754_pow+0xd8>
 800a806:	e05d      	b.n	800a8c4 <__ieee754_pow+0x174>
 800a808:	2a00      	cmp	r2, #0
 800a80a:	d159      	bne.n	800a8c0 <__ieee754_pow+0x170>
 800a80c:	f1c3 0314 	rsb	r3, r3, #20
 800a810:	fa46 f103 	asr.w	r1, r6, r3
 800a814:	fa01 f303 	lsl.w	r3, r1, r3
 800a818:	42b3      	cmp	r3, r6
 800a81a:	f040 8479 	bne.w	800b110 <__ieee754_pow+0x9c0>
 800a81e:	f001 0101 	and.w	r1, r1, #1
 800a822:	f1c1 0302 	rsb	r3, r1, #2
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	4b58      	ldr	r3, [pc, #352]	; (800a98c <__ieee754_pow+0x23c>)
 800a82a:	429e      	cmp	r6, r3
 800a82c:	d132      	bne.n	800a894 <__ieee754_pow+0x144>
 800a82e:	2f00      	cmp	r7, #0
 800a830:	f280 846a 	bge.w	800b108 <__ieee754_pow+0x9b8>
 800a834:	4642      	mov	r2, r8
 800a836:	464b      	mov	r3, r9
 800a838:	2000      	movs	r0, #0
 800a83a:	4954      	ldr	r1, [pc, #336]	; (800a98c <__ieee754_pow+0x23c>)
 800a83c:	f7f5 ff76 	bl	800072c <__aeabi_ddiv>
 800a840:	e7a3      	b.n	800a78a <__ieee754_pow+0x3a>
 800a842:	2300      	movs	r3, #0
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	2a00      	cmp	r2, #0
 800a848:	d13c      	bne.n	800a8c4 <__ieee754_pow+0x174>
 800a84a:	4b4e      	ldr	r3, [pc, #312]	; (800a984 <__ieee754_pow+0x234>)
 800a84c:	429e      	cmp	r6, r3
 800a84e:	d1eb      	bne.n	800a828 <__ieee754_pow+0xd8>
 800a850:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a854:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a858:	ea53 030a 	orrs.w	r3, r3, sl
 800a85c:	f000 8448 	beq.w	800b0f0 <__ieee754_pow+0x9a0>
 800a860:	4b4b      	ldr	r3, [pc, #300]	; (800a990 <__ieee754_pow+0x240>)
 800a862:	429c      	cmp	r4, r3
 800a864:	dd0b      	ble.n	800a87e <__ieee754_pow+0x12e>
 800a866:	2f00      	cmp	r7, #0
 800a868:	f2c0 8448 	blt.w	800b0fc <__ieee754_pow+0x9ac>
 800a86c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a870:	4658      	mov	r0, fp
 800a872:	4661      	mov	r1, ip
 800a874:	b013      	add	sp, #76	; 0x4c
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	2302      	movs	r3, #2
 800a87c:	e7e2      	b.n	800a844 <__ieee754_pow+0xf4>
 800a87e:	2f00      	cmp	r7, #0
 800a880:	f04f 0b00 	mov.w	fp, #0
 800a884:	f04f 0c00 	mov.w	ip, #0
 800a888:	daf2      	bge.n	800a870 <__ieee754_pow+0x120>
 800a88a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a88e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a892:	e7ed      	b.n	800a870 <__ieee754_pow+0x120>
 800a894:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800a898:	d106      	bne.n	800a8a8 <__ieee754_pow+0x158>
 800a89a:	4642      	mov	r2, r8
 800a89c:	464b      	mov	r3, r9
 800a89e:	4640      	mov	r0, r8
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	f7f5 fe19 	bl	80004d8 <__aeabi_dmul>
 800a8a6:	e770      	b.n	800a78a <__ieee754_pow+0x3a>
 800a8a8:	4b3a      	ldr	r3, [pc, #232]	; (800a994 <__ieee754_pow+0x244>)
 800a8aa:	429f      	cmp	r7, r3
 800a8ac:	d10a      	bne.n	800a8c4 <__ieee754_pow+0x174>
 800a8ae:	2d00      	cmp	r5, #0
 800a8b0:	db08      	blt.n	800a8c4 <__ieee754_pow+0x174>
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	b013      	add	sp, #76	; 0x4c
 800a8b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	f000 bc5e 	b.w	800b17c <__ieee754_sqrt>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	4640      	mov	r0, r8
 800a8c6:	4649      	mov	r1, r9
 800a8c8:	f000 fd34 	bl	800b334 <fabs>
 800a8cc:	4683      	mov	fp, r0
 800a8ce:	468c      	mov	ip, r1
 800a8d0:	f1ba 0f00 	cmp.w	sl, #0
 800a8d4:	d128      	bne.n	800a928 <__ieee754_pow+0x1d8>
 800a8d6:	b124      	cbz	r4, 800a8e2 <__ieee754_pow+0x192>
 800a8d8:	4b2c      	ldr	r3, [pc, #176]	; (800a98c <__ieee754_pow+0x23c>)
 800a8da:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d122      	bne.n	800a928 <__ieee754_pow+0x1d8>
 800a8e2:	2f00      	cmp	r7, #0
 800a8e4:	da07      	bge.n	800a8f6 <__ieee754_pow+0x1a6>
 800a8e6:	465a      	mov	r2, fp
 800a8e8:	4663      	mov	r3, ip
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	4927      	ldr	r1, [pc, #156]	; (800a98c <__ieee754_pow+0x23c>)
 800a8ee:	f7f5 ff1d 	bl	800072c <__aeabi_ddiv>
 800a8f2:	4683      	mov	fp, r0
 800a8f4:	468c      	mov	ip, r1
 800a8f6:	2d00      	cmp	r5, #0
 800a8f8:	daba      	bge.n	800a870 <__ieee754_pow+0x120>
 800a8fa:	9b00      	ldr	r3, [sp, #0]
 800a8fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a900:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a904:	4323      	orrs	r3, r4
 800a906:	d108      	bne.n	800a91a <__ieee754_pow+0x1ca>
 800a908:	465a      	mov	r2, fp
 800a90a:	4663      	mov	r3, ip
 800a90c:	4658      	mov	r0, fp
 800a90e:	4661      	mov	r1, ip
 800a910:	f7f5 fc2a 	bl	8000168 <__aeabi_dsub>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	e790      	b.n	800a83c <__ieee754_pow+0xec>
 800a91a:	9b00      	ldr	r3, [sp, #0]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d1a7      	bne.n	800a870 <__ieee754_pow+0x120>
 800a920:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a924:	469c      	mov	ip, r3
 800a926:	e7a3      	b.n	800a870 <__ieee754_pow+0x120>
 800a928:	0feb      	lsrs	r3, r5, #31
 800a92a:	3b01      	subs	r3, #1
 800a92c:	930c      	str	r3, [sp, #48]	; 0x30
 800a92e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a930:	9b00      	ldr	r3, [sp, #0]
 800a932:	4313      	orrs	r3, r2
 800a934:	d104      	bne.n	800a940 <__ieee754_pow+0x1f0>
 800a936:	4642      	mov	r2, r8
 800a938:	464b      	mov	r3, r9
 800a93a:	4640      	mov	r0, r8
 800a93c:	4649      	mov	r1, r9
 800a93e:	e7e7      	b.n	800a910 <__ieee754_pow+0x1c0>
 800a940:	4b15      	ldr	r3, [pc, #84]	; (800a998 <__ieee754_pow+0x248>)
 800a942:	429e      	cmp	r6, r3
 800a944:	f340 80f6 	ble.w	800ab34 <__ieee754_pow+0x3e4>
 800a948:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a94c:	429e      	cmp	r6, r3
 800a94e:	4b10      	ldr	r3, [pc, #64]	; (800a990 <__ieee754_pow+0x240>)
 800a950:	dd09      	ble.n	800a966 <__ieee754_pow+0x216>
 800a952:	429c      	cmp	r4, r3
 800a954:	dc0c      	bgt.n	800a970 <__ieee754_pow+0x220>
 800a956:	2f00      	cmp	r7, #0
 800a958:	da0c      	bge.n	800a974 <__ieee754_pow+0x224>
 800a95a:	2000      	movs	r0, #0
 800a95c:	b013      	add	sp, #76	; 0x4c
 800a95e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a962:	f000 bce2 	b.w	800b32a <__math_oflow>
 800a966:	429c      	cmp	r4, r3
 800a968:	dbf5      	blt.n	800a956 <__ieee754_pow+0x206>
 800a96a:	4b08      	ldr	r3, [pc, #32]	; (800a98c <__ieee754_pow+0x23c>)
 800a96c:	429c      	cmp	r4, r3
 800a96e:	dd15      	ble.n	800a99c <__ieee754_pow+0x24c>
 800a970:	2f00      	cmp	r7, #0
 800a972:	dcf2      	bgt.n	800a95a <__ieee754_pow+0x20a>
 800a974:	2000      	movs	r0, #0
 800a976:	b013      	add	sp, #76	; 0x4c
 800a978:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	f000 bcd0 	b.w	800b320 <__math_uflow>
 800a980:	fff00000 	.word	0xfff00000
 800a984:	7ff00000 	.word	0x7ff00000
 800a988:	433fffff 	.word	0x433fffff
 800a98c:	3ff00000 	.word	0x3ff00000
 800a990:	3fefffff 	.word	0x3fefffff
 800a994:	3fe00000 	.word	0x3fe00000
 800a998:	41e00000 	.word	0x41e00000
 800a99c:	4661      	mov	r1, ip
 800a99e:	2200      	movs	r2, #0
 800a9a0:	4658      	mov	r0, fp
 800a9a2:	4b5f      	ldr	r3, [pc, #380]	; (800ab20 <__ieee754_pow+0x3d0>)
 800a9a4:	f7f5 fbe0 	bl	8000168 <__aeabi_dsub>
 800a9a8:	a355      	add	r3, pc, #340	; (adr r3, 800ab00 <__ieee754_pow+0x3b0>)
 800a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	f7f5 fd91 	bl	80004d8 <__aeabi_dmul>
 800a9b6:	a354      	add	r3, pc, #336	; (adr r3, 800ab08 <__ieee754_pow+0x3b8>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	4606      	mov	r6, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	f7f5 fd88 	bl	80004d8 <__aeabi_dmul>
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4682      	mov	sl, r0
 800a9cc:	468b      	mov	fp, r1
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	4b54      	ldr	r3, [pc, #336]	; (800ab24 <__ieee754_pow+0x3d4>)
 800a9d4:	f7f5 fd80 	bl	80004d8 <__aeabi_dmul>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	a14c      	add	r1, pc, #304	; (adr r1, 800ab10 <__ieee754_pow+0x3c0>)
 800a9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e2:	f7f5 fbc1 	bl	8000168 <__aeabi_dsub>
 800a9e6:	4622      	mov	r2, r4
 800a9e8:	462b      	mov	r3, r5
 800a9ea:	f7f5 fd75 	bl	80004d8 <__aeabi_dmul>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	494c      	ldr	r1, [pc, #304]	; (800ab28 <__ieee754_pow+0x3d8>)
 800a9f6:	f7f5 fbb7 	bl	8000168 <__aeabi_dsub>
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	4680      	mov	r8, r0
 800aa00:	4689      	mov	r9, r1
 800aa02:	4620      	mov	r0, r4
 800aa04:	4629      	mov	r1, r5
 800aa06:	f7f5 fd67 	bl	80004d8 <__aeabi_dmul>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	f7f5 fd61 	bl	80004d8 <__aeabi_dmul>
 800aa16:	a340      	add	r3, pc, #256	; (adr r3, 800ab18 <__ieee754_pow+0x3c8>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f5 fd5c 	bl	80004d8 <__aeabi_dmul>
 800aa20:	4602      	mov	r2, r0
 800aa22:	460b      	mov	r3, r1
 800aa24:	4650      	mov	r0, sl
 800aa26:	4659      	mov	r1, fp
 800aa28:	f7f5 fb9e 	bl	8000168 <__aeabi_dsub>
 800aa2c:	f04f 0a00 	mov.w	sl, #0
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4604      	mov	r4, r0
 800aa36:	460d      	mov	r5, r1
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f5 fb96 	bl	800016c <__adddf3>
 800aa40:	4632      	mov	r2, r6
 800aa42:	463b      	mov	r3, r7
 800aa44:	4650      	mov	r0, sl
 800aa46:	468b      	mov	fp, r1
 800aa48:	f7f5 fb8e 	bl	8000168 <__aeabi_dsub>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4620      	mov	r0, r4
 800aa52:	4629      	mov	r1, r5
 800aa54:	f7f5 fb88 	bl	8000168 <__aeabi_dsub>
 800aa58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa5c:	9b00      	ldr	r3, [sp, #0]
 800aa5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa60:	3b01      	subs	r3, #1
 800aa62:	4313      	orrs	r3, r2
 800aa64:	f04f 0600 	mov.w	r6, #0
 800aa68:	f04f 0200 	mov.w	r2, #0
 800aa6c:	bf0c      	ite	eq
 800aa6e:	4b2f      	ldreq	r3, [pc, #188]	; (800ab2c <__ieee754_pow+0x3dc>)
 800aa70:	4b2b      	ldrne	r3, [pc, #172]	; (800ab20 <__ieee754_pow+0x3d0>)
 800aa72:	4604      	mov	r4, r0
 800aa74:	460d      	mov	r5, r1
 800aa76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa7a:	e9cd 2300 	strd	r2, r3, [sp]
 800aa7e:	4632      	mov	r2, r6
 800aa80:	463b      	mov	r3, r7
 800aa82:	f7f5 fb71 	bl	8000168 <__aeabi_dsub>
 800aa86:	4652      	mov	r2, sl
 800aa88:	465b      	mov	r3, fp
 800aa8a:	f7f5 fd25 	bl	80004d8 <__aeabi_dmul>
 800aa8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa92:	4680      	mov	r8, r0
 800aa94:	4689      	mov	r9, r1
 800aa96:	4620      	mov	r0, r4
 800aa98:	4629      	mov	r1, r5
 800aa9a:	f7f5 fd1d 	bl	80004d8 <__aeabi_dmul>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	f7f5 fb61 	bl	800016c <__adddf3>
 800aaaa:	4632      	mov	r2, r6
 800aaac:	463b      	mov	r3, r7
 800aaae:	4680      	mov	r8, r0
 800aab0:	4689      	mov	r9, r1
 800aab2:	4650      	mov	r0, sl
 800aab4:	4659      	mov	r1, fp
 800aab6:	f7f5 fd0f 	bl	80004d8 <__aeabi_dmul>
 800aaba:	4604      	mov	r4, r0
 800aabc:	460d      	mov	r5, r1
 800aabe:	460b      	mov	r3, r1
 800aac0:	4602      	mov	r2, r0
 800aac2:	4649      	mov	r1, r9
 800aac4:	4640      	mov	r0, r8
 800aac6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aaca:	f7f5 fb4f 	bl	800016c <__adddf3>
 800aace:	4b18      	ldr	r3, [pc, #96]	; (800ab30 <__ieee754_pow+0x3e0>)
 800aad0:	4682      	mov	sl, r0
 800aad2:	4299      	cmp	r1, r3
 800aad4:	460f      	mov	r7, r1
 800aad6:	460e      	mov	r6, r1
 800aad8:	f340 82e5 	ble.w	800b0a6 <__ieee754_pow+0x956>
 800aadc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aae0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aae4:	4303      	orrs	r3, r0
 800aae6:	f000 81df 	beq.w	800aea8 <__ieee754_pow+0x758>
 800aaea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f7f5 ff63 	bl	80009bc <__aeabi_dcmplt>
 800aaf6:	3800      	subs	r0, #0
 800aaf8:	bf18      	it	ne
 800aafa:	2001      	movne	r0, #1
 800aafc:	e72e      	b.n	800a95c <__ieee754_pow+0x20c>
 800aafe:	bf00      	nop
 800ab00:	60000000 	.word	0x60000000
 800ab04:	3ff71547 	.word	0x3ff71547
 800ab08:	f85ddf44 	.word	0xf85ddf44
 800ab0c:	3e54ae0b 	.word	0x3e54ae0b
 800ab10:	55555555 	.word	0x55555555
 800ab14:	3fd55555 	.word	0x3fd55555
 800ab18:	652b82fe 	.word	0x652b82fe
 800ab1c:	3ff71547 	.word	0x3ff71547
 800ab20:	3ff00000 	.word	0x3ff00000
 800ab24:	3fd00000 	.word	0x3fd00000
 800ab28:	3fe00000 	.word	0x3fe00000
 800ab2c:	bff00000 	.word	0xbff00000
 800ab30:	408fffff 	.word	0x408fffff
 800ab34:	4bd2      	ldr	r3, [pc, #840]	; (800ae80 <__ieee754_pow+0x730>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	402b      	ands	r3, r5
 800ab3a:	b943      	cbnz	r3, 800ab4e <__ieee754_pow+0x3fe>
 800ab3c:	4658      	mov	r0, fp
 800ab3e:	4661      	mov	r1, ip
 800ab40:	4bd0      	ldr	r3, [pc, #832]	; (800ae84 <__ieee754_pow+0x734>)
 800ab42:	f7f5 fcc9 	bl	80004d8 <__aeabi_dmul>
 800ab46:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ab4a:	4683      	mov	fp, r0
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	1523      	asrs	r3, r4, #20
 800ab50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ab54:	4413      	add	r3, r2
 800ab56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab58:	4bcb      	ldr	r3, [pc, #812]	; (800ae88 <__ieee754_pow+0x738>)
 800ab5a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ab5e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ab62:	429c      	cmp	r4, r3
 800ab64:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ab68:	dd08      	ble.n	800ab7c <__ieee754_pow+0x42c>
 800ab6a:	4bc8      	ldr	r3, [pc, #800]	; (800ae8c <__ieee754_pow+0x73c>)
 800ab6c:	429c      	cmp	r4, r3
 800ab6e:	f340 8199 	ble.w	800aea4 <__ieee754_pow+0x754>
 800ab72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab74:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ab78:	3301      	adds	r3, #1
 800ab7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab7c:	2600      	movs	r6, #0
 800ab7e:	00f3      	lsls	r3, r6, #3
 800ab80:	930d      	str	r3, [sp, #52]	; 0x34
 800ab82:	4bc3      	ldr	r3, [pc, #780]	; (800ae90 <__ieee754_pow+0x740>)
 800ab84:	4658      	mov	r0, fp
 800ab86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab8e:	4629      	mov	r1, r5
 800ab90:	461a      	mov	r2, r3
 800ab92:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ab96:	4623      	mov	r3, r4
 800ab98:	f7f5 fae6 	bl	8000168 <__aeabi_dsub>
 800ab9c:	46da      	mov	sl, fp
 800ab9e:	462b      	mov	r3, r5
 800aba0:	4652      	mov	r2, sl
 800aba2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aba6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abaa:	f7f5 fadf 	bl	800016c <__adddf3>
 800abae:	4602      	mov	r2, r0
 800abb0:	460b      	mov	r3, r1
 800abb2:	2000      	movs	r0, #0
 800abb4:	49b7      	ldr	r1, [pc, #732]	; (800ae94 <__ieee754_pow+0x744>)
 800abb6:	f7f5 fdb9 	bl	800072c <__aeabi_ddiv>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abc2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800abc6:	f7f5 fc87 	bl	80004d8 <__aeabi_dmul>
 800abca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abce:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800abd2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800abd6:	2300      	movs	r3, #0
 800abd8:	2200      	movs	r2, #0
 800abda:	46ab      	mov	fp, r5
 800abdc:	106d      	asrs	r5, r5, #1
 800abde:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800abe2:	9304      	str	r3, [sp, #16]
 800abe4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800abe8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800abec:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800abf0:	4640      	mov	r0, r8
 800abf2:	4649      	mov	r1, r9
 800abf4:	4614      	mov	r4, r2
 800abf6:	461d      	mov	r5, r3
 800abf8:	f7f5 fc6e 	bl	80004d8 <__aeabi_dmul>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ac04:	f7f5 fab0 	bl	8000168 <__aeabi_dsub>
 800ac08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	460f      	mov	r7, r1
 800ac10:	4620      	mov	r0, r4
 800ac12:	4629      	mov	r1, r5
 800ac14:	f7f5 faa8 	bl	8000168 <__aeabi_dsub>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4650      	mov	r0, sl
 800ac1e:	4659      	mov	r1, fp
 800ac20:	f7f5 faa2 	bl	8000168 <__aeabi_dsub>
 800ac24:	4642      	mov	r2, r8
 800ac26:	464b      	mov	r3, r9
 800ac28:	f7f5 fc56 	bl	80004d8 <__aeabi_dmul>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 fa98 	bl	8000168 <__aeabi_dsub>
 800ac38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac3c:	f7f5 fc4c 	bl	80004d8 <__aeabi_dmul>
 800ac40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac44:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac48:	4610      	mov	r0, r2
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	f7f5 fc44 	bl	80004d8 <__aeabi_dmul>
 800ac50:	a379      	add	r3, pc, #484	; (adr r3, 800ae38 <__ieee754_pow+0x6e8>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	4604      	mov	r4, r0
 800ac58:	460d      	mov	r5, r1
 800ac5a:	f7f5 fc3d 	bl	80004d8 <__aeabi_dmul>
 800ac5e:	a378      	add	r3, pc, #480	; (adr r3, 800ae40 <__ieee754_pow+0x6f0>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f7f5 fa82 	bl	800016c <__adddf3>
 800ac68:	4622      	mov	r2, r4
 800ac6a:	462b      	mov	r3, r5
 800ac6c:	f7f5 fc34 	bl	80004d8 <__aeabi_dmul>
 800ac70:	a375      	add	r3, pc, #468	; (adr r3, 800ae48 <__ieee754_pow+0x6f8>)
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	f7f5 fa79 	bl	800016c <__adddf3>
 800ac7a:	4622      	mov	r2, r4
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	f7f5 fc2b 	bl	80004d8 <__aeabi_dmul>
 800ac82:	a373      	add	r3, pc, #460	; (adr r3, 800ae50 <__ieee754_pow+0x700>)
 800ac84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac88:	f7f5 fa70 	bl	800016c <__adddf3>
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	462b      	mov	r3, r5
 800ac90:	f7f5 fc22 	bl	80004d8 <__aeabi_dmul>
 800ac94:	a370      	add	r3, pc, #448	; (adr r3, 800ae58 <__ieee754_pow+0x708>)
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	f7f5 fa67 	bl	800016c <__adddf3>
 800ac9e:	4622      	mov	r2, r4
 800aca0:	462b      	mov	r3, r5
 800aca2:	f7f5 fc19 	bl	80004d8 <__aeabi_dmul>
 800aca6:	a36e      	add	r3, pc, #440	; (adr r3, 800ae60 <__ieee754_pow+0x710>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	f7f5 fa5e 	bl	800016c <__adddf3>
 800acb0:	4622      	mov	r2, r4
 800acb2:	4606      	mov	r6, r0
 800acb4:	460f      	mov	r7, r1
 800acb6:	462b      	mov	r3, r5
 800acb8:	4620      	mov	r0, r4
 800acba:	4629      	mov	r1, r5
 800acbc:	f7f5 fc0c 	bl	80004d8 <__aeabi_dmul>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4630      	mov	r0, r6
 800acc6:	4639      	mov	r1, r7
 800acc8:	f7f5 fc06 	bl	80004d8 <__aeabi_dmul>
 800accc:	4604      	mov	r4, r0
 800acce:	460d      	mov	r5, r1
 800acd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acd4:	4642      	mov	r2, r8
 800acd6:	464b      	mov	r3, r9
 800acd8:	f7f5 fa48 	bl	800016c <__adddf3>
 800acdc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ace0:	f7f5 fbfa 	bl	80004d8 <__aeabi_dmul>
 800ace4:	4622      	mov	r2, r4
 800ace6:	462b      	mov	r3, r5
 800ace8:	f7f5 fa40 	bl	800016c <__adddf3>
 800acec:	4642      	mov	r2, r8
 800acee:	4606      	mov	r6, r0
 800acf0:	460f      	mov	r7, r1
 800acf2:	464b      	mov	r3, r9
 800acf4:	4640      	mov	r0, r8
 800acf6:	4649      	mov	r1, r9
 800acf8:	f7f5 fbee 	bl	80004d8 <__aeabi_dmul>
 800acfc:	2200      	movs	r2, #0
 800acfe:	4b66      	ldr	r3, [pc, #408]	; (800ae98 <__ieee754_pow+0x748>)
 800ad00:	4682      	mov	sl, r0
 800ad02:	468b      	mov	fp, r1
 800ad04:	f7f5 fa32 	bl	800016c <__adddf3>
 800ad08:	4632      	mov	r2, r6
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	f7f5 fa2e 	bl	800016c <__adddf3>
 800ad10:	2400      	movs	r4, #0
 800ad12:	460d      	mov	r5, r1
 800ad14:	4622      	mov	r2, r4
 800ad16:	460b      	mov	r3, r1
 800ad18:	4640      	mov	r0, r8
 800ad1a:	4649      	mov	r1, r9
 800ad1c:	f7f5 fbdc 	bl	80004d8 <__aeabi_dmul>
 800ad20:	2200      	movs	r2, #0
 800ad22:	4680      	mov	r8, r0
 800ad24:	4689      	mov	r9, r1
 800ad26:	4620      	mov	r0, r4
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4b5b      	ldr	r3, [pc, #364]	; (800ae98 <__ieee754_pow+0x748>)
 800ad2c:	f7f5 fa1c 	bl	8000168 <__aeabi_dsub>
 800ad30:	4652      	mov	r2, sl
 800ad32:	465b      	mov	r3, fp
 800ad34:	f7f5 fa18 	bl	8000168 <__aeabi_dsub>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	4639      	mov	r1, r7
 800ad40:	f7f5 fa12 	bl	8000168 <__aeabi_dsub>
 800ad44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad48:	f7f5 fbc6 	bl	80004d8 <__aeabi_dmul>
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	4606      	mov	r6, r0
 800ad50:	460f      	mov	r7, r1
 800ad52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad56:	462b      	mov	r3, r5
 800ad58:	f7f5 fbbe 	bl	80004d8 <__aeabi_dmul>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4630      	mov	r0, r6
 800ad62:	4639      	mov	r1, r7
 800ad64:	f7f5 fa02 	bl	800016c <__adddf3>
 800ad68:	2400      	movs	r4, #0
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	460f      	mov	r7, r1
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 f9f9 	bl	800016c <__adddf3>
 800ad7a:	a33b      	add	r3, pc, #236	; (adr r3, 800ae68 <__ieee754_pow+0x718>)
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	4620      	mov	r0, r4
 800ad82:	460d      	mov	r5, r1
 800ad84:	f7f5 fba8 	bl	80004d8 <__aeabi_dmul>
 800ad88:	4642      	mov	r2, r8
 800ad8a:	464b      	mov	r3, r9
 800ad8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad90:	4620      	mov	r0, r4
 800ad92:	4629      	mov	r1, r5
 800ad94:	f7f5 f9e8 	bl	8000168 <__aeabi_dsub>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	4639      	mov	r1, r7
 800ada0:	f7f5 f9e2 	bl	8000168 <__aeabi_dsub>
 800ada4:	a332      	add	r3, pc, #200	; (adr r3, 800ae70 <__ieee754_pow+0x720>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7f5 fb95 	bl	80004d8 <__aeabi_dmul>
 800adae:	a332      	add	r3, pc, #200	; (adr r3, 800ae78 <__ieee754_pow+0x728>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	4606      	mov	r6, r0
 800adb6:	460f      	mov	r7, r1
 800adb8:	4620      	mov	r0, r4
 800adba:	4629      	mov	r1, r5
 800adbc:	f7f5 fb8c 	bl	80004d8 <__aeabi_dmul>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 f9d0 	bl	800016c <__adddf3>
 800adcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adce:	4b33      	ldr	r3, [pc, #204]	; (800ae9c <__ieee754_pow+0x74c>)
 800add0:	f04f 0a00 	mov.w	sl, #0
 800add4:	4413      	add	r3, r2
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	f7f5 f9c7 	bl	800016c <__adddf3>
 800adde:	4680      	mov	r8, r0
 800ade0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ade2:	4689      	mov	r9, r1
 800ade4:	f7f5 fb0e 	bl	8000404 <__aeabi_i2d>
 800ade8:	4604      	mov	r4, r0
 800adea:	460d      	mov	r5, r1
 800adec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adee:	4b2c      	ldr	r3, [pc, #176]	; (800aea0 <__ieee754_pow+0x750>)
 800adf0:	4413      	add	r3, r2
 800adf2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800adf6:	4642      	mov	r2, r8
 800adf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adfc:	464b      	mov	r3, r9
 800adfe:	f7f5 f9b5 	bl	800016c <__adddf3>
 800ae02:	4632      	mov	r2, r6
 800ae04:	463b      	mov	r3, r7
 800ae06:	f7f5 f9b1 	bl	800016c <__adddf3>
 800ae0a:	4622      	mov	r2, r4
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	f7f5 f9ad 	bl	800016c <__adddf3>
 800ae12:	4622      	mov	r2, r4
 800ae14:	462b      	mov	r3, r5
 800ae16:	4650      	mov	r0, sl
 800ae18:	468b      	mov	fp, r1
 800ae1a:	f7f5 f9a5 	bl	8000168 <__aeabi_dsub>
 800ae1e:	4632      	mov	r2, r6
 800ae20:	463b      	mov	r3, r7
 800ae22:	f7f5 f9a1 	bl	8000168 <__aeabi_dsub>
 800ae26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae2a:	f7f5 f99d 	bl	8000168 <__aeabi_dsub>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4640      	mov	r0, r8
 800ae34:	4649      	mov	r1, r9
 800ae36:	e60d      	b.n	800aa54 <__ieee754_pow+0x304>
 800ae38:	4a454eef 	.word	0x4a454eef
 800ae3c:	3fca7e28 	.word	0x3fca7e28
 800ae40:	93c9db65 	.word	0x93c9db65
 800ae44:	3fcd864a 	.word	0x3fcd864a
 800ae48:	a91d4101 	.word	0xa91d4101
 800ae4c:	3fd17460 	.word	0x3fd17460
 800ae50:	518f264d 	.word	0x518f264d
 800ae54:	3fd55555 	.word	0x3fd55555
 800ae58:	db6fabff 	.word	0xdb6fabff
 800ae5c:	3fdb6db6 	.word	0x3fdb6db6
 800ae60:	33333303 	.word	0x33333303
 800ae64:	3fe33333 	.word	0x3fe33333
 800ae68:	e0000000 	.word	0xe0000000
 800ae6c:	3feec709 	.word	0x3feec709
 800ae70:	dc3a03fd 	.word	0xdc3a03fd
 800ae74:	3feec709 	.word	0x3feec709
 800ae78:	145b01f5 	.word	0x145b01f5
 800ae7c:	be3e2fe0 	.word	0xbe3e2fe0
 800ae80:	7ff00000 	.word	0x7ff00000
 800ae84:	43400000 	.word	0x43400000
 800ae88:	0003988e 	.word	0x0003988e
 800ae8c:	000bb679 	.word	0x000bb679
 800ae90:	0800b8a8 	.word	0x0800b8a8
 800ae94:	3ff00000 	.word	0x3ff00000
 800ae98:	40080000 	.word	0x40080000
 800ae9c:	0800b8c8 	.word	0x0800b8c8
 800aea0:	0800b8b8 	.word	0x0800b8b8
 800aea4:	2601      	movs	r6, #1
 800aea6:	e66a      	b.n	800ab7e <__ieee754_pow+0x42e>
 800aea8:	a39d      	add	r3, pc, #628	; (adr r3, 800b120 <__ieee754_pow+0x9d0>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	4640      	mov	r0, r8
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	f7f5 f95b 	bl	800016c <__adddf3>
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aebc:	462b      	mov	r3, r5
 800aebe:	4650      	mov	r0, sl
 800aec0:	4639      	mov	r1, r7
 800aec2:	f7f5 f951 	bl	8000168 <__aeabi_dsub>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aece:	f7f5 fd93 	bl	80009f8 <__aeabi_dcmpgt>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	f47f ae09 	bne.w	800aaea <__ieee754_pow+0x39a>
 800aed8:	4aa3      	ldr	r2, [pc, #652]	; (800b168 <__ieee754_pow+0xa18>)
 800aeda:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800aede:	4293      	cmp	r3, r2
 800aee0:	f340 8101 	ble.w	800b0e6 <__ieee754_pow+0x996>
 800aee4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800aee8:	2000      	movs	r0, #0
 800aeea:	151b      	asrs	r3, r3, #20
 800aeec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aef0:	fa4a f303 	asr.w	r3, sl, r3
 800aef4:	4433      	add	r3, r6
 800aef6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800aefa:	4f9c      	ldr	r7, [pc, #624]	; (800b16c <__ieee754_pow+0xa1c>)
 800aefc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800af00:	4117      	asrs	r7, r2
 800af02:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800af06:	ea23 0107 	bic.w	r1, r3, r7
 800af0a:	f1c2 0214 	rsb	r2, r2, #20
 800af0e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800af12:	460b      	mov	r3, r1
 800af14:	fa4a fa02 	asr.w	sl, sl, r2
 800af18:	2e00      	cmp	r6, #0
 800af1a:	4602      	mov	r2, r0
 800af1c:	4629      	mov	r1, r5
 800af1e:	4620      	mov	r0, r4
 800af20:	bfb8      	it	lt
 800af22:	f1ca 0a00 	rsblt	sl, sl, #0
 800af26:	f7f5 f91f 	bl	8000168 <__aeabi_dsub>
 800af2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af32:	2400      	movs	r4, #0
 800af34:	4642      	mov	r2, r8
 800af36:	464b      	mov	r3, r9
 800af38:	f7f5 f918 	bl	800016c <__adddf3>
 800af3c:	a37a      	add	r3, pc, #488	; (adr r3, 800b128 <__ieee754_pow+0x9d8>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	4620      	mov	r0, r4
 800af44:	460d      	mov	r5, r1
 800af46:	f7f5 fac7 	bl	80004d8 <__aeabi_dmul>
 800af4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af4e:	4606      	mov	r6, r0
 800af50:	460f      	mov	r7, r1
 800af52:	4620      	mov	r0, r4
 800af54:	4629      	mov	r1, r5
 800af56:	f7f5 f907 	bl	8000168 <__aeabi_dsub>
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	4640      	mov	r0, r8
 800af60:	4649      	mov	r1, r9
 800af62:	f7f5 f901 	bl	8000168 <__aeabi_dsub>
 800af66:	a372      	add	r3, pc, #456	; (adr r3, 800b130 <__ieee754_pow+0x9e0>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f7f5 fab4 	bl	80004d8 <__aeabi_dmul>
 800af70:	a371      	add	r3, pc, #452	; (adr r3, 800b138 <__ieee754_pow+0x9e8>)
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	4680      	mov	r8, r0
 800af78:	4689      	mov	r9, r1
 800af7a:	4620      	mov	r0, r4
 800af7c:	4629      	mov	r1, r5
 800af7e:	f7f5 faab 	bl	80004d8 <__aeabi_dmul>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4640      	mov	r0, r8
 800af88:	4649      	mov	r1, r9
 800af8a:	f7f5 f8ef 	bl	800016c <__adddf3>
 800af8e:	4604      	mov	r4, r0
 800af90:	460d      	mov	r5, r1
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	4630      	mov	r0, r6
 800af98:	4639      	mov	r1, r7
 800af9a:	f7f5 f8e7 	bl	800016c <__adddf3>
 800af9e:	4632      	mov	r2, r6
 800afa0:	463b      	mov	r3, r7
 800afa2:	4680      	mov	r8, r0
 800afa4:	4689      	mov	r9, r1
 800afa6:	f7f5 f8df 	bl	8000168 <__aeabi_dsub>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4620      	mov	r0, r4
 800afb0:	4629      	mov	r1, r5
 800afb2:	f7f5 f8d9 	bl	8000168 <__aeabi_dsub>
 800afb6:	4642      	mov	r2, r8
 800afb8:	4606      	mov	r6, r0
 800afba:	460f      	mov	r7, r1
 800afbc:	464b      	mov	r3, r9
 800afbe:	4640      	mov	r0, r8
 800afc0:	4649      	mov	r1, r9
 800afc2:	f7f5 fa89 	bl	80004d8 <__aeabi_dmul>
 800afc6:	a35e      	add	r3, pc, #376	; (adr r3, 800b140 <__ieee754_pow+0x9f0>)
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	4604      	mov	r4, r0
 800afce:	460d      	mov	r5, r1
 800afd0:	f7f5 fa82 	bl	80004d8 <__aeabi_dmul>
 800afd4:	a35c      	add	r3, pc, #368	; (adr r3, 800b148 <__ieee754_pow+0x9f8>)
 800afd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afda:	f7f5 f8c5 	bl	8000168 <__aeabi_dsub>
 800afde:	4622      	mov	r2, r4
 800afe0:	462b      	mov	r3, r5
 800afe2:	f7f5 fa79 	bl	80004d8 <__aeabi_dmul>
 800afe6:	a35a      	add	r3, pc, #360	; (adr r3, 800b150 <__ieee754_pow+0xa00>)
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	f7f5 f8be 	bl	800016c <__adddf3>
 800aff0:	4622      	mov	r2, r4
 800aff2:	462b      	mov	r3, r5
 800aff4:	f7f5 fa70 	bl	80004d8 <__aeabi_dmul>
 800aff8:	a357      	add	r3, pc, #348	; (adr r3, 800b158 <__ieee754_pow+0xa08>)
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f7f5 f8b3 	bl	8000168 <__aeabi_dsub>
 800b002:	4622      	mov	r2, r4
 800b004:	462b      	mov	r3, r5
 800b006:	f7f5 fa67 	bl	80004d8 <__aeabi_dmul>
 800b00a:	a355      	add	r3, pc, #340	; (adr r3, 800b160 <__ieee754_pow+0xa10>)
 800b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b010:	f7f5 f8ac 	bl	800016c <__adddf3>
 800b014:	4622      	mov	r2, r4
 800b016:	462b      	mov	r3, r5
 800b018:	f7f5 fa5e 	bl	80004d8 <__aeabi_dmul>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	4640      	mov	r0, r8
 800b022:	4649      	mov	r1, r9
 800b024:	f7f5 f8a0 	bl	8000168 <__aeabi_dsub>
 800b028:	4604      	mov	r4, r0
 800b02a:	460d      	mov	r5, r1
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4640      	mov	r0, r8
 800b032:	4649      	mov	r1, r9
 800b034:	f7f5 fa50 	bl	80004d8 <__aeabi_dmul>
 800b038:	2200      	movs	r2, #0
 800b03a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b03e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b042:	4620      	mov	r0, r4
 800b044:	4629      	mov	r1, r5
 800b046:	f7f5 f88f 	bl	8000168 <__aeabi_dsub>
 800b04a:	4602      	mov	r2, r0
 800b04c:	460b      	mov	r3, r1
 800b04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b052:	f7f5 fb6b 	bl	800072c <__aeabi_ddiv>
 800b056:	4632      	mov	r2, r6
 800b058:	4604      	mov	r4, r0
 800b05a:	460d      	mov	r5, r1
 800b05c:	463b      	mov	r3, r7
 800b05e:	4640      	mov	r0, r8
 800b060:	4649      	mov	r1, r9
 800b062:	f7f5 fa39 	bl	80004d8 <__aeabi_dmul>
 800b066:	4632      	mov	r2, r6
 800b068:	463b      	mov	r3, r7
 800b06a:	f7f5 f87f 	bl	800016c <__adddf3>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	4620      	mov	r0, r4
 800b074:	4629      	mov	r1, r5
 800b076:	f7f5 f877 	bl	8000168 <__aeabi_dsub>
 800b07a:	4642      	mov	r2, r8
 800b07c:	464b      	mov	r3, r9
 800b07e:	f7f5 f873 	bl	8000168 <__aeabi_dsub>
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	2000      	movs	r0, #0
 800b088:	4939      	ldr	r1, [pc, #228]	; (800b170 <__ieee754_pow+0xa20>)
 800b08a:	f7f5 f86d 	bl	8000168 <__aeabi_dsub>
 800b08e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b092:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b096:	da29      	bge.n	800b0ec <__ieee754_pow+0x99c>
 800b098:	4652      	mov	r2, sl
 800b09a:	f000 f955 	bl	800b348 <scalbn>
 800b09e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0a2:	f7ff bbfe 	b.w	800a8a2 <__ieee754_pow+0x152>
 800b0a6:	4b33      	ldr	r3, [pc, #204]	; (800b174 <__ieee754_pow+0xa24>)
 800b0a8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b0ac:	429f      	cmp	r7, r3
 800b0ae:	f77f af13 	ble.w	800aed8 <__ieee754_pow+0x788>
 800b0b2:	4b31      	ldr	r3, [pc, #196]	; (800b178 <__ieee754_pow+0xa28>)
 800b0b4:	440b      	add	r3, r1
 800b0b6:	4303      	orrs	r3, r0
 800b0b8:	d009      	beq.n	800b0ce <__ieee754_pow+0x97e>
 800b0ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f7f5 fc7b 	bl	80009bc <__aeabi_dcmplt>
 800b0c6:	3800      	subs	r0, #0
 800b0c8:	bf18      	it	ne
 800b0ca:	2001      	movne	r0, #1
 800b0cc:	e453      	b.n	800a976 <__ieee754_pow+0x226>
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	f7f5 f849 	bl	8000168 <__aeabi_dsub>
 800b0d6:	4642      	mov	r2, r8
 800b0d8:	464b      	mov	r3, r9
 800b0da:	f7f5 fc83 	bl	80009e4 <__aeabi_dcmpge>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f43f aefa 	beq.w	800aed8 <__ieee754_pow+0x788>
 800b0e4:	e7e9      	b.n	800b0ba <__ieee754_pow+0x96a>
 800b0e6:	f04f 0a00 	mov.w	sl, #0
 800b0ea:	e720      	b.n	800af2e <__ieee754_pow+0x7de>
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	e7d6      	b.n	800b09e <__ieee754_pow+0x94e>
 800b0f0:	f04f 0b00 	mov.w	fp, #0
 800b0f4:	f8df c078 	ldr.w	ip, [pc, #120]	; 800b170 <__ieee754_pow+0xa20>
 800b0f8:	f7ff bbba 	b.w	800a870 <__ieee754_pow+0x120>
 800b0fc:	f04f 0b00 	mov.w	fp, #0
 800b100:	f04f 0c00 	mov.w	ip, #0
 800b104:	f7ff bbb4 	b.w	800a870 <__ieee754_pow+0x120>
 800b108:	4640      	mov	r0, r8
 800b10a:	4649      	mov	r1, r9
 800b10c:	f7ff bb3d 	b.w	800a78a <__ieee754_pow+0x3a>
 800b110:	9200      	str	r2, [sp, #0]
 800b112:	f7ff bb89 	b.w	800a828 <__ieee754_pow+0xd8>
 800b116:	2300      	movs	r3, #0
 800b118:	f7ff bb73 	b.w	800a802 <__ieee754_pow+0xb2>
 800b11c:	f3af 8000 	nop.w
 800b120:	652b82fe 	.word	0x652b82fe
 800b124:	3c971547 	.word	0x3c971547
 800b128:	00000000 	.word	0x00000000
 800b12c:	3fe62e43 	.word	0x3fe62e43
 800b130:	fefa39ef 	.word	0xfefa39ef
 800b134:	3fe62e42 	.word	0x3fe62e42
 800b138:	0ca86c39 	.word	0x0ca86c39
 800b13c:	be205c61 	.word	0xbe205c61
 800b140:	72bea4d0 	.word	0x72bea4d0
 800b144:	3e663769 	.word	0x3e663769
 800b148:	c5d26bf1 	.word	0xc5d26bf1
 800b14c:	3ebbbd41 	.word	0x3ebbbd41
 800b150:	af25de2c 	.word	0xaf25de2c
 800b154:	3f11566a 	.word	0x3f11566a
 800b158:	16bebd93 	.word	0x16bebd93
 800b15c:	3f66c16c 	.word	0x3f66c16c
 800b160:	5555553e 	.word	0x5555553e
 800b164:	3fc55555 	.word	0x3fc55555
 800b168:	3fe00000 	.word	0x3fe00000
 800b16c:	000fffff 	.word	0x000fffff
 800b170:	3ff00000 	.word	0x3ff00000
 800b174:	4090cbff 	.word	0x4090cbff
 800b178:	3f6f3400 	.word	0x3f6f3400

0800b17c <__ieee754_sqrt>:
 800b17c:	f8df c158 	ldr.w	ip, [pc, #344]	; 800b2d8 <__ieee754_sqrt+0x15c>
 800b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b184:	ea3c 0c01 	bics.w	ip, ip, r1
 800b188:	4606      	mov	r6, r0
 800b18a:	460d      	mov	r5, r1
 800b18c:	460c      	mov	r4, r1
 800b18e:	460a      	mov	r2, r1
 800b190:	4607      	mov	r7, r0
 800b192:	4603      	mov	r3, r0
 800b194:	d10f      	bne.n	800b1b6 <__ieee754_sqrt+0x3a>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	f7f5 f99d 	bl	80004d8 <__aeabi_dmul>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	f7f4 ffe1 	bl	800016c <__adddf3>
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b6:	2900      	cmp	r1, #0
 800b1b8:	dc0e      	bgt.n	800b1d8 <__ieee754_sqrt+0x5c>
 800b1ba:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b1be:	ea5c 0707 	orrs.w	r7, ip, r7
 800b1c2:	d0f4      	beq.n	800b1ae <__ieee754_sqrt+0x32>
 800b1c4:	b141      	cbz	r1, 800b1d8 <__ieee754_sqrt+0x5c>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	f7f4 ffcd 	bl	8000168 <__aeabi_dsub>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	f7f5 faab 	bl	800072c <__aeabi_ddiv>
 800b1d6:	e7e8      	b.n	800b1aa <__ieee754_sqrt+0x2e>
 800b1d8:	1521      	asrs	r1, r4, #20
 800b1da:	d075      	beq.n	800b2c8 <__ieee754_sqrt+0x14c>
 800b1dc:	07cc      	lsls	r4, r1, #31
 800b1de:	f04f 0400 	mov.w	r4, #0
 800b1e2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b1e6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800b1ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b1ee:	bf5e      	ittt	pl
 800b1f0:	0fd9      	lsrpl	r1, r3, #31
 800b1f2:	005b      	lslpl	r3, r3, #1
 800b1f4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800b1f8:	0fd9      	lsrs	r1, r3, #31
 800b1fa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b1fe:	2516      	movs	r5, #22
 800b200:	4620      	mov	r0, r4
 800b202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b206:	107f      	asrs	r7, r7, #1
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	1846      	adds	r6, r0, r1
 800b20c:	4296      	cmp	r6, r2
 800b20e:	bfde      	ittt	le
 800b210:	1b92      	suble	r2, r2, r6
 800b212:	1870      	addle	r0, r6, r1
 800b214:	1864      	addle	r4, r4, r1
 800b216:	0052      	lsls	r2, r2, #1
 800b218:	3d01      	subs	r5, #1
 800b21a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b21e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b222:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b226:	d1f0      	bne.n	800b20a <__ieee754_sqrt+0x8e>
 800b228:	4629      	mov	r1, r5
 800b22a:	f04f 0e20 	mov.w	lr, #32
 800b22e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b232:	4282      	cmp	r2, r0
 800b234:	eb06 0c05 	add.w	ip, r6, r5
 800b238:	dc02      	bgt.n	800b240 <__ieee754_sqrt+0xc4>
 800b23a:	d113      	bne.n	800b264 <__ieee754_sqrt+0xe8>
 800b23c:	459c      	cmp	ip, r3
 800b23e:	d811      	bhi.n	800b264 <__ieee754_sqrt+0xe8>
 800b240:	f1bc 0f00 	cmp.w	ip, #0
 800b244:	eb0c 0506 	add.w	r5, ip, r6
 800b248:	da43      	bge.n	800b2d2 <__ieee754_sqrt+0x156>
 800b24a:	2d00      	cmp	r5, #0
 800b24c:	db41      	blt.n	800b2d2 <__ieee754_sqrt+0x156>
 800b24e:	f100 0801 	add.w	r8, r0, #1
 800b252:	1a12      	subs	r2, r2, r0
 800b254:	4640      	mov	r0, r8
 800b256:	459c      	cmp	ip, r3
 800b258:	bf88      	it	hi
 800b25a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b25e:	eba3 030c 	sub.w	r3, r3, ip
 800b262:	4431      	add	r1, r6
 800b264:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b268:	f1be 0e01 	subs.w	lr, lr, #1
 800b26c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800b270:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b274:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b278:	d1db      	bne.n	800b232 <__ieee754_sqrt+0xb6>
 800b27a:	4313      	orrs	r3, r2
 800b27c:	d006      	beq.n	800b28c <__ieee754_sqrt+0x110>
 800b27e:	1c48      	adds	r0, r1, #1
 800b280:	bf0b      	itete	eq
 800b282:	4671      	moveq	r1, lr
 800b284:	3101      	addne	r1, #1
 800b286:	3401      	addeq	r4, #1
 800b288:	f021 0101 	bicne.w	r1, r1, #1
 800b28c:	1063      	asrs	r3, r4, #1
 800b28e:	0849      	lsrs	r1, r1, #1
 800b290:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b294:	07e2      	lsls	r2, r4, #31
 800b296:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b29a:	bf48      	it	mi
 800b29c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b2a0:	460e      	mov	r6, r1
 800b2a2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b2a6:	e782      	b.n	800b1ae <__ieee754_sqrt+0x32>
 800b2a8:	0ada      	lsrs	r2, r3, #11
 800b2aa:	3815      	subs	r0, #21
 800b2ac:	055b      	lsls	r3, r3, #21
 800b2ae:	2a00      	cmp	r2, #0
 800b2b0:	d0fa      	beq.n	800b2a8 <__ieee754_sqrt+0x12c>
 800b2b2:	02d5      	lsls	r5, r2, #11
 800b2b4:	d50a      	bpl.n	800b2cc <__ieee754_sqrt+0x150>
 800b2b6:	f1c1 0420 	rsb	r4, r1, #32
 800b2ba:	fa23 f404 	lsr.w	r4, r3, r4
 800b2be:	1e4d      	subs	r5, r1, #1
 800b2c0:	408b      	lsls	r3, r1
 800b2c2:	4322      	orrs	r2, r4
 800b2c4:	1b41      	subs	r1, r0, r5
 800b2c6:	e789      	b.n	800b1dc <__ieee754_sqrt+0x60>
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	e7f0      	b.n	800b2ae <__ieee754_sqrt+0x132>
 800b2cc:	0052      	lsls	r2, r2, #1
 800b2ce:	3101      	adds	r1, #1
 800b2d0:	e7ef      	b.n	800b2b2 <__ieee754_sqrt+0x136>
 800b2d2:	4680      	mov	r8, r0
 800b2d4:	e7bd      	b.n	800b252 <__ieee754_sqrt+0xd6>
 800b2d6:	bf00      	nop
 800b2d8:	7ff00000 	.word	0x7ff00000

0800b2dc <with_errno>:
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	4604      	mov	r4, r0
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	4616      	mov	r6, r2
 800b2e4:	f7fc fabe 	bl	8007864 <__errno>
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	6006      	str	r6, [r0, #0]
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}

0800b2f0 <xflow>:
 800b2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2f2:	4615      	mov	r5, r2
 800b2f4:	461c      	mov	r4, r3
 800b2f6:	b180      	cbz	r0, 800b31a <xflow+0x2a>
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b2fe:	e9cd 0100 	strd	r0, r1, [sp]
 800b302:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b306:	4628      	mov	r0, r5
 800b308:	4621      	mov	r1, r4
 800b30a:	f7f5 f8e5 	bl	80004d8 <__aeabi_dmul>
 800b30e:	2222      	movs	r2, #34	; 0x22
 800b310:	b003      	add	sp, #12
 800b312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b316:	f7ff bfe1 	b.w	800b2dc <with_errno>
 800b31a:	4610      	mov	r0, r2
 800b31c:	4619      	mov	r1, r3
 800b31e:	e7ee      	b.n	800b2fe <xflow+0xe>

0800b320 <__math_uflow>:
 800b320:	2200      	movs	r2, #0
 800b322:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b326:	f7ff bfe3 	b.w	800b2f0 <xflow>

0800b32a <__math_oflow>:
 800b32a:	2200      	movs	r2, #0
 800b32c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b330:	f7ff bfde 	b.w	800b2f0 <xflow>

0800b334 <fabs>:
 800b334:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b338:	4770      	bx	lr

0800b33a <finite>:
 800b33a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b33e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b342:	0fc0      	lsrs	r0, r0, #31
 800b344:	4770      	bx	lr
	...

0800b348 <scalbn>:
 800b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b34e:	4604      	mov	r4, r0
 800b350:	460d      	mov	r5, r1
 800b352:	4617      	mov	r7, r2
 800b354:	460b      	mov	r3, r1
 800b356:	b996      	cbnz	r6, 800b37e <scalbn+0x36>
 800b358:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b35c:	4303      	orrs	r3, r0
 800b35e:	d039      	beq.n	800b3d4 <scalbn+0x8c>
 800b360:	4b33      	ldr	r3, [pc, #204]	; (800b430 <scalbn+0xe8>)
 800b362:	2200      	movs	r2, #0
 800b364:	f7f5 f8b8 	bl	80004d8 <__aeabi_dmul>
 800b368:	4b32      	ldr	r3, [pc, #200]	; (800b434 <scalbn+0xec>)
 800b36a:	4604      	mov	r4, r0
 800b36c:	429f      	cmp	r7, r3
 800b36e:	460d      	mov	r5, r1
 800b370:	da0f      	bge.n	800b392 <scalbn+0x4a>
 800b372:	a32b      	add	r3, pc, #172	; (adr r3, 800b420 <scalbn+0xd8>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	f7f5 f8ae 	bl	80004d8 <__aeabi_dmul>
 800b37c:	e006      	b.n	800b38c <scalbn+0x44>
 800b37e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b382:	4296      	cmp	r6, r2
 800b384:	d10a      	bne.n	800b39c <scalbn+0x54>
 800b386:	4602      	mov	r2, r0
 800b388:	f7f4 fef0 	bl	800016c <__adddf3>
 800b38c:	4604      	mov	r4, r0
 800b38e:	460d      	mov	r5, r1
 800b390:	e020      	b.n	800b3d4 <scalbn+0x8c>
 800b392:	460b      	mov	r3, r1
 800b394:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b398:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b39c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b3a0:	19b9      	adds	r1, r7, r6
 800b3a2:	4291      	cmp	r1, r2
 800b3a4:	dd0e      	ble.n	800b3c4 <scalbn+0x7c>
 800b3a6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b3aa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b3ae:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b3b2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b3b6:	4820      	ldr	r0, [pc, #128]	; (800b438 <scalbn+0xf0>)
 800b3b8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b3bc:	a31a      	add	r3, pc, #104	; (adr r3, 800b428 <scalbn+0xe0>)
 800b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c2:	e7d9      	b.n	800b378 <scalbn+0x30>
 800b3c4:	2900      	cmp	r1, #0
 800b3c6:	dd08      	ble.n	800b3da <scalbn+0x92>
 800b3c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b3d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3da:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b3de:	da12      	bge.n	800b406 <scalbn+0xbe>
 800b3e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b3e4:	429f      	cmp	r7, r3
 800b3e6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b3ea:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800b3ee:	dcdc      	bgt.n	800b3aa <scalbn+0x62>
 800b3f0:	a30b      	add	r3, pc, #44	; (adr r3, 800b420 <scalbn+0xd8>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b3fa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b3fe:	480f      	ldr	r0, [pc, #60]	; (800b43c <scalbn+0xf4>)
 800b400:	f041 011f 	orr.w	r1, r1, #31
 800b404:	e7b8      	b.n	800b378 <scalbn+0x30>
 800b406:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b40a:	3136      	adds	r1, #54	; 0x36
 800b40c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b410:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	2200      	movs	r2, #0
 800b41a:	4b09      	ldr	r3, [pc, #36]	; (800b440 <scalbn+0xf8>)
 800b41c:	e7ac      	b.n	800b378 <scalbn+0x30>
 800b41e:	bf00      	nop
 800b420:	c2f8f359 	.word	0xc2f8f359
 800b424:	01a56e1f 	.word	0x01a56e1f
 800b428:	8800759c 	.word	0x8800759c
 800b42c:	7e37e43c 	.word	0x7e37e43c
 800b430:	43500000 	.word	0x43500000
 800b434:	ffff3cb0 	.word	0xffff3cb0
 800b438:	8800759c 	.word	0x8800759c
 800b43c:	c2f8f359 	.word	0xc2f8f359
 800b440:	3c900000 	.word	0x3c900000

0800b444 <_init>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	bf00      	nop
 800b448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44a:	bc08      	pop	{r3}
 800b44c:	469e      	mov	lr, r3
 800b44e:	4770      	bx	lr

0800b450 <_fini>:
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	bf00      	nop
 800b454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b456:	bc08      	pop	{r3}
 800b458:	469e      	mov	lr, r3
 800b45a:	4770      	bx	lr
