
I2C_BH1750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005698  08005698  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005698  08005698  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005698  08005698  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000070  08005710  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08005710  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080ad  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a47  00000000  00000000  00028146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00029b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002a388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c46  00000000  00000000  0002aac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b48c  00000000  00000000  00042706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082d7a  00000000  00000000  0004db92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d090c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002420  00000000  00000000  000d095c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005614 	.word	0x08005614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005614 	.word	0x08005614

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <BH1750_ReadLux>:
#include "BH1750.h"

static uint8_t buffer[2];

unsigned int BH1750_ReadLux()
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b097      	sub	sp, #92	; 0x5c
 800092c:	af14      	add	r7, sp, #80	; 0x50
	unsigned int BH_H,BH_L;

	buffer[0] = OneTime_HResolution_Mode;
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <BH1750_ReadLux+0x94>)
 8000930:	2220      	movs	r2, #32
 8000932:	701a      	strb	r2, [r3, #0]

	I2C_Write(hi2c2, BH1750_ADDRESS, buffer, 1);
 8000934:	4c22      	ldr	r4, [pc, #136]	; (80009c0 <BH1750_ReadLux+0x98>)
 8000936:	2301      	movs	r3, #1
 8000938:	9313      	str	r3, [sp, #76]	; 0x4c
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <BH1750_ReadLux+0x94>)
 800093c:	9312      	str	r3, [sp, #72]	; 0x48
 800093e:	2323      	movs	r3, #35	; 0x23
 8000940:	9311      	str	r3, [sp, #68]	; 0x44
 8000942:	4668      	mov	r0, sp
 8000944:	f104 0310 	add.w	r3, r4, #16
 8000948:	2244      	movs	r2, #68	; 0x44
 800094a:	4619      	mov	r1, r3
 800094c:	f004 f9e0 	bl	8004d10 <memcpy>
 8000950:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000954:	f000 f838 	bl	80009c8 <I2C_Write>
	I2C_Read(hi2c2, BH1750_ADDRESS, buffer, sizeof(buffer));
 8000958:	4c19      	ldr	r4, [pc, #100]	; (80009c0 <BH1750_ReadLux+0x98>)
 800095a:	2302      	movs	r3, #2
 800095c:	9313      	str	r3, [sp, #76]	; 0x4c
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <BH1750_ReadLux+0x94>)
 8000960:	9312      	str	r3, [sp, #72]	; 0x48
 8000962:	2323      	movs	r3, #35	; 0x23
 8000964:	9311      	str	r3, [sp, #68]	; 0x44
 8000966:	4668      	mov	r0, sp
 8000968:	f104 0310 	add.w	r3, r4, #16
 800096c:	2244      	movs	r2, #68	; 0x44
 800096e:	4619      	mov	r1, r3
 8000970:	f004 f9ce 	bl	8004d10 <memcpy>
 8000974:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000978:	f000 f860 	bl	8000a3c <I2C_Read>

	BH_H = buffer[0];
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <BH1750_ReadLux+0x94>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	607b      	str	r3, [r7, #4]
	BH_L = buffer[1];
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <BH1750_ReadLux+0x94>)
 8000984:	785b      	ldrb	r3, [r3, #1]
 8000986:	603b      	str	r3, [r7, #0]
	BH_H <<= 8;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	607b      	str	r3, [r7, #4]
	BH_H |= BH_L;
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	4313      	orrs	r3, r2
 8000994:	607b      	str	r3, [r7, #4]
	return ((BH_H/1.2));				// Эту величину(в люксах) остается только вывести куда-либо
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fd1a 	bl	80003d0 <__aeabi_ui2d>
 800099c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <BH1750_ReadLux+0x9c>)
 80009a2:	f7ff feb9 	bl	8000718 <__aeabi_ddiv>
 80009a6:	4602      	mov	r2, r0
 80009a8:	460b      	mov	r3, r1
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	f7ff ff9b 	bl	80008e8 <__aeabi_d2uiz>
 80009b2:	4603      	mov	r3, r0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	2000008c 	.word	0x2000008c
 80009c0:	200000a0 	.word	0x200000a0
 80009c4:	3ff33333 	.word	0x3ff33333

080009c8 <I2C_Write>:
#include "i2c.h"

static char str[13];

void I2C_Write(I2C_HandleTypeDef hi, uint8_t DEV_ADDR, uint8_t *buffer, uint8_t sizebuf)
{
 80009c8:	b084      	sub	sp, #16
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	f107 0c08 	add.w	ip, r7, #8
 80009d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while(HAL_I2C_Master_Transmit(&hi, (uint16_t)(DEV_ADDR<<1), buffer, (uint16_t)sizebuf, (uint32_t)1000)!= HAL_OK)
 80009d8:	e011      	b.n	80009fe <I2C_Write+0x36>
	{
		/*	Не забываем свдинуть адрес на 1 влево, т.к HAL сам по себе добавляет бит в конец или нет в зависимости от
			 	 	 	 * чтения или наоборот записи в слэйв устройство	*/
		if (HAL_I2C_GetError(&hi) != HAL_I2C_ERROR_AF)
 80009da:	f107 0008 	add.w	r0, r7, #8
 80009de:	f001 ffd9 	bl	8002994 <HAL_I2C_GetError>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d00a      	beq.n	80009fe <I2C_Write+0x36>
		{
			sprintf(str, "Buffer error");
 80009e8:	4912      	ldr	r1, [pc, #72]	; (8000a34 <I2C_Write+0x6c>)
 80009ea:	4813      	ldr	r0, [pc, #76]	; (8000a38 <I2C_Write+0x70>)
 80009ec:	f004 f9a6 	bl	8004d3c <siprintf>
			LCD_SetPos(4, 0);
 80009f0:	2100      	movs	r1, #0
 80009f2:	2004      	movs	r0, #4
 80009f4:	f000 fa63 	bl	8000ebe <LCD_SetPos>
			LCD_SendString(str);
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <I2C_Write+0x70>)
 80009fa:	f000 fa2b 	bl	8000e54 <LCD_SendString>
	while(HAL_I2C_Master_Transmit(&hi, (uint16_t)(DEV_ADDR<<1), buffer, (uint16_t)sizebuf, (uint32_t)1000)!= HAL_OK)
 80009fe:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	b299      	uxth	r1, r3
 8000a08:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a12:	9200      	str	r2, [sp, #0]
 8000a14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a16:	f107 0008 	add.w	r0, r7, #8
 8000a1a:	f001 f9df 	bl	8001ddc <HAL_I2C_Master_Transmit>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1da      	bne.n	80009da <I2C_Write+0x12>
        }
	}
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a2e:	b004      	add	sp, #16
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	0800562c 	.word	0x0800562c
 8000a38:	20000090 	.word	0x20000090

08000a3c <I2C_Read>:

void I2C_Read(I2C_HandleTypeDef hi, uint8_t DEV_ADDR, uint8_t *buffer, uint8_t sizebuf)
{
 8000a3c:	b084      	sub	sp, #16
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af02      	add	r7, sp, #8
 8000a44:	f107 0c08 	add.w	ip, r7, #8
 8000a48:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while(HAL_I2C_Master_Receive(&hi, (uint16_t)(DEV_ADDR<<1), buffer, (uint16_t)sizebuf, (uint32_t)1000)!= HAL_OK)
 8000a4c:	e011      	b.n	8000a72 <I2C_Read+0x36>
	{
		if (HAL_I2C_GetError(&hi) != HAL_I2C_ERROR_AF)
 8000a4e:	f107 0008 	add.w	r0, r7, #8
 8000a52:	f001 ff9f 	bl	8002994 <HAL_I2C_GetError>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d00a      	beq.n	8000a72 <I2C_Read+0x36>
		{
			sprintf(str, "Buffer error");
 8000a5c:	4912      	ldr	r1, [pc, #72]	; (8000aa8 <I2C_Read+0x6c>)
 8000a5e:	4813      	ldr	r0, [pc, #76]	; (8000aac <I2C_Read+0x70>)
 8000a60:	f004 f96c 	bl	8004d3c <siprintf>
			LCD_SetPos(4, 0);
 8000a64:	2100      	movs	r1, #0
 8000a66:	2004      	movs	r0, #4
 8000a68:	f000 fa29 	bl	8000ebe <LCD_SetPos>
			LCD_SendString(str);
 8000a6c:	480f      	ldr	r0, [pc, #60]	; (8000aac <I2C_Read+0x70>)
 8000a6e:	f000 f9f1 	bl	8000e54 <LCD_SendString>
	while(HAL_I2C_Master_Receive(&hi, (uint16_t)(DEV_ADDR<<1), buffer, (uint16_t)sizebuf, (uint32_t)1000)!= HAL_OK)
 8000a72:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	b299      	uxth	r1, r3
 8000a7c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a86:	9200      	str	r2, [sp, #0]
 8000a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a8a:	f107 0008 	add.w	r0, r7, #8
 8000a8e:	f001 faa3 	bl	8001fd8 <HAL_I2C_Master_Receive>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1da      	bne.n	8000a4e <I2C_Read+0x12>
        }
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aa2:	b004      	add	sp, #16
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	0800562c 	.word	0x0800562c
 8000aac:	20000090 	.word	0x20000090

08000ab0 <delay>:
#include "lcd1602.h"


static void delay(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
     uint16_t i;
     for(i=0;i<1000;i++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	e002      	b.n	8000ac2 <delay+0x12>
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac8:	d3f8      	bcc.n	8000abc <delay+0xc>
	 {
	 }
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
	...

08000ad8 <LCD_WriteData>:
static void LCD_WriteData(uint8_t data)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if(((data>>3) & 0x01) == 1) d7_set();	else d7_reset();
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d005      	beq.n	8000afc <LCD_WriteData+0x24>
 8000af0:	2201      	movs	r2, #1
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	4820      	ldr	r0, [pc, #128]	; (8000b78 <LCD_WriteData+0xa0>)
 8000af6:	f001 f815 	bl	8001b24 <HAL_GPIO_WritePin>
 8000afa:	e004      	b.n	8000b06 <LCD_WriteData+0x2e>
 8000afc:	2200      	movs	r2, #0
 8000afe:	2140      	movs	r1, #64	; 0x40
 8000b00:	481d      	ldr	r0, [pc, #116]	; (8000b78 <LCD_WriteData+0xa0>)
 8000b02:	f001 f80f 	bl	8001b24 <HAL_GPIO_WritePin>
	if(((data>>2) & 0x01) == 1) d6_set();	else d6_reset();
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d005      	beq.n	8000b20 <LCD_WriteData+0x48>
 8000b14:	2201      	movs	r2, #1
 8000b16:	2120      	movs	r1, #32
 8000b18:	4817      	ldr	r0, [pc, #92]	; (8000b78 <LCD_WriteData+0xa0>)
 8000b1a:	f001 f803 	bl	8001b24 <HAL_GPIO_WritePin>
 8000b1e:	e004      	b.n	8000b2a <LCD_WriteData+0x52>
 8000b20:	2200      	movs	r2, #0
 8000b22:	2120      	movs	r1, #32
 8000b24:	4814      	ldr	r0, [pc, #80]	; (8000b78 <LCD_WriteData+0xa0>)
 8000b26:	f000 fffd 	bl	8001b24 <HAL_GPIO_WritePin>
	if(((data>>1) & 0x01) == 1) d5_set();	else d5_reset();
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <LCD_WriteData+0x6c>
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	480e      	ldr	r0, [pc, #56]	; (8000b78 <LCD_WriteData+0xa0>)
 8000b3e:	f000 fff1 	bl	8001b24 <HAL_GPIO_WritePin>
 8000b42:	e004      	b.n	8000b4e <LCD_WriteData+0x76>
 8000b44:	2200      	movs	r2, #0
 8000b46:	2110      	movs	r1, #16
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <LCD_WriteData+0xa0>)
 8000b4a:	f000 ffeb 	bl	8001b24 <HAL_GPIO_WritePin>
	if((data & 0x01) == 1) 		d4_set();	else d4_reset();
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d005      	beq.n	8000b64 <LCD_WriteData+0x8c>
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2108      	movs	r1, #8
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <LCD_WriteData+0xa0>)
 8000b5e:	f000 ffe1 	bl	8001b24 <HAL_GPIO_WritePin>
	/*
	 	 Здесь мы проверяем на биты, 0 или 1. Двигаем сначала самый старший на место самого младшего и делаем лг. И
	 	 с единицой. Если в том разряде 1 то пишем лог.1 в соответсвующий пин, если нет, то пишем ноль
	 */
}
 8000b62:	e004      	b.n	8000b6e <LCD_WriteData+0x96>
	if((data & 0x01) == 1) 		d4_set();	else d4_reset();
 8000b64:	2200      	movs	r2, #0
 8000b66:	2108      	movs	r1, #8
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <LCD_WriteData+0xa0>)
 8000b6a:	f000 ffdb 	bl	8001b24 <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40010c00 	.word	0x40010c00

08000b7c <LCD_Data>:
static void LCD_Data(uint8_t dt)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
    rs1;
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8c:	4814      	ldr	r0, [pc, #80]	; (8000be0 <LCD_Data+0x64>)
 8000b8e:	f000 ffc9 	bl	8001b24 <HAL_GPIO_WritePin>
    LCD_WriteData(dt>>4);	// Младшая тетрада
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff9d 	bl	8000ad8 <LCD_WriteData>
    e1;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	480f      	ldr	r0, [pc, #60]	; (8000be0 <LCD_Data+0x64>)
 8000ba4:	f000 ffbe 	bl	8001b24 <HAL_GPIO_WritePin>
    delay();
 8000ba8:	f7ff ff82 	bl	8000ab0 <delay>
    e0;
 8000bac:	2200      	movs	r2, #0
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LCD_Data+0x64>)
 8000bb2:	f000 ffb7 	bl	8001b24 <HAL_GPIO_WritePin>
    LCD_WriteData(dt);		// Затем старшая
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff8d 	bl	8000ad8 <LCD_WriteData>
    e1;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <LCD_Data+0x64>)
 8000bc4:	f000 ffae 	bl	8001b24 <HAL_GPIO_WritePin>
    delay();
 8000bc8:	f7ff ff72 	bl	8000ab0 <delay>
    e0;
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <LCD_Data+0x64>)
 8000bd2:	f000 ffa7 	bl	8001b24 <HAL_GPIO_WritePin>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <LCD_Command>:

static void LCD_Command(uint8_t dt)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
    rs0;
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf4:	4814      	ldr	r0, [pc, #80]	; (8000c48 <LCD_Command+0x64>)
 8000bf6:	f000 ff95 	bl	8001b24 <HAL_GPIO_WritePin>
    LCD_WriteData(dt>>4);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	091b      	lsrs	r3, r3, #4
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff69 	bl	8000ad8 <LCD_WriteData>
    e1;
 8000c06:	2201      	movs	r2, #1
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	480f      	ldr	r0, [pc, #60]	; (8000c48 <LCD_Command+0x64>)
 8000c0c:	f000 ff8a 	bl	8001b24 <HAL_GPIO_WritePin>
    delay();
 8000c10:	f7ff ff4e 	bl	8000ab0 <delay>
    e0;
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <LCD_Command+0x64>)
 8000c1a:	f000 ff83 	bl	8001b24 <HAL_GPIO_WritePin>
    LCD_WriteData(dt);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff59 	bl	8000ad8 <LCD_WriteData>
    e1;
 8000c26:	2201      	movs	r2, #1
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <LCD_Command+0x64>)
 8000c2c:	f000 ff7a 	bl	8001b24 <HAL_GPIO_WritePin>
    delay();
 8000c30:	f7ff ff3e 	bl	8000ab0 <delay>
    e0;
 8000c34:	2200      	movs	r2, #0
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <LCD_Command+0x64>)
 8000c3a:	f000 ff73 	bl	8001b24 <HAL_GPIO_WritePin>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40010c00 	.word	0x40010c00

08000c4c <LCD_convertDigitToChar>:
static uint8_t LCD_convertDigitToChar(uint8_t i) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	switch(i) {
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b09      	cmp	r3, #9
 8000c5a:	d82b      	bhi.n	8000cb4 <LCD_convertDigitToChar+0x68>
 8000c5c:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <LCD_convertDigitToChar+0x18>)
 8000c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c62:	bf00      	nop
 8000c64:	08000c8d 	.word	0x08000c8d
 8000c68:	08000c91 	.word	0x08000c91
 8000c6c:	08000c95 	.word	0x08000c95
 8000c70:	08000c99 	.word	0x08000c99
 8000c74:	08000c9d 	.word	0x08000c9d
 8000c78:	08000ca1 	.word	0x08000ca1
 8000c7c:	08000ca5 	.word	0x08000ca5
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	08000cb1 	.word	0x08000cb1
		case 0: return char_0;
 8000c8c:	2330      	movs	r3, #48	; 0x30
 8000c8e:	e012      	b.n	8000cb6 <LCD_convertDigitToChar+0x6a>
		break;
		case 1: return char_1;
 8000c90:	2331      	movs	r3, #49	; 0x31
 8000c92:	e010      	b.n	8000cb6 <LCD_convertDigitToChar+0x6a>
		break;
		case 2: return char_2;
 8000c94:	2332      	movs	r3, #50	; 0x32
 8000c96:	e00e      	b.n	8000cb6 <LCD_convertDigitToChar+0x6a>
		break;
		case 3: return char_3;
 8000c98:	2333      	movs	r3, #51	; 0x33
 8000c9a:	e00c      	b.n	8000cb6 <LCD_convertDigitToChar+0x6a>
		break;
		case 4: return char_4;
 8000c9c:	2334      	movs	r3, #52	; 0x34
 8000c9e:	e00a      	b.n	8000cb6 <LCD_convertDigitToChar+0x6a>
		break;
		case 5: return char_5;
 8000ca0:	2335      	movs	r3, #53	; 0x35
 8000ca2:	e008      	b.n	8000cb6 <LCD_convertDigitToChar+0x6a>
		break;
		case 6: return char_6;
 8000ca4:	2336      	movs	r3, #54	; 0x36
 8000ca6:	e006      	b.n	8000cb6 <LCD_convertDigitToChar+0x6a>
		break;
		case 7: return char_7;
 8000ca8:	2337      	movs	r3, #55	; 0x37
 8000caa:	e004      	b.n	8000cb6 <LCD_convertDigitToChar+0x6a>
		break;
		case 8: return char_8;
 8000cac:	2338      	movs	r3, #56	; 0x38
 8000cae:	e002      	b.n	8000cb6 <LCD_convertDigitToChar+0x6a>
		break;
		case 9: return char_9;
 8000cb0:	2339      	movs	r3, #57	; 0x39
 8000cb2:	e000      	b.n	8000cb6 <LCD_convertDigitToChar+0x6a>
		break;
		default: return char_0;
 8000cb4:	2330      	movs	r3, #48	; 0x30
	}
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <LCD_SendIntDigit>:
void LCD_SendIntDigit(int digit)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	int buf = digit;	// буффер
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t str[16] = {};	// Строка, которая у нас получится с числом, проинициализирована нулями
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
	int k = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]

	if(digit > 0)		// Если число положительное
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	dd51      	ble.n	8000d8a <LCD_SendIntDigit+0xca>
	{
		for (int8_t i = 15; i >= 0; i--)
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	77fb      	strb	r3, [r7, #31]
 8000cea:	e023      	b.n	8000d34 <LCD_SendIntDigit+0x74>
		{
				if(buf > 0)				// Как только разделим последнюю цифру сюда уже не войдём
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	dd25      	ble.n	8000d3e <LCD_SendIntDigit+0x7e>
				{
					str[i] = buf % 10;	// Записываем с конца по-тихоньку число
 8000cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf4:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <LCD_SendIntDigit+0x190>)
 8000cf6:	fb83 1302 	smull	r1, r3, r3, r2
 8000cfa:	1099      	asrs	r1, r3, #2
 8000cfc:	17d3      	asrs	r3, r2, #31
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	460b      	mov	r3, r1
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	1ad1      	subs	r1, r2, r3
 8000d0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	3328      	adds	r3, #40	; 0x28
 8000d12:	443b      	add	r3, r7
 8000d14:	f803 2c1c 	strb.w	r2, [r3, #-28]
					buf /= 10;			// Делим на 10, дробная часть будет отбрасываться
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	4a4d      	ldr	r2, [pc, #308]	; (8000e50 <LCD_SendIntDigit+0x190>)
 8000d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d20:	1092      	asrs	r2, r2, #2
 8000d22:	17db      	asrs	r3, r3, #31
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
		for (int8_t i = 15; i >= 0; i--)
 8000d28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	77fb      	strb	r3, [r7, #31]
 8000d34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	dad7      	bge.n	8000cec <LCD_SendIntDigit+0x2c>
 8000d3c:	e000      	b.n	8000d40 <LCD_SendIntDigit+0x80>
					continue;			// Пропускаем break
				}
				break;					// Если записали все число
 8000d3e:	bf00      	nop
		}
		for (uint8_t i = 0; i < 16; i++)			// Все работает!!
 8000d40:	2300      	movs	r3, #0
 8000d42:	77bb      	strb	r3, [r7, #30]
 8000d44:	e01d      	b.n	8000d82 <LCD_SendIntDigit+0xc2>
		{
			if(str[i] == 0 && k == 0) continue;
 8000d46:	7fbb      	ldrb	r3, [r7, #30]
 8000d48:	3328      	adds	r3, #40	; 0x28
 8000d4a:	443b      	add	r3, r7
 8000d4c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <LCD_SendIntDigit+0x9a>
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00f      	beq.n	8000d7a <LCD_SendIntDigit+0xba>
				и использовать в условии пропуска, т.к просто условия str[i] == 0 недостотчно, ибо в числе
				могут присутствовать нули и они просто не выведутся на экран
			*/
			else
			{
				LCD_SendChar(LCD_convertDigitToChar(str[i]));	// Передали один символ массива преобразованный к чару
 8000d5a:	7fbb      	ldrb	r3, [r7, #30]
 8000d5c:	3328      	adds	r3, #40	; 0x28
 8000d5e:	443b      	add	r3, r7
 8000d60:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff71 	bl	8000c4c <LCD_convertDigitToChar>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f88d 	bl	8000e8c <LCD_SendChar>
				k++;
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	3301      	adds	r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
 8000d78:	e000      	b.n	8000d7c <LCD_SendIntDigit+0xbc>
			if(str[i] == 0 && k == 0) continue;
 8000d7a:	bf00      	nop
		for (uint8_t i = 0; i < 16; i++)			// Все работает!!
 8000d7c:	7fbb      	ldrb	r3, [r7, #30]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	77bb      	strb	r3, [r7, #30]
 8000d82:	7fbb      	ldrb	r3, [r7, #30]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d9de      	bls.n	8000d46 <LCD_SendIntDigit+0x86>
				LCD_SendChar(LCD_convertDigitToChar( str[i]) );	// Передали один символ массива преобразованный к чару
				k++;
			}
		}
	}
}
 8000d88:	e05d      	b.n	8000e46 <LCD_SendIntDigit+0x186>
	else if(digit == 0) LCD_SendChar('0');
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d103      	bne.n	8000d98 <LCD_SendIntDigit+0xd8>
 8000d90:	2030      	movs	r0, #48	; 0x30
 8000d92:	f000 f87b 	bl	8000e8c <LCD_SendChar>
}
 8000d96:	e056      	b.n	8000e46 <LCD_SendIntDigit+0x186>
		LCD_SendChar(_MINUS);					// Вначале будет минус
 8000d98:	202d      	movs	r0, #45	; 0x2d
 8000d9a:	f000 f877 	bl	8000e8c <LCD_SendChar>
		buf = buf - (2*buf);			// Делаем из отрицательного положиетльное
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	425b      	negs	r3, r3
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
		for (int8_t i = 15; i >= 0; i--)
 8000da4:	230f      	movs	r3, #15
 8000da6:	777b      	strb	r3, [r7, #29]
 8000da8:	e023      	b.n	8000df2 <LCD_SendIntDigit+0x132>
			if(buf > 0)				// Как только разделим последнюю цифру сюда уже не войдём
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	dd25      	ble.n	8000dfc <LCD_SendIntDigit+0x13c>
				str[i] = buf % 10;	// Записываем с конца по-тихоньку число
 8000db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <LCD_SendIntDigit+0x190>)
 8000db4:	fb83 1302 	smull	r1, r3, r3, r2
 8000db8:	1099      	asrs	r1, r3, #2
 8000dba:	17d3      	asrs	r3, r2, #31
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	1ad1      	subs	r1, r2, r3
 8000dc8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000dcc:	b2ca      	uxtb	r2, r1
 8000dce:	3328      	adds	r3, #40	; 0x28
 8000dd0:	443b      	add	r3, r7
 8000dd2:	f803 2c1c 	strb.w	r2, [r3, #-28]
				buf /= 10;			// Делим на 10, дробная часть будет отбрасываться
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <LCD_SendIntDigit+0x190>)
 8000dda:	fb82 1203 	smull	r1, r2, r2, r3
 8000dde:	1092      	asrs	r2, r2, #2
 8000de0:	17db      	asrs	r3, r3, #31
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int8_t i = 15; i >= 0; i--)
 8000de6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	3b01      	subs	r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	777b      	strb	r3, [r7, #29]
 8000df2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	dad7      	bge.n	8000daa <LCD_SendIntDigit+0xea>
 8000dfa:	e000      	b.n	8000dfe <LCD_SendIntDigit+0x13e>
			break;					// Если записали все число
 8000dfc:	bf00      	nop
		for (uint8_t i = 0; i < 16; i++)			// Все работает!!
 8000dfe:	2300      	movs	r3, #0
 8000e00:	773b      	strb	r3, [r7, #28]
 8000e02:	e01d      	b.n	8000e40 <LCD_SendIntDigit+0x180>
			if(str[i] == 0 && k == 0) continue;
 8000e04:	7f3b      	ldrb	r3, [r7, #28]
 8000e06:	3328      	adds	r3, #40	; 0x28
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <LCD_SendIntDigit+0x158>
 8000e12:	6a3b      	ldr	r3, [r7, #32]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00f      	beq.n	8000e38 <LCD_SendIntDigit+0x178>
				LCD_SendChar(LCD_convertDigitToChar( str[i]) );	// Передали один символ массива преобразованный к чару
 8000e18:	7f3b      	ldrb	r3, [r7, #28]
 8000e1a:	3328      	adds	r3, #40	; 0x28
 8000e1c:	443b      	add	r3, r7
 8000e1e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff12 	bl	8000c4c <LCD_convertDigitToChar>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f82e 	bl	8000e8c <LCD_SendChar>
				k++;
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	3301      	adds	r3, #1
 8000e34:	623b      	str	r3, [r7, #32]
 8000e36:	e000      	b.n	8000e3a <LCD_SendIntDigit+0x17a>
			if(str[i] == 0 && k == 0) continue;
 8000e38:	bf00      	nop
		for (uint8_t i = 0; i < 16; i++)			// Все работает!!
 8000e3a:	7f3b      	ldrb	r3, [r7, #28]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	773b      	strb	r3, [r7, #28]
 8000e40:	7f3b      	ldrb	r3, [r7, #28]
 8000e42:	2b0f      	cmp	r3, #15
 8000e44:	d9de      	bls.n	8000e04 <LCD_SendIntDigit+0x144>
}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	66666667 	.word	0x66666667

08000e54 <LCD_SendString>:
void LCD_SendFloatDigit(float digit)
{

}
void LCD_SendString(const char *str)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; str[i] != '\0'; i++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e009      	b.n	8000e76 <LCD_SendString+0x22>
	{
		LCD_SendChar(str[i]);
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f80e 	bl	8000e8c <LCD_SendChar>
	for (uint8_t i = 0; str[i] != '\0'; i++)
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	3301      	adds	r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1ef      	bne.n	8000e62 <LCD_SendString+0xe>
	}
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <LCD_SendChar>:

void LCD_SendChar(const char ch)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
    LCD_Data((uint8_t )ch);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe6f 	bl	8000b7c <LCD_Data>
    delay();
 8000e9e:	f7ff fe07 	bl	8000ab0 <delay>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <LCD_Clear>:
void LCD_Clear(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
    LCD_Command(0x01);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff fe98 	bl	8000be4 <LCD_Command>
    HAL_Delay(2);
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f000 fafd 	bl	80014b4 <HAL_Delay>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <LCD_SetPos>:
void LCD_SetPos(uint8_t x, uint8_t y)

{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	460a      	mov	r2, r1
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	71bb      	strb	r3, [r7, #6]
    switch(y)
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <LCD_SetPos+0x1c>
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d00b      	beq.n	8000ef0 <LCD_SetPos+0x32>
        	LCD_Command((0x40+x)|0x80);
        	HAL_Delay(1);
        	break;
        }

}
 8000ed8:	e019      	b.n	8000f0e <LCD_SetPos+0x50>
    		LCD_Command(x|0x80);	// 0x80 пишем, потому что это условие для команды Set DDRAM Address. 1 в бите DB7
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fe7e 	bl	8000be4 <LCD_Command>
            HAL_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fae3 	bl	80014b4 <HAL_Delay>
            break;
 8000eee:	e00e      	b.n	8000f0e <LCD_SetPos+0x50>
        	LCD_Command((0x40+x)|0x80);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	3340      	adds	r3, #64	; 0x40
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fe6f 	bl	8000be4 <LCD_Command>
        	HAL_Delay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 fad4 	bl	80014b4 <HAL_Delay>
        	break;
 8000f0c:	bf00      	nop
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <LCD_ini>:
//----------------------------------------
void LCD_ini(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_Delay(40);
 8000f1c:	2028      	movs	r0, #40	; 0x28
 8000f1e:	f000 fac9 	bl	80014b4 <HAL_Delay>
	rs0;
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f28:	482c      	ldr	r0, [pc, #176]	; (8000fdc <LCD_ini+0xc4>)
 8000f2a:	f000 fdfb 	bl	8001b24 <HAL_GPIO_WritePin>
	LCD_WriteData(3);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f7ff fdd2 	bl	8000ad8 <LCD_WriteData>
	e1;
 8000f34:	2201      	movs	r2, #1
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	4828      	ldr	r0, [pc, #160]	; (8000fdc <LCD_ini+0xc4>)
 8000f3a:	f000 fdf3 	bl	8001b24 <HAL_GPIO_WritePin>
	delay();
 8000f3e:	f7ff fdb7 	bl	8000ab0 <delay>
	e0;
 8000f42:	2200      	movs	r2, #0
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	4825      	ldr	r0, [pc, #148]	; (8000fdc <LCD_ini+0xc4>)
 8000f48:	f000 fdec 	bl	8001b24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f000 fab1 	bl	80014b4 <HAL_Delay>
	LCD_WriteData(3);
 8000f52:	2003      	movs	r0, #3
 8000f54:	f7ff fdc0 	bl	8000ad8 <LCD_WriteData>
	e1;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	481f      	ldr	r0, [pc, #124]	; (8000fdc <LCD_ini+0xc4>)
 8000f5e:	f000 fde1 	bl	8001b24 <HAL_GPIO_WritePin>
	delay();
 8000f62:	f7ff fda5 	bl	8000ab0 <delay>
	e0;
 8000f66:	2200      	movs	r2, #0
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	481c      	ldr	r0, [pc, #112]	; (8000fdc <LCD_ini+0xc4>)
 8000f6c:	f000 fdda 	bl	8001b24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f000 fa9f 	bl	80014b4 <HAL_Delay>
	LCD_WriteData(3);
 8000f76:	2003      	movs	r0, #3
 8000f78:	f7ff fdae 	bl	8000ad8 <LCD_WriteData>
	e1;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	4816      	ldr	r0, [pc, #88]	; (8000fdc <LCD_ini+0xc4>)
 8000f82:	f000 fdcf 	bl	8001b24 <HAL_GPIO_WritePin>
	delay();
 8000f86:	f7ff fd93 	bl	8000ab0 <delay>
	e0;
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	4813      	ldr	r0, [pc, #76]	; (8000fdc <LCD_ini+0xc4>)
 8000f90:	f000 fdc8 	bl	8001b24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f000 fa8d 	bl	80014b4 <HAL_Delay>
	LCD_Command(0x08);//режим 4 бит, 2 линии (для нашего большого дисплея это 4 линии, шрифт 5х8
 8000f9a:	2008      	movs	r0, #8
 8000f9c:	f7ff fe22 	bl	8000be4 <LCD_Command>
//	HAL_Delay(1);
//	LCD_Command(0x28);//еще раз для верности
	HAL_Delay(1);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f000 fa87 	bl	80014b4 <HAL_Delay>
	LCD_Command(0x0C);//дисплей включаем (D=1), курсоры никакие не нужны
 8000fa6:	200c      	movs	r0, #12
 8000fa8:	f7ff fe1c 	bl	8000be4 <LCD_Command>
	HAL_Delay(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f000 fa81 	bl	80014b4 <HAL_Delay>
	LCD_Command(0x01);//уберем мусор
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fe16 	bl	8000be4 <LCD_Command>
	HAL_Delay(2);
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f000 fa7b 	bl	80014b4 <HAL_Delay>
	LCD_Command(0x06);//пишем влево
 8000fbe:	2006      	movs	r0, #6
 8000fc0:	f7ff fe10 	bl	8000be4 <LCD_Command>
	HAL_Delay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 fa75 	bl	80014b4 <HAL_Delay>
	LCD_Command(0x02);//возвращаем курсор в нулевое положение
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f7ff fe0a 	bl	8000be4 <LCD_Command>
	HAL_Delay(2);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f000 fa6f 	bl	80014b4 <HAL_Delay>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40010c00 	.word	0x40010c00

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fa03 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f82c 	bl	8001046 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f000 f899 	bl	8001124 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ff2:	f000 f869 	bl	80010c8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LCD_ini();
 8000ff6:	f7ff ff8f 	bl	8000f18 <LCD_ini>
  LCD_Clear();
 8000ffa:	f7ff ff56 	bl	8000eaa <LCD_Clear>
  LCD_SendChar('я');
 8000ffe:	208f      	movs	r0, #143	; 0x8f
 8001000:	f7ff ff44 	bl	8000e8c <LCD_SendChar>
  HAL_Delay(1000);
 8001004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001008:	f000 fa54 	bl	80014b4 <HAL_Delay>
  LCD_SendChar(232);
 800100c:	20e8      	movs	r0, #232	; 0xe8
 800100e:	f7ff ff3d 	bl	8000e8c <LCD_SendChar>
  /*char *str = "Stm32F407VG";
  LCD_SendString(str);

  LCD_SetPos(0, 1);
  LCD_SendString("Next theme!");*/
  HAL_Delay(1000);
 8001012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001016:	f000 fa4d 	bl	80014b4 <HAL_Delay>
  LCD_Clear();
 800101a:	f7ff ff46 	bl	8000eaa <LCD_Clear>
  LCD_SetPos(0, 1);
 800101e:	2101      	movs	r1, #1
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff ff4c 	bl	8000ebe <LCD_SetPos>
  //LCD_SendIntDigit(-256);


  unsigned int luxValue = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  luxValue = BH1750_ReadLux();
 800102a:	f7ff fc7d 	bl	8000928 <BH1750_ReadLux>
 800102e:	6078      	str	r0, [r7, #4]
	  LCD_SendIntDigit(luxValue);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fe44 	bl	8000cc0 <LCD_SendIntDigit>
	  HAL_Delay(1000);
 8001038:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800103c:	f000 fa3a 	bl	80014b4 <HAL_Delay>
	  LCD_Clear();
 8001040:	f7ff ff33 	bl	8000eaa <LCD_Clear>
	  luxValue = BH1750_ReadLux();
 8001044:	e7f1      	b.n	800102a <main+0x4a>

08001046 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b090      	sub	sp, #64	; 0x40
 800104a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	2228      	movs	r2, #40	; 0x28
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f003 fe69 	bl	8004d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2310      	movs	r3, #16
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001078:	2300      	movs	r3, #0
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800107c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8001080:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	4618      	mov	r0, r3
 8001088:	f003 fa12 	bl	80044b0 <HAL_RCC_OscConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001092:	f000 f887 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001096:	230f      	movs	r3, #15
 8001098:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109a:	2302      	movs	r3, #2
 800109c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2101      	movs	r1, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fc7f 	bl	80049b4 <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010bc:	f000 f872 	bl	80011a4 <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3740      	adds	r7, #64	; 0x40
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_I2C2_Init+0x50>)
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <MX_I2C2_Init+0x54>)
 80010d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_I2C2_Init+0x50>)
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_I2C2_Init+0x58>)
 80010d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_I2C2_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_I2C2_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_I2C2_Init+0x50>)
 80010e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_I2C2_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_I2C2_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <MX_I2C2_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_I2C2_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_I2C2_Init+0x50>)
 8001106:	f000 fd25 	bl	8001b54 <HAL_I2C_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001110:	f000 f848 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000a0 	.word	0x200000a0
 800111c:	40005800 	.word	0x40005800
 8001120:	000186a0 	.word	0x000186a0

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_GPIO_Init+0x78>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <MX_GPIO_Init+0x78>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_GPIO_Init+0x78>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_GPIO_Init+0x78>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <MX_GPIO_Init+0x78>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_GPIO_Init+0x78>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <MX_GPIO_Init+0x7c>)
 8001170:	f000 fcd8 	bl	8001b24 <HAL_GPIO_WritePin>
                          |E_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           E_Pin RS_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001174:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001178:	60bb      	str	r3, [r7, #8]
                          |E_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2302      	movs	r3, #2
 8001184:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4619      	mov	r1, r3
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_GPIO_Init+0x7c>)
 800118e:	f000 fb45 	bl	800181c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_MspInit+0x5c>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_MspInit+0x5c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_MspInit+0x5c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x5c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x5c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x5c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_MspInit+0x60>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_MspInit+0x60>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000

08001214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <HAL_I2C_MspInit+0x94>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d134      	bne.n	800129e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_I2C_MspInit+0x98>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <HAL_I2C_MspInit+0x98>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_I2C_MspInit+0x98>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800124c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001252:	2312      	movs	r3, #18
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	4619      	mov	r1, r3
 8001260:	4813      	ldr	r0, [pc, #76]	; (80012b0 <HAL_I2C_MspInit+0x9c>)
 8001262:	f000 fadb 	bl	800181c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_I2C_MspInit+0x98>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_I2C_MspInit+0x98>)
 800126c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_I2C_MspInit+0x98>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2021      	movs	r0, #33	; 0x21
 8001284:	f000 fa11 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001288:	2021      	movs	r0, #33	; 0x21
 800128a:	f000 fa2a 	bl	80016e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2022      	movs	r0, #34	; 0x22
 8001294:	f000 fa09 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001298:	2022      	movs	r0, #34	; 0x22
 800129a:	f000 fa22 	bl	80016e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40005800 	.word	0x40005800
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010c00 	.word	0x40010c00

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fa:	f000 f8bf 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <I2C2_EV_IRQHandler+0x10>)
 800130a:	f001 f8c5 	bl	8002498 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200000a0 	.word	0x200000a0

08001318 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <I2C2_ER_IRQHandler+0x10>)
 800131e:	f001 fa2c 	bl	800277a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000a0 	.word	0x200000a0

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f003 fcae 	bl	8004cbc <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20005000 	.word	0x20005000
 800138c:	00000400 	.word	0x00000400
 8001390:	200000f4 	.word	0x200000f4
 8001394:	20000110 	.word	0x20000110

08001398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <Reset_Handler>:
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <LoopFillZerobss+0x12>)
 80013a6:	490d      	ldr	r1, [pc, #52]	; (80013dc <LoopFillZerobss+0x16>)
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <LoopFillZerobss+0x1a>)
 80013aa:	2300      	movs	r3, #0
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:
 80013ae:	58d4      	ldr	r4, [r2, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:
 80013b4:	18c4      	adds	r4, r0, r3
 80013b6:	428c      	cmp	r4, r1
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <LoopFillZerobss+0x1e>)
 80013bc:	4c0a      	ldr	r4, [pc, #40]	; (80013e8 <LoopFillZerobss+0x22>)
 80013be:	2300      	movs	r3, #0
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:
 80013c6:	42a2      	cmp	r2, r4
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>
 80013ca:	f7ff ffe5 	bl	8001398 <SystemInit>
 80013ce:	f003 fc7b 	bl	8004cc8 <__libc_init_array>
 80013d2:	f7ff fe05 	bl	8000fe0 <main>
 80013d6:	4770      	bx	lr
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000070 	.word	0x20000070
 80013e0:	080056a0 	.word	0x080056a0
 80013e4:	20000070 	.word	0x20000070
 80013e8:	2000010c 	.word	0x2000010c

080013ec <ADC1_2_IRQHandler>:
 80013ec:	e7fe      	b.n	80013ec <ADC1_2_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_Init+0x28>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_Init+0x28>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f947 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	200f      	movs	r0, #15
 8001408:	f000 f808 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff fed0 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x54>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x58>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f95f 	bl	80016fe <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f927 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_InitTick+0x5c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	20000008 	.word	0x20000008
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_IncTick+0x1c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_IncTick+0x20>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_IncTick+0x20>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	20000008 	.word	0x20000008
 800149c:	200000f8 	.word	0x200000f8

080014a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <HAL_GetTick+0x10>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	200000f8 	.word	0x200000f8

080014b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff fff0 	bl	80014a0 <HAL_GetTick>
 80014c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d005      	beq.n	80014da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_Delay+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014da:	bf00      	nop
 80014dc:	f7ff ffe0 	bl	80014a0 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f7      	bhi.n	80014dc <HAL_Delay+0x28>
  {
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4906      	ldr	r1, [pc, #24]	; (8001594 <__NVIC_EnableIRQ+0x34>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff90 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff2d 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff42 	bl	8001544 <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff90 	bl	80015ec <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5f 	bl	8001598 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff35 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa2 	bl	8001650 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800172a:	2b02      	cmp	r3, #2
 800172c:	d005      	beq.n	800173a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2204      	movs	r2, #4
 8001732:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e051      	b.n	80017de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 020e 	bic.w	r2, r2, #14
 8001748:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0201 	bic.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <HAL_DMA_Abort_IT+0xd0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d029      	beq.n	80017b8 <HAL_DMA_Abort_IT+0xa0>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a20      	ldr	r2, [pc, #128]	; (80017ec <HAL_DMA_Abort_IT+0xd4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d022      	beq.n	80017b4 <HAL_DMA_Abort_IT+0x9c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_DMA_Abort_IT+0xd8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d01a      	beq.n	80017ae <HAL_DMA_Abort_IT+0x96>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_DMA_Abort_IT+0xdc>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d012      	beq.n	80017a8 <HAL_DMA_Abort_IT+0x90>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_DMA_Abort_IT+0xe0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00a      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x8a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_DMA_Abort_IT+0xe4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d102      	bne.n	800179c <HAL_DMA_Abort_IT+0x84>
 8001796:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800179a:	e00e      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 800179c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a0:	e00b      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 80017a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a6:	e008      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	e005      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	e002      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 80017b4:	2310      	movs	r3, #16
 80017b6:	e000      	b.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 80017b8:	2301      	movs	r3, #1
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_DMA_Abort_IT+0xe8>)
 80017bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
    } 
  }
  return status;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020008 	.word	0x40020008
 80017ec:	4002001c 	.word	0x4002001c
 80017f0:	40020030 	.word	0x40020030
 80017f4:	40020044 	.word	0x40020044
 80017f8:	40020058 	.word	0x40020058
 80017fc:	4002006c 	.word	0x4002006c
 8001800:	40020000 	.word	0x40020000

08001804 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b08b      	sub	sp, #44	; 0x2c
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182e:	e169      	b.n	8001b04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001830:	2201      	movs	r2, #1
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	429a      	cmp	r2, r3
 800184a:	f040 8158 	bne.w	8001afe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4a9a      	ldr	r2, [pc, #616]	; (8001abc <HAL_GPIO_Init+0x2a0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d05e      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
 8001858:	4a98      	ldr	r2, [pc, #608]	; (8001abc <HAL_GPIO_Init+0x2a0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d875      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 800185e:	4a98      	ldr	r2, [pc, #608]	; (8001ac0 <HAL_GPIO_Init+0x2a4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d058      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
 8001864:	4a96      	ldr	r2, [pc, #600]	; (8001ac0 <HAL_GPIO_Init+0x2a4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d86f      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 800186a:	4a96      	ldr	r2, [pc, #600]	; (8001ac4 <HAL_GPIO_Init+0x2a8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d052      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
 8001870:	4a94      	ldr	r2, [pc, #592]	; (8001ac4 <HAL_GPIO_Init+0x2a8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d869      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 8001876:	4a94      	ldr	r2, [pc, #592]	; (8001ac8 <HAL_GPIO_Init+0x2ac>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d04c      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
 800187c:	4a92      	ldr	r2, [pc, #584]	; (8001ac8 <HAL_GPIO_Init+0x2ac>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d863      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 8001882:	4a92      	ldr	r2, [pc, #584]	; (8001acc <HAL_GPIO_Init+0x2b0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d046      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
 8001888:	4a90      	ldr	r2, [pc, #576]	; (8001acc <HAL_GPIO_Init+0x2b0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d85d      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 800188e:	2b12      	cmp	r3, #18
 8001890:	d82a      	bhi.n	80018e8 <HAL_GPIO_Init+0xcc>
 8001892:	2b12      	cmp	r3, #18
 8001894:	d859      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 8001896:	a201      	add	r2, pc, #4	; (adr r2, 800189c <HAL_GPIO_Init+0x80>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	08001917 	.word	0x08001917
 80018a0:	080018f1 	.word	0x080018f1
 80018a4:	08001903 	.word	0x08001903
 80018a8:	08001945 	.word	0x08001945
 80018ac:	0800194b 	.word	0x0800194b
 80018b0:	0800194b 	.word	0x0800194b
 80018b4:	0800194b 	.word	0x0800194b
 80018b8:	0800194b 	.word	0x0800194b
 80018bc:	0800194b 	.word	0x0800194b
 80018c0:	0800194b 	.word	0x0800194b
 80018c4:	0800194b 	.word	0x0800194b
 80018c8:	0800194b 	.word	0x0800194b
 80018cc:	0800194b 	.word	0x0800194b
 80018d0:	0800194b 	.word	0x0800194b
 80018d4:	0800194b 	.word	0x0800194b
 80018d8:	0800194b 	.word	0x0800194b
 80018dc:	0800194b 	.word	0x0800194b
 80018e0:	080018f9 	.word	0x080018f9
 80018e4:	0800190d 	.word	0x0800190d
 80018e8:	4a79      	ldr	r2, [pc, #484]	; (8001ad0 <HAL_GPIO_Init+0x2b4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ee:	e02c      	b.n	800194a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	623b      	str	r3, [r7, #32]
          break;
 80018f6:	e029      	b.n	800194c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	3304      	adds	r3, #4
 80018fe:	623b      	str	r3, [r7, #32]
          break;
 8001900:	e024      	b.n	800194c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	3308      	adds	r3, #8
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e01f      	b.n	800194c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	330c      	adds	r3, #12
 8001912:	623b      	str	r3, [r7, #32]
          break;
 8001914:	e01a      	b.n	800194c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800191e:	2304      	movs	r3, #4
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e013      	b.n	800194c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800192c:	2308      	movs	r3, #8
 800192e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	611a      	str	r2, [r3, #16]
          break;
 8001936:	e009      	b.n	800194c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001938:	2308      	movs	r3, #8
 800193a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	615a      	str	r2, [r3, #20]
          break;
 8001942:	e003      	b.n	800194c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
          break;
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x130>
          break;
 800194a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2bff      	cmp	r3, #255	; 0xff
 8001950:	d801      	bhi.n	8001956 <HAL_GPIO_Init+0x13a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	e001      	b.n	800195a <HAL_GPIO_Init+0x13e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3304      	adds	r3, #4
 800195a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2bff      	cmp	r3, #255	; 0xff
 8001960:	d802      	bhi.n	8001968 <HAL_GPIO_Init+0x14c>
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	e002      	b.n	800196e <HAL_GPIO_Init+0x152>
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3b08      	subs	r3, #8
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	210f      	movs	r1, #15
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	6a39      	ldr	r1, [r7, #32]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	431a      	orrs	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80b1 	beq.w	8001afe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800199c:	4b4d      	ldr	r3, [pc, #308]	; (8001ad4 <HAL_GPIO_Init+0x2b8>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x2b8>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b4a      	ldr	r3, [pc, #296]	; (8001ad4 <HAL_GPIO_Init+0x2b8>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019b4:	4a48      	ldr	r2, [pc, #288]	; (8001ad8 <HAL_GPIO_Init+0x2bc>)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a40      	ldr	r2, [pc, #256]	; (8001adc <HAL_GPIO_Init+0x2c0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d013      	beq.n	8001a08 <HAL_GPIO_Init+0x1ec>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a3f      	ldr	r2, [pc, #252]	; (8001ae0 <HAL_GPIO_Init+0x2c4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00d      	beq.n	8001a04 <HAL_GPIO_Init+0x1e8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a3e      	ldr	r2, [pc, #248]	; (8001ae4 <HAL_GPIO_Init+0x2c8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d007      	beq.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a3d      	ldr	r2, [pc, #244]	; (8001ae8 <HAL_GPIO_Init+0x2cc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d101      	bne.n	80019fc <HAL_GPIO_Init+0x1e0>
 80019f8:	2303      	movs	r3, #3
 80019fa:	e006      	b.n	8001a0a <HAL_GPIO_Init+0x1ee>
 80019fc:	2304      	movs	r3, #4
 80019fe:	e004      	b.n	8001a0a <HAL_GPIO_Init+0x1ee>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0x1ee>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_GPIO_Init+0x1ee>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	f002 0203 	and.w	r2, r2, #3
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	4093      	lsls	r3, r2
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a1a:	492f      	ldr	r1, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x2bc>)
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a34:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	492c      	ldr	r1, [pc, #176]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a42:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4928      	ldr	r1, [pc, #160]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4922      	ldr	r1, [pc, #136]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	491e      	ldr	r1, [pc, #120]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4918      	ldr	r1, [pc, #96]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4914      	ldr	r1, [pc, #80]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d021      	beq.n	8001af0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	490e      	ldr	r1, [pc, #56]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
 8001ab8:	e021      	b.n	8001afe <HAL_GPIO_Init+0x2e2>
 8001aba:	bf00      	nop
 8001abc:	10320000 	.word	0x10320000
 8001ac0:	10310000 	.word	0x10310000
 8001ac4:	10220000 	.word	0x10220000
 8001ac8:	10210000 	.word	0x10210000
 8001acc:	10120000 	.word	0x10120000
 8001ad0:	10110000 	.word	0x10110000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	40010800 	.word	0x40010800
 8001ae0:	40010c00 	.word	0x40010c00
 8001ae4:	40011000 	.word	0x40011000
 8001ae8:	40011400 	.word	0x40011400
 8001aec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_GPIO_Init+0x304>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	4909      	ldr	r1, [pc, #36]	; (8001b20 <HAL_GPIO_Init+0x304>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	3301      	adds	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f47f ae8e 	bne.w	8001830 <HAL_GPIO_Init+0x14>
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	372c      	adds	r7, #44	; 0x2c
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40010400 	.word	0x40010400

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e12b      	b.n	8001dbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fb4a 	bl	8001214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2224      	movs	r2, #36	; 0x24
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bb8:	f003 f84e 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8001bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a81      	ldr	r2, [pc, #516]	; (8001dc8 <HAL_I2C_Init+0x274>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d807      	bhi.n	8001bd8 <HAL_I2C_Init+0x84>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a80      	ldr	r2, [pc, #512]	; (8001dcc <HAL_I2C_Init+0x278>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	bf94      	ite	ls
 8001bd0:	2301      	movls	r3, #1
 8001bd2:	2300      	movhi	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e006      	b.n	8001be6 <HAL_I2C_Init+0x92>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a7d      	ldr	r2, [pc, #500]	; (8001dd0 <HAL_I2C_Init+0x27c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	bf94      	ite	ls
 8001be0:	2301      	movls	r3, #1
 8001be2:	2300      	movhi	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0e7      	b.n	8001dbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4a78      	ldr	r2, [pc, #480]	; (8001dd4 <HAL_I2C_Init+0x280>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9b      	lsrs	r3, r3, #18
 8001bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_I2C_Init+0x274>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d802      	bhi.n	8001c28 <HAL_I2C_Init+0xd4>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3301      	adds	r3, #1
 8001c26:	e009      	b.n	8001c3c <HAL_I2C_Init+0xe8>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	4a69      	ldr	r2, [pc, #420]	; (8001dd8 <HAL_I2C_Init+0x284>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	099b      	lsrs	r3, r3, #6
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	495c      	ldr	r1, [pc, #368]	; (8001dc8 <HAL_I2C_Init+0x274>)
 8001c58:	428b      	cmp	r3, r1
 8001c5a:	d819      	bhi.n	8001c90 <HAL_I2C_Init+0x13c>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e59      	subs	r1, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6a:	1c59      	adds	r1, r3, #1
 8001c6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c70:	400b      	ands	r3, r1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_I2C_Init+0x138>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1e59      	subs	r1, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8a:	e051      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	e04f      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d111      	bne.n	8001cbc <HAL_I2C_Init+0x168>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	440b      	add	r3, r1
 8001ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	e012      	b.n	8001ce2 <HAL_I2C_Init+0x18e>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1e58      	subs	r0, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	0099      	lsls	r1, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Init+0x196>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e022      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10e      	bne.n	8001d10 <HAL_I2C_Init+0x1bc>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e58      	subs	r0, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	440b      	add	r3, r1
 8001d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0e:	e00f      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1e58      	subs	r0, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	0099      	lsls	r1, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	6809      	ldr	r1, [r1, #0]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6911      	ldr	r1, [r2, #16]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68d2      	ldr	r2, [r2, #12]
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	000186a0 	.word	0x000186a0
 8001dcc:	001e847f 	.word	0x001e847f
 8001dd0:	003d08ff 	.word	0x003d08ff
 8001dd4:	431bde83 	.word	0x431bde83
 8001dd8:	10624dd3 	.word	0x10624dd3

08001ddc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	461a      	mov	r2, r3
 8001de8:	460b      	mov	r3, r1
 8001dea:	817b      	strh	r3, [r7, #10]
 8001dec:	4613      	mov	r3, r2
 8001dee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff fb56 	bl	80014a0 <HAL_GetTick>
 8001df4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	f040 80e0 	bne.w	8001fc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2319      	movs	r3, #25
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4970      	ldr	r1, [pc, #448]	; (8001fd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f002 f926 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e0d3      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_I2C_Master_Transmit+0x50>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e0cc      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d007      	beq.n	8001e52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2221      	movs	r2, #33	; 0x21
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	893a      	ldrh	r2, [r7, #8]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4a50      	ldr	r2, [pc, #320]	; (8001fd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e94:	8979      	ldrh	r1, [r7, #10]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	6a3a      	ldr	r2, [r7, #32]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f001 fee8 	bl	8003c70 <I2C_MasterRequestWrite>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e08d      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ec0:	e066      	b.n	8001f90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	6a39      	ldr	r1, [r7, #32]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f002 f9a0 	bl	800420c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d107      	bne.n	8001eea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e06b      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d11b      	bne.n	8001f64 <HAL_I2C_Master_Transmit+0x188>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d017      	beq.n	8001f64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	6a39      	ldr	r1, [r7, #32]
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f002 f990 	bl	800428e <I2C_WaitOnBTFFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d107      	bne.n	8001f8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e01a      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d194      	bne.n	8001ec2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	00100002 	.word	0x00100002
 8001fd4:	ffff0000 	.word	0xffff0000

08001fd8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	817b      	strh	r3, [r7, #10]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff fa56 	bl	80014a0 <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b20      	cmp	r3, #32
 8002000:	f040 823f 	bne.w	8002482 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2319      	movs	r3, #25
 800200a:	2201      	movs	r2, #1
 800200c:	497f      	ldr	r1, [pc, #508]	; (800220c <HAL_I2C_Master_Receive+0x234>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f002 f826 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800201a:	2302      	movs	r3, #2
 800201c:	e232      	b.n	8002484 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_I2C_Master_Receive+0x54>
 8002028:	2302      	movs	r3, #2
 800202a:	e22b      	b.n	8002484 <HAL_I2C_Master_Receive+0x4ac>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d007      	beq.n	8002052 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002060:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2222      	movs	r2, #34	; 0x22
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2210      	movs	r2, #16
 800206e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	893a      	ldrh	r2, [r7, #8]
 8002082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4a5f      	ldr	r2, [pc, #380]	; (8002210 <HAL_I2C_Master_Receive+0x238>)
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002094:	8979      	ldrh	r1, [r7, #10]
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f001 fe6a 	bl	8003d74 <I2C_MasterRequestRead>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e1ec      	b.n	8002484 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d113      	bne.n	80020da <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e1c0      	b.n	800245c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d11e      	bne.n	8002120 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020f2:	b672      	cpsid	i
}
 80020f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800211c:	b662      	cpsie	i
}
 800211e:	e035      	b.n	800218c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	2b02      	cmp	r3, #2
 8002126:	d11e      	bne.n	8002166 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002136:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002138:	b672      	cpsid	i
}
 800213a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002160:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002162:	b662      	cpsie	i
}
 8002164:	e012      	b.n	800218c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002174:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800218c:	e166      	b.n	800245c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	2b03      	cmp	r3, #3
 8002194:	f200 811f 	bhi.w	80023d6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	2b01      	cmp	r3, #1
 800219e:	d123      	bne.n	80021e8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f002 f8e5 	bl	8004374 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e167      	b.n	8002484 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021e6:	e139      	b.n	800245c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d152      	bne.n	8002296 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	2200      	movs	r2, #0
 80021f8:	4906      	ldr	r1, [pc, #24]	; (8002214 <HAL_I2C_Master_Receive+0x23c>)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f001 ff30 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e13c      	b.n	8002484 <HAL_I2C_Master_Receive+0x4ac>
 800220a:	bf00      	nop
 800220c:	00100002 	.word	0x00100002
 8002210:	ffff0000 	.word	0xffff0000
 8002214:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800225e:	b662      	cpsie	i
}
 8002260:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002294:	e0e2      	b.n	800245c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	2200      	movs	r2, #0
 800229e:	497b      	ldr	r1, [pc, #492]	; (800248c <HAL_I2C_Master_Receive+0x4b4>)
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f001 fedd 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0e9      	b.n	8002484 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022c0:	b672      	cpsid	i
}
 80022c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022f6:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_I2C_Master_Receive+0x4b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	08db      	lsrs	r3, r3, #3
 80022fc:	4a65      	ldr	r2, [pc, #404]	; (8002494 <HAL_I2C_Master_Receive+0x4bc>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0a1a      	lsrs	r2, r3, #8
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00da      	lsls	r2, r3, #3
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	3b01      	subs	r3, #1
 8002314:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d118      	bne.n	800234e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800233e:	b662      	cpsie	i
}
 8002340:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e09a      	b.n	8002484 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b04      	cmp	r3, #4
 800235a:	d1d9      	bne.n	8002310 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800239e:	b662      	cpsie	i
}
 80023a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023d4:	e042      	b.n	800245c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f001 ffca 	bl	8004374 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e04c      	b.n	8002484 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b04      	cmp	r3, #4
 8002428:	d118      	bne.n	800245c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	f47f ae94 	bne.w	800218e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	00010004 	.word	0x00010004
 8002490:	20000000 	.word	0x20000000
 8002494:	14f8b589 	.word	0x14f8b589

08002498 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b10      	cmp	r3, #16
 80024c6:	d003      	beq.n	80024d0 <HAL_I2C_EV_IRQHandler+0x38>
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	f040 80c1 	bne.w	8002652 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <HAL_I2C_EV_IRQHandler+0x6e>
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80024f0:	d003      	beq.n	80024fa <HAL_I2C_EV_IRQHandler+0x62>
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80024f8:	d101      	bne.n	80024fe <HAL_I2C_EV_IRQHandler+0x66>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x68>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b01      	cmp	r3, #1
 8002502:	f000 8132 	beq.w	800276a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00c      	beq.n	800252a <HAL_I2C_EV_IRQHandler+0x92>
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	0a5b      	lsrs	r3, r3, #9
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f001 ffad 	bl	800447c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fd82 	bl	800302c <I2C_Master_SB>
 8002528:	e092      	b.n	8002650 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_I2C_EV_IRQHandler+0xb2>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	0a5b      	lsrs	r3, r3, #9
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fdf7 	bl	8003136 <I2C_Master_ADD10>
 8002548:	e082      	b.n	8002650 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_I2C_EV_IRQHandler+0xd2>
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	0a5b      	lsrs	r3, r3, #9
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fe10 	bl	8003188 <I2C_Master_ADDR>
 8002568:	e072      	b.n	8002650 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d03b      	beq.n	80025ee <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002584:	f000 80f3 	beq.w	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	09db      	lsrs	r3, r3, #7
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00f      	beq.n	80025b4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	0a9b      	lsrs	r3, r3, #10
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_I2C_EV_IRQHandler+0x11c>
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f9fc 	bl	80029aa <I2C_MasterTransmit_TXE>
 80025b2:	e04d      	b.n	8002650 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80d6 	beq.w	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	0a5b      	lsrs	r3, r3, #9
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80cf 	beq.w	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80025d0:	7bbb      	ldrb	r3, [r7, #14]
 80025d2:	2b21      	cmp	r3, #33	; 0x21
 80025d4:	d103      	bne.n	80025de <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fa83 	bl	8002ae2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025dc:	e0c7      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	f040 80c4 	bne.w	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 faf1 	bl	8002bce <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ec:	e0bf      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025fc:	f000 80b7 	beq.w	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	099b      	lsrs	r3, r3, #6
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00f      	beq.n	800262c <HAL_I2C_EV_IRQHandler+0x194>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HAL_I2C_EV_IRQHandler+0x194>
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fb66 	bl	8002cf6 <I2C_MasterReceive_RXNE>
 800262a:	e011      	b.n	8002650 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 809a 	beq.w	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	0a5b      	lsrs	r3, r3, #9
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8093 	beq.w	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fc05 	bl	8002e58 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800264e:	e08e      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002650:	e08d      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	e007      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d012      	beq.n	80026a6 <HAL_I2C_EV_IRQHandler+0x20e>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	0a5b      	lsrs	r3, r3, #9
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00c      	beq.n	80026a6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800269c:	69b9      	ldr	r1, [r7, #24]
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 ffc9 	bl	8003636 <I2C_Slave_ADDR>
 80026a4:	e066      	b.n	8002774 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_I2C_EV_IRQHandler+0x22e>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	0a5b      	lsrs	r3, r3, #9
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f001 f804 	bl	80036cc <I2C_Slave_STOPF>
 80026c4:	e056      	b.n	8002774 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026c6:	7bbb      	ldrb	r3, [r7, #14]
 80026c8:	2b21      	cmp	r3, #33	; 0x21
 80026ca:	d002      	beq.n	80026d2 <HAL_I2C_EV_IRQHandler+0x23a>
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
 80026ce:	2b29      	cmp	r3, #41	; 0x29
 80026d0:	d125      	bne.n	800271e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	09db      	lsrs	r3, r3, #7
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00f      	beq.n	80026fe <HAL_I2C_EV_IRQHandler+0x266>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	0a9b      	lsrs	r3, r3, #10
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_I2C_EV_IRQHandler+0x266>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fee1 	bl	80034be <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026fc:	e039      	b.n	8002772 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d033      	beq.n	8002772 <HAL_I2C_EV_IRQHandler+0x2da>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	0a5b      	lsrs	r3, r3, #9
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02d      	beq.n	8002772 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 ff0e 	bl	8003538 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800271c:	e029      	b.n	8002772 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00f      	beq.n	800274a <HAL_I2C_EV_IRQHandler+0x2b2>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	0a9b      	lsrs	r3, r3, #10
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 ff18 	bl	8003578 <I2C_SlaveReceive_RXNE>
 8002748:	e014      	b.n	8002774 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00e      	beq.n	8002774 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	0a5b      	lsrs	r3, r3, #9
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 ff46 	bl	80035f4 <I2C_SlaveReceive_BTF>
 8002768:	e004      	b.n	8002774 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002772:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b08a      	sub	sp, #40	; 0x28
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800279c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d016      	beq.n	80027d8 <HAL_I2C_ER_IRQHandler+0x5e>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027c6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	0a5b      	lsrs	r3, r3, #9
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <HAL_I2C_ER_IRQHandler+0x88>
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	f043 0302 	orr.w	r3, r3, #2
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002800:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	0a9b      	lsrs	r3, r3, #10
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d03f      	beq.n	800288e <HAL_I2C_ER_IRQHandler+0x114>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d039      	beq.n	800288e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800281a:	7efb      	ldrb	r3, [r7, #27]
 800281c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002834:	7ebb      	ldrb	r3, [r7, #26]
 8002836:	2b20      	cmp	r3, #32
 8002838:	d112      	bne.n	8002860 <HAL_I2C_ER_IRQHandler+0xe6>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10f      	bne.n	8002860 <HAL_I2C_ER_IRQHandler+0xe6>
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	2b21      	cmp	r3, #33	; 0x21
 8002844:	d008      	beq.n	8002858 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	2b29      	cmp	r3, #41	; 0x29
 800284a:	d005      	beq.n	8002858 <HAL_I2C_ER_IRQHandler+0xde>
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	2b28      	cmp	r3, #40	; 0x28
 8002850:	d106      	bne.n	8002860 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b21      	cmp	r3, #33	; 0x21
 8002856:	d103      	bne.n	8002860 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f001 f867 	bl	800392c <I2C_Slave_AF>
 800285e:	e016      	b.n	800288e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002868:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002872:	7efb      	ldrb	r3, [r7, #27]
 8002874:	2b10      	cmp	r3, #16
 8002876:	d002      	beq.n	800287e <HAL_I2C_ER_IRQHandler+0x104>
 8002878:	7efb      	ldrb	r3, [r7, #27]
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d107      	bne.n	800288e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	0adb      	lsrs	r3, r3, #11
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00e      	beq.n	80028b8 <HAL_I2C_ER_IRQHandler+0x13e>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	f043 0308 	orr.w	r3, r3, #8
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80028b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f001 f89e 	bl	8003a0c <I2C_ITError>
  }
}
 80028d0:	bf00      	nop
 80028d2:	3728      	adds	r7, #40	; 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
 800292c:	4613      	mov	r3, r2
 800292e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d150      	bne.n	8002a72 <I2C_MasterTransmit_TXE+0xc8>
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b21      	cmp	r3, #33	; 0x21
 80029d4:	d14d      	bne.n	8002a72 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d01d      	beq.n	8002a18 <I2C_MasterTransmit_TXE+0x6e>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d01a      	beq.n	8002a18 <I2C_MasterTransmit_TXE+0x6e>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029e8:	d016      	beq.n	8002a18 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029f8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2211      	movs	r2, #17
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff61 	bl	80028d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a16:	e060      	b.n	8002ada <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a26:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a36:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b40      	cmp	r3, #64	; 0x40
 8002a50:	d107      	bne.n	8002a62 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff76 	bl	800294c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a60:	e03b      	b.n	8002ada <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ff34 	bl	80028d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a70:	e033      	b.n	8002ada <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b21      	cmp	r3, #33	; 0x21
 8002a76:	d005      	beq.n	8002a84 <I2C_MasterTransmit_TXE+0xda>
 8002a78:	7bbb      	ldrb	r3, [r7, #14]
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	d12d      	bne.n	8002ada <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	2b22      	cmp	r3, #34	; 0x22
 8002a82:	d12a      	bne.n	8002ada <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d108      	bne.n	8002aa0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a9e:	e01c      	b.n	8002ada <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d103      	bne.n	8002ab4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f88e 	bl	8002bce <I2C_MemoryTransmit_TXE_BTF>
}
 8002ab2:	e012      	b.n	8002ada <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ad8:	e7ff      	b.n	8002ada <I2C_MasterTransmit_TXE+0x130>
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b21      	cmp	r3, #33	; 0x21
 8002afa:	d164      	bne.n	8002bc6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002b2a:	e04c      	b.n	8002bc6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d01d      	beq.n	8002b6e <I2C_MasterTransmit_BTF+0x8c>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d01a      	beq.n	8002b6e <I2C_MasterTransmit_BTF+0x8c>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b3e:	d016      	beq.n	8002b6e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b4e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2211      	movs	r2, #17
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff feb6 	bl	80028d8 <HAL_I2C_MasterTxCpltCallback>
}
 8002b6c:	e02b      	b.n	8002bc6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b7c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d107      	bne.n	8002bb8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff fecb 	bl	800294c <HAL_I2C_MemTxCpltCallback>
}
 8002bb6:	e006      	b.n	8002bc6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff fe89 	bl	80028d8 <HAL_I2C_MasterTxCpltCallback>
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11d      	bne.n	8002c22 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10b      	bne.n	8002c06 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfe:	1c9a      	adds	r2, r3, #2
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002c04:	e073      	b.n	8002cee <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	121b      	asrs	r3, r3, #8
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c20:	e065      	b.n	8002cee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d10b      	bne.n	8002c42 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c40:	e055      	b.n	8002cee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d151      	bne.n	8002cee <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	2b22      	cmp	r3, #34	; 0x22
 8002c4e:	d10d      	bne.n	8002c6c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c6a:	e040      	b.n	8002cee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d015      	beq.n	8002ca2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b21      	cmp	r3, #33	; 0x21
 8002c7a:	d112      	bne.n	8002ca2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ca0:	e025      	b.n	8002cee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d120      	bne.n	8002cee <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b21      	cmp	r3, #33	; 0x21
 8002cb0:	d11d      	bne.n	8002cee <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff fe2f 	bl	800294c <HAL_I2C_MemTxCpltCallback>
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b22      	cmp	r3, #34	; 0x22
 8002d08:	f040 80a2 	bne.w	8002e50 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d921      	bls.n	8002d5e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	f040 8082 	bne.w	8002e50 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002d5c:	e078      	b.n	8002e50 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d074      	beq.n	8002e50 <I2C_MasterReceive_RXNE+0x15a>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d002      	beq.n	8002d72 <I2C_MasterReceive_RXNE+0x7c>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d16e      	bne.n	8002e50 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f001 facc 	bl	8004310 <I2C_WaitOnSTOPRequestThroughIT>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d142      	bne.n	8002e04 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d10a      	bne.n	8002dee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fdb9 	bl	800295e <HAL_I2C_MemRxCpltCallback>
}
 8002dec:	e030      	b.n	8002e50 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2212      	movs	r2, #18
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff fd74 	bl	80028ea <HAL_I2C_MasterRxCpltCallback>
}
 8002e02:	e025      	b.n	8002e50 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e12:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff fd90 	bl	8002970 <HAL_I2C_ErrorCallback>
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d11b      	bne.n	8002ea8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002ea6:	e0bd      	b.n	8003024 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d129      	bne.n	8002f06 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d00a      	beq.n	8002ede <I2C_MasterReceive_BTF+0x86>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d007      	beq.n	8002ede <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002edc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f04:	e08e      	b.n	8003024 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d176      	bne.n	8002ffe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d002      	beq.n	8002f1c <I2C_MasterReceive_BTF+0xc4>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d108      	bne.n	8002f2e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e019      	b.n	8002f62 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d002      	beq.n	8002f3a <I2C_MasterReceive_BTF+0xe2>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d108      	bne.n	8002f4c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e00a      	b.n	8002f62 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d007      	beq.n	8002f62 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fbc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d10a      	bne.n	8002fe8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fcbc 	bl	800295e <HAL_I2C_MemRxCpltCallback>
}
 8002fe6:	e01d      	b.n	8003024 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2212      	movs	r2, #18
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fc77 	bl	80028ea <HAL_I2C_MasterRxCpltCallback>
}
 8002ffc:	e012      	b.n	8003024 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d117      	bne.n	8003070 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003058:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800305a:	e067      	b.n	800312c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	b2da      	uxtb	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	611a      	str	r2, [r3, #16]
}
 800306e:	e05d      	b.n	800312c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003078:	d133      	bne.n	80030e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b21      	cmp	r3, #33	; 0x21
 8003084:	d109      	bne.n	800309a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003096:	611a      	str	r2, [r3, #16]
 8003098:	e008      	b.n	80030ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <I2C_Master_SB+0x92>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d108      	bne.n	80030d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d032      	beq.n	800312c <I2C_Master_SB+0x100>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d02d      	beq.n	800312c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030de:	605a      	str	r2, [r3, #4]
}
 80030e0:	e024      	b.n	800312c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10e      	bne.n	8003108 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	11db      	asrs	r3, r3, #7
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f003 0306 	and.w	r3, r3, #6
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f063 030f 	orn	r3, r3, #15
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	611a      	str	r2, [r3, #16]
}
 8003106:	e011      	b.n	800312c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310c:	2b01      	cmp	r3, #1
 800310e:	d10d      	bne.n	800312c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	b29b      	uxth	r3, r3
 8003116:	11db      	asrs	r3, r3, #7
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f003 0306 	and.w	r3, r3, #6
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f063 030e 	orn	r3, r3, #14
 8003124:	b2da      	uxtb	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	b2da      	uxtb	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <I2C_Master_ADD10+0x26>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d108      	bne.n	800316e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <I2C_Master_ADD10+0x48>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317c:	605a      	str	r2, [r3, #4]
  }
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003188:	b480      	push	{r7}
 800318a:	b091      	sub	sp, #68	; 0x44
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003196:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b22      	cmp	r3, #34	; 0x22
 80031b0:	f040 8174 	bne.w	800349c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10f      	bne.n	80031dc <I2C_Master_ADDR+0x54>
 80031bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d10b      	bne.n	80031dc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c4:	2300      	movs	r3, #0
 80031c6:	633b      	str	r3, [r7, #48]	; 0x30
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	e16b      	b.n	80034b4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11d      	bne.n	8003220 <I2C_Master_ADDR+0x98>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031ec:	d118      	bne.n	8003220 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ee:	2300      	movs	r3, #0
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003212:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	651a      	str	r2, [r3, #80]	; 0x50
 800321e:	e149      	b.n	80034b4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d113      	bne.n	8003252 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322a:	2300      	movs	r3, #0
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e120      	b.n	8003494 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	f040 808a 	bne.w	8003372 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003264:	d137      	bne.n	80032d6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003274:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003284:	d113      	bne.n	80032ae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003294:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	e0f2      	b.n	8003494 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ae:	2300      	movs	r3, #0
 80032b0:	623b      	str	r3, [r7, #32]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	623b      	str	r3, [r7, #32]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	623b      	str	r3, [r7, #32]
 80032c2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	e0de      	b.n	8003494 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d02e      	beq.n	800333a <I2C_Master_ADDR+0x1b2>
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d02b      	beq.n	800333a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80032e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e4:	2b12      	cmp	r3, #18
 80032e6:	d102      	bne.n	80032ee <I2C_Master_ADDR+0x166>
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d125      	bne.n	800333a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d00e      	beq.n	8003312 <I2C_Master_ADDR+0x18a>
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d00b      	beq.n	8003312 <I2C_Master_ADDR+0x18a>
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d008      	beq.n	8003312 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e007      	b.n	8003322 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003320:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	e0ac      	b.n	8003494 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003348:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e090      	b.n	8003494 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d158      	bne.n	800342e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	2b04      	cmp	r3, #4
 8003380:	d021      	beq.n	80033c6 <I2C_Master_ADDR+0x23e>
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	2b02      	cmp	r3, #2
 8003386:	d01e      	beq.n	80033c6 <I2C_Master_ADDR+0x23e>
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	2b10      	cmp	r3, #16
 800338c:	d01b      	beq.n	80033c6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800339c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e012      	b.n	80033ec <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fa:	d14b      	bne.n	8003494 <I2C_Master_ADDR+0x30c>
 80033fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003402:	d00b      	beq.n	800341c <I2C_Master_ADDR+0x294>
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	2b01      	cmp	r3, #1
 8003408:	d008      	beq.n	800341c <I2C_Master_ADDR+0x294>
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	2b08      	cmp	r3, #8
 800340e:	d005      	beq.n	800341c <I2C_Master_ADDR+0x294>
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	2b10      	cmp	r3, #16
 8003414:	d002      	beq.n	800341c <I2C_Master_ADDR+0x294>
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	2b20      	cmp	r3, #32
 800341a:	d13b      	bne.n	8003494 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	e032      	b.n	8003494 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800343c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344c:	d117      	bne.n	800347e <I2C_Master_ADDR+0x2f6>
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003454:	d00b      	beq.n	800346e <I2C_Master_ADDR+0x2e6>
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	2b01      	cmp	r3, #1
 800345a:	d008      	beq.n	800346e <I2C_Master_ADDR+0x2e6>
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	2b08      	cmp	r3, #8
 8003460:	d005      	beq.n	800346e <I2C_Master_ADDR+0x2e6>
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	2b10      	cmp	r3, #16
 8003466:	d002      	beq.n	800346e <I2C_Master_ADDR+0x2e6>
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	2b20      	cmp	r3, #32
 800346c:	d107      	bne.n	800347e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800347c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800349a:	e00b      	b.n	80034b4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349c:	2300      	movs	r3, #0
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
}
 80034b2:	e7ff      	b.n	80034b4 <I2C_Master_ADDR+0x32c>
 80034b4:	bf00      	nop
 80034b6:	3744      	adds	r7, #68	; 0x44
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d02b      	beq.n	8003530 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d114      	bne.n	8003530 <I2C_SlaveTransmit_TXE+0x72>
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b29      	cmp	r3, #41	; 0x29
 800350a:	d111      	bne.n	8003530 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2221      	movs	r2, #33	; 0x21
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2228      	movs	r2, #40	; 0x28
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff f9e6 	bl	80028fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d011      	beq.n	800356e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02c      	beq.n	80035ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d114      	bne.n	80035ec <I2C_SlaveReceive_RXNE+0x74>
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b2a      	cmp	r3, #42	; 0x2a
 80035c6:	d111      	bne.n	80035ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2222      	movs	r2, #34	; 0x22
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2228      	movs	r2, #40	; 0x28
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff f991 	bl	800290e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d012      	beq.n	800362c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003650:	2b28      	cmp	r3, #40	; 0x28
 8003652:	d127      	bne.n	80036a4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003662:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	09db      	lsrs	r3, r3, #7
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	81bb      	strh	r3, [r7, #12]
 8003686:	e002      	b.n	800368e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003696:	89ba      	ldrh	r2, [r7, #12]
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff f93f 	bl	8002920 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80036a2:	e00e      	b.n	80036c2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003718:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003728:	d172      	bne.n	8003810 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b22      	cmp	r3, #34	; 0x22
 800372e:	d002      	beq.n	8003736 <I2C_Slave_STOPF+0x6a>
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b2a      	cmp	r3, #42	; 0x2a
 8003734:	d135      	bne.n	80037a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f043 0204 	orr.w	r2, r3, #4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003768:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe f848 	bl	8001804 <HAL_DMA_GetState>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d049      	beq.n	800380e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	4a69      	ldr	r2, [pc, #420]	; (8003924 <I2C_Slave_STOPF+0x258>)
 8003780:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd ffc6 	bl	8001718 <HAL_DMA_Abort_IT>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d03d      	beq.n	800380e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800379c:	4610      	mov	r0, r2
 800379e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037a0:	e035      	b.n	800380e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0204 	orr.w	r2, r3, #4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe f812 	bl	8001804 <HAL_DMA_GetState>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d014      	beq.n	8003810 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ea:	4a4e      	ldr	r2, [pc, #312]	; (8003924 <I2C_Slave_STOPF+0x258>)
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fd ff90 	bl	8001718 <HAL_DMA_Abort_IT>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003808:	4610      	mov	r0, r2
 800380a:	4798      	blx	r3
 800380c:	e000      	b.n	8003810 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800380e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d03e      	beq.n	8003898 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d112      	bne.n	800384e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d112      	bne.n	8003882 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f043 0204 	orr.w	r2, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f8b3 	bl	8003a0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80038a6:	e039      	b.n	800391c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b2a      	cmp	r3, #42	; 0x2a
 80038ac:	d109      	bne.n	80038c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2228      	movs	r2, #40	; 0x28
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff f826 	bl	800290e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b28      	cmp	r3, #40	; 0x28
 80038cc:	d111      	bne.n	80038f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a15      	ldr	r2, [pc, #84]	; (8003928 <I2C_Slave_STOPF+0x25c>)
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff f825 	bl	800293a <HAL_I2C_ListenCpltCallback>
}
 80038f0:	e014      	b.n	800391c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	2b22      	cmp	r3, #34	; 0x22
 80038f8:	d002      	beq.n	8003900 <I2C_Slave_STOPF+0x234>
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b22      	cmp	r3, #34	; 0x22
 80038fe:	d10d      	bne.n	800391c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fe fff9 	bl	800290e <HAL_I2C_SlaveRxCpltCallback>
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	08003f11 	.word	0x08003f11
 8003928:	ffff0000 	.word	0xffff0000

0800392c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d002      	beq.n	800394e <I2C_Slave_AF+0x22>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b20      	cmp	r3, #32
 800394c:	d129      	bne.n	80039a2 <I2C_Slave_AF+0x76>
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b28      	cmp	r3, #40	; 0x28
 8003952:	d126      	bne.n	80039a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a2c      	ldr	r2, [pc, #176]	; (8003a08 <I2C_Slave_AF+0xdc>)
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003968:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003972:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003982:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fe ffcd 	bl	800293a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80039a0:	e02e      	b.n	8003a00 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b21      	cmp	r3, #33	; 0x21
 80039a6:	d126      	bne.n	80039f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <I2C_Slave_AF+0xdc>)
 80039ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2221      	movs	r2, #33	; 0x21
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fe ff84 	bl	80028fc <HAL_I2C_SlaveTxCpltCallback>
}
 80039f4:	e004      	b.n	8003a00 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039fe:	615a      	str	r2, [r3, #20]
}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	ffff0000 	.word	0xffff0000

08003a0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a24:	7bbb      	ldrb	r3, [r7, #14]
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d002      	beq.n	8003a30 <I2C_ITError+0x24>
 8003a2a:	7bbb      	ldrb	r3, [r7, #14]
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d10a      	bne.n	8003a46 <I2C_ITError+0x3a>
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b22      	cmp	r3, #34	; 0x22
 8003a34:	d107      	bne.n	8003a46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a4c:	2b28      	cmp	r3, #40	; 0x28
 8003a4e:	d107      	bne.n	8003a60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2228      	movs	r2, #40	; 0x28
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a5e:	e015      	b.n	8003a8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6e:	d00a      	beq.n	8003a86 <I2C_ITError+0x7a>
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b60      	cmp	r3, #96	; 0x60
 8003a74:	d007      	beq.n	8003a86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9a:	d161      	bne.n	8003b60 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aaa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d020      	beq.n	8003afa <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	4a6a      	ldr	r2, [pc, #424]	; (8003c68 <I2C_ITError+0x25c>)
 8003abe:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd fe27 	bl	8001718 <HAL_DMA_Abort_IT>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8089 	beq.w	8003be4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003af4:	4610      	mov	r0, r2
 8003af6:	4798      	blx	r3
 8003af8:	e074      	b.n	8003be4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	4a5a      	ldr	r2, [pc, #360]	; (8003c68 <I2C_ITError+0x25c>)
 8003b00:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fd fe06 	bl	8001718 <HAL_DMA_Abort_IT>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d068      	beq.n	8003be4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d10b      	bne.n	8003b38 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4798      	blx	r3
 8003b5e:	e041      	b.n	8003be4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b60      	cmp	r3, #96	; 0x60
 8003b6a:	d125      	bne.n	8003bb8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d10b      	bne.n	8003ba0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fe fee6 	bl	8002982 <HAL_I2C_AbortCpltCallback>
 8003bb6:	e015      	b.n	8003be4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d10b      	bne.n	8003bde <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe fec6 	bl	8002970 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10e      	bne.n	8003c12 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c20:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c28:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d113      	bne.n	8003c5e <I2C_ITError+0x252>
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b28      	cmp	r3, #40	; 0x28
 8003c3a:	d110      	bne.n	8003c5e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <I2C_ITError+0x260>)
 8003c40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7fe fe6e 	bl	800293a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	08003f11 	.word	0x08003f11
 8003c6c:	ffff0000 	.word	0xffff0000

08003c70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d006      	beq.n	8003c9a <I2C_MasterRequestWrite+0x2a>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d003      	beq.n	8003c9a <I2C_MasterRequestWrite+0x2a>
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c98:	d108      	bne.n	8003cac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e00b      	b.n	8003cc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	2b12      	cmp	r3, #18
 8003cb2:	d107      	bne.n	8003cc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f9c5 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cea:	d103      	bne.n	8003cf4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e035      	b.n	8003d64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d00:	d108      	bne.n	8003d14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d02:	897b      	ldrh	r3, [r7, #10]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d10:	611a      	str	r2, [r3, #16]
 8003d12:	e01b      	b.n	8003d4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d14:	897b      	ldrh	r3, [r7, #10]
 8003d16:	11db      	asrs	r3, r3, #7
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f003 0306 	and.w	r3, r3, #6
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f063 030f 	orn	r3, r3, #15
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	490e      	ldr	r1, [pc, #56]	; (8003d6c <I2C_MasterRequestWrite+0xfc>)
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f9eb 	bl	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e010      	b.n	8003d64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d42:	897b      	ldrh	r3, [r7, #10]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4907      	ldr	r1, [pc, #28]	; (8003d70 <I2C_MasterRequestWrite+0x100>)
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f9db 	bl	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	00010008 	.word	0x00010008
 8003d70:	00010002 	.word	0x00010002

08003d74 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	460b      	mov	r3, r1
 8003d82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d98:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d006      	beq.n	8003dae <I2C_MasterRequestRead+0x3a>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d003      	beq.n	8003dae <I2C_MasterRequestRead+0x3a>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dac:	d108      	bne.n	8003dc0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e00b      	b.n	8003dd8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	2b11      	cmp	r3, #17
 8003dc6:	d107      	bne.n	8003dd8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f93b 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00d      	beq.n	8003e0c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfe:	d103      	bne.n	8003e08 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e079      	b.n	8003f00 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e14:	d108      	bne.n	8003e28 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e16:	897b      	ldrh	r3, [r7, #10]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	611a      	str	r2, [r3, #16]
 8003e26:	e05f      	b.n	8003ee8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e28:	897b      	ldrh	r3, [r7, #10]
 8003e2a:	11db      	asrs	r3, r3, #7
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 0306 	and.w	r3, r3, #6
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	f063 030f 	orn	r3, r3, #15
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4930      	ldr	r1, [pc, #192]	; (8003f08 <I2C_MasterRequestRead+0x194>)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f961 	bl	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e054      	b.n	8003f00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e56:	897b      	ldrh	r3, [r7, #10]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4929      	ldr	r1, [pc, #164]	; (8003f0c <I2C_MasterRequestRead+0x198>)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f951 	bl	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e044      	b.n	8003f00 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f8d9 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec2:	d103      	bne.n	8003ecc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e017      	b.n	8003f00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ed0:	897b      	ldrh	r3, [r7, #10]
 8003ed2:	11db      	asrs	r3, r3, #7
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f003 0306 	and.w	r3, r3, #6
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f063 030e 	orn	r3, r3, #14
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4907      	ldr	r1, [pc, #28]	; (8003f0c <I2C_MasterRequestRead+0x198>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f90d 	bl	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	00010008 	.word	0x00010008
 8003f0c:	00010002 	.word	0x00010002

08003f10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f2a:	4b4b      	ldr	r3, [pc, #300]	; (8004058 <I2C_DMAAbort+0x148>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	08db      	lsrs	r3, r3, #3
 8003f30:	4a4a      	ldr	r2, [pc, #296]	; (800405c <I2C_DMAAbort+0x14c>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0a1a      	lsrs	r2, r3, #8
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	00da      	lsls	r2, r3, #3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003f56:	e00a      	b.n	8003f6e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f6c:	d0ea      	beq.n	8003f44 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b60      	cmp	r3, #96	; 0x60
 8003fde:	d10e      	bne.n	8003ffe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ff6:	6978      	ldr	r0, [r7, #20]
 8003ff8:	f7fe fcc3 	bl	8002982 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ffc:	e027      	b.n	800404e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004004:	2b28      	cmp	r3, #40	; 0x28
 8004006:	d117      	bne.n	8004038 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004026:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2228      	movs	r2, #40	; 0x28
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004036:	e007      	b.n	8004048 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004048:	6978      	ldr	r0, [r7, #20]
 800404a:	f7fe fc91 	bl	8002970 <HAL_I2C_ErrorCallback>
}
 800404e:	bf00      	nop
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000000 	.word	0x20000000
 800405c:	14f8b589 	.word	0x14f8b589

08004060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004070:	e025      	b.n	80040be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d021      	beq.n	80040be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407a:	f7fd fa11 	bl	80014a0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d302      	bcc.n	8004090 <I2C_WaitOnFlagUntilTimeout+0x30>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d116      	bne.n	80040be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f043 0220 	orr.w	r2, r3, #32
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e023      	b.n	8004106 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d10d      	bne.n	80040e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	43da      	mvns	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4013      	ands	r3, r2
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf0c      	ite	eq
 80040da:	2301      	moveq	r3, #1
 80040dc:	2300      	movne	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	e00c      	b.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	429a      	cmp	r2, r3
 8004102:	d0b6      	beq.n	8004072 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800411c:	e051      	b.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412c:	d123      	bne.n	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004146:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e046      	b.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d021      	beq.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7fd f98f 	bl	80014a0 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d116      	bne.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e020      	b.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d10c      	bne.n	80041e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	43da      	mvns	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bf14      	ite	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	2300      	moveq	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	e00b      	b.n	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	43da      	mvns	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4013      	ands	r3, r2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d18d      	bne.n	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004218:	e02d      	b.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f900 	bl	8004420 <I2C_IsAcknowledgeFailed>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e02d      	b.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d021      	beq.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fd f935 	bl	80014a0 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d116      	bne.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f043 0220 	orr.w	r2, r3, #32
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e007      	b.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004280:	2b80      	cmp	r3, #128	; 0x80
 8004282:	d1ca      	bne.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800429a:	e02d      	b.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f8bf 	bl	8004420 <I2C_IsAcknowledgeFailed>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e02d      	b.n	8004308 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d021      	beq.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b4:	f7fd f8f4 	bl	80014a0 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d116      	bne.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e007      	b.n	8004308 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b04      	cmp	r3, #4
 8004304:	d1ca      	bne.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800431c:	4b13      	ldr	r3, [pc, #76]	; (800436c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	08db      	lsrs	r3, r3, #3
 8004322:	4a13      	ldr	r2, [pc, #76]	; (8004370 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	0a1a      	lsrs	r2, r3, #8
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3b01      	subs	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d107      	bne.n	800434e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e008      	b.n	8004360 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435c:	d0e9      	beq.n	8004332 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000000 	.word	0x20000000
 8004370:	14f8b589 	.word	0x14f8b589

08004374 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004380:	e042      	b.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b10      	cmp	r3, #16
 800438e:	d119      	bne.n	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0210 	mvn.w	r2, #16
 8004398:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e029      	b.n	8004418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c4:	f7fd f86c 	bl	80014a0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d116      	bne.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e007      	b.n	8004418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d1b5      	bne.n	8004382 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	d11b      	bne.n	8004470 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004440:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	f043 0204 	orr.w	r2, r3, #4
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800448c:	d103      	bne.n	8004496 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004494:	e007      	b.n	80044a6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800449e:	d102      	bne.n	80044a6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2208      	movs	r2, #8
 80044a4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e272      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8087 	beq.w	80045de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d0:	4b92      	ldr	r3, [pc, #584]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d00c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044dc:	4b8f      	ldr	r3, [pc, #572]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d112      	bne.n	800450e <HAL_RCC_OscConfig+0x5e>
 80044e8:	4b8c      	ldr	r3, [pc, #560]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f4:	d10b      	bne.n	800450e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f6:	4b89      	ldr	r3, [pc, #548]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d06c      	beq.n	80045dc <HAL_RCC_OscConfig+0x12c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d168      	bne.n	80045dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e24c      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x76>
 8004518:	4b80      	ldr	r3, [pc, #512]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a7f      	ldr	r2, [pc, #508]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e02e      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x98>
 800452e:	4b7b      	ldr	r3, [pc, #492]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7a      	ldr	r2, [pc, #488]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b78      	ldr	r3, [pc, #480]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a77      	ldr	r2, [pc, #476]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e01d      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0xbc>
 8004552:	4b72      	ldr	r3, [pc, #456]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a71      	ldr	r2, [pc, #452]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6e      	ldr	r2, [pc, #440]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 800456c:	4b6b      	ldr	r3, [pc, #428]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6a      	ldr	r2, [pc, #424]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b68      	ldr	r3, [pc, #416]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a67      	ldr	r2, [pc, #412]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800457e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fc ff88 	bl	80014a0 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fc ff84 	bl	80014a0 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e200      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b5d      	ldr	r3, [pc, #372]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0xe4>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fc ff74 	bl	80014a0 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fc ff70 	bl	80014a0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1ec      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	4b53      	ldr	r3, [pc, #332]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x10c>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d063      	beq.n	80046b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ea:	4b4c      	ldr	r3, [pc, #304]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045f6:	4b49      	ldr	r3, [pc, #292]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x18c>
 8004602:	4b46      	ldr	r3, [pc, #280]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x176>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e1c0      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b3d      	ldr	r3, [pc, #244]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4939      	ldr	r1, [pc, #228]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004644:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCC_OscConfig+0x270>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464a:	f7fc ff29 	bl	80014a0 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004652:	f7fc ff25 	bl	80014a0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1a1      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	4b2d      	ldr	r3, [pc, #180]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004670:	4b2a      	ldr	r3, [pc, #168]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4927      	ldr	r1, [pc, #156]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004686:	4b26      	ldr	r3, [pc, #152]	; (8004720 <HAL_RCC_OscConfig+0x270>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fc ff08 	bl	80014a0 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004694:	f7fc ff04 	bl	80014a0 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e180      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d03a      	beq.n	8004734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d019      	beq.n	80046fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c6:	4b17      	ldr	r3, [pc, #92]	; (8004724 <HAL_RCC_OscConfig+0x274>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046cc:	f7fc fee8 	bl	80014a0 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fc fee4 	bl	80014a0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e160      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046f2:	2001      	movs	r0, #1
 80046f4:	f000 fac4 	bl	8004c80 <RCC_Delay>
 80046f8:	e01c      	b.n	8004734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <HAL_RCC_OscConfig+0x274>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004700:	f7fc fece 	bl	80014a0 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004706:	e00f      	b.n	8004728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004708:	f7fc feca 	bl	80014a0 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d908      	bls.n	8004728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e146      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	42420000 	.word	0x42420000
 8004724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b92      	ldr	r3, [pc, #584]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e9      	bne.n	8004708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a6 	beq.w	800488e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004746:	4b8b      	ldr	r3, [pc, #556]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10d      	bne.n	800476e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	4b88      	ldr	r3, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	4a87      	ldr	r2, [pc, #540]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475c:	61d3      	str	r3, [r2, #28]
 800475e:	4b85      	ldr	r3, [pc, #532]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b82      	ldr	r3, [pc, #520]	; (8004978 <HAL_RCC_OscConfig+0x4c8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477a:	4b7f      	ldr	r3, [pc, #508]	; (8004978 <HAL_RCC_OscConfig+0x4c8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7e      	ldr	r2, [pc, #504]	; (8004978 <HAL_RCC_OscConfig+0x4c8>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004786:	f7fc fe8b 	bl	80014a0 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fc fe87 	bl	80014a0 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b64      	cmp	r3, #100	; 0x64
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e103      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b75      	ldr	r3, [pc, #468]	; (8004978 <HAL_RCC_OscConfig+0x4c8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x312>
 80047b4:	4b6f      	ldr	r3, [pc, #444]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a6e      	ldr	r2, [pc, #440]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6213      	str	r3, [r2, #32]
 80047c0:	e02d      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x334>
 80047ca:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a69      	ldr	r2, [pc, #420]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	6213      	str	r3, [r2, #32]
 80047d6:	4b67      	ldr	r3, [pc, #412]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a66      	ldr	r2, [pc, #408]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	6213      	str	r3, [r2, #32]
 80047e2:	e01c      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b05      	cmp	r3, #5
 80047ea:	d10c      	bne.n	8004806 <HAL_RCC_OscConfig+0x356>
 80047ec:	4b61      	ldr	r3, [pc, #388]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	4a60      	ldr	r2, [pc, #384]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	f043 0304 	orr.w	r3, r3, #4
 80047f6:	6213      	str	r3, [r2, #32]
 80047f8:	4b5e      	ldr	r3, [pc, #376]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	4a5d      	ldr	r2, [pc, #372]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	6213      	str	r3, [r2, #32]
 8004804:	e00b      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 8004806:	4b5b      	ldr	r3, [pc, #364]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	4a5a      	ldr	r2, [pc, #360]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	6213      	str	r3, [r2, #32]
 8004812:	4b58      	ldr	r3, [pc, #352]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4a57      	ldr	r2, [pc, #348]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	f023 0304 	bic.w	r3, r3, #4
 800481c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d015      	beq.n	8004852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004826:	f7fc fe3b 	bl	80014a0 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482c:	e00a      	b.n	8004844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482e:	f7fc fe37 	bl	80014a0 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	; 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e0b1      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	4b4b      	ldr	r3, [pc, #300]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0ee      	beq.n	800482e <HAL_RCC_OscConfig+0x37e>
 8004850:	e014      	b.n	800487c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7fc fe25 	bl	80014a0 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fc fe21 	bl	80014a0 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e09b      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004870:	4b40      	ldr	r3, [pc, #256]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ee      	bne.n	800485a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004882:	4b3c      	ldr	r3, [pc, #240]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	4a3b      	ldr	r2, [pc, #236]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8087 	beq.w	80049a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004898:	4b36      	ldr	r3, [pc, #216]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d061      	beq.n	8004968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d146      	bne.n	800493a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ac:	4b33      	ldr	r3, [pc, #204]	; (800497c <HAL_RCC_OscConfig+0x4cc>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b2:	f7fc fdf5 	bl	80014a0 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ba:	f7fc fdf1 	bl	80014a0 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e06d      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048cc:	4b29      	ldr	r3, [pc, #164]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d108      	bne.n	80048f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048e2:	4b24      	ldr	r3, [pc, #144]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	4921      	ldr	r1, [pc, #132]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f4:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a19      	ldr	r1, [r3, #32]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	430b      	orrs	r3, r1
 8004906:	491b      	ldr	r1, [pc, #108]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490c:	4b1b      	ldr	r3, [pc, #108]	; (800497c <HAL_RCC_OscConfig+0x4cc>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fc fdc5 	bl	80014a0 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491a:	f7fc fdc1 	bl	80014a0 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e03d      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x46a>
 8004938:	e035      	b.n	80049a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_RCC_OscConfig+0x4cc>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fc fdae 	bl	80014a0 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fc fdaa 	bl	80014a0 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e026      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x498>
 8004966:	e01e      	b.n	80049a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e019      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
 8004974:	40021000 	.word	0x40021000
 8004978:	40007000 	.word	0x40007000
 800497c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_OscConfig+0x500>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	429a      	cmp	r2, r3
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	429a      	cmp	r2, r3
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000

080049b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0d0      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d910      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 0207 	bic.w	r2, r3, #7
 80049de:	4965      	ldr	r1, [pc, #404]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b63      	ldr	r3, [pc, #396]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0b8      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d020      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a10:	4b59      	ldr	r3, [pc, #356]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a58      	ldr	r2, [pc, #352]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a28:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a52      	ldr	r2, [pc, #328]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a34:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	494d      	ldr	r1, [pc, #308]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d040      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d107      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d115      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e07f      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a72:	4b41      	ldr	r3, [pc, #260]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e073      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a82:	4b3d      	ldr	r3, [pc, #244]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06b      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a92:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f023 0203 	bic.w	r2, r3, #3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	4936      	ldr	r1, [pc, #216]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa4:	f7fc fcfc 	bl	80014a0 <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aac:	f7fc fcf8 	bl	80014a0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e053      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac2:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 020c 	and.w	r2, r3, #12
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d1eb      	bne.n	8004aac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d210      	bcs.n	8004b04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 0207 	bic.w	r2, r3, #7
 8004aea:	4922      	ldr	r1, [pc, #136]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e032      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b10:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4916      	ldr	r1, [pc, #88]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	490e      	ldr	r1, [pc, #56]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b42:	f000 f821 	bl	8004b88 <HAL_RCC_GetSysClockFreq>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	490a      	ldr	r1, [pc, #40]	; (8004b7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b54:	5ccb      	ldrb	r3, [r1, r3]
 8004b56:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5a:	4a09      	ldr	r2, [pc, #36]	; (8004b80 <HAL_RCC_ClockConfig+0x1cc>)
 8004b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_RCC_ClockConfig+0x1d0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc fc5a 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40022000 	.word	0x40022000
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	0800564c 	.word	0x0800564c
 8004b80:	20000000 	.word	0x20000000
 8004b84:	20000004 	.word	0x20000004

08004b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b88:	b490      	push	{r4, r7}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b8e:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <HAL_RCC_GetSysClockFreq+0xac>)
 8004b90:	1d3c      	adds	r4, r7, #4
 8004b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b98:	f240 2301 	movw	r3, #513	; 0x201
 8004b9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bb2:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d002      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x46>
 8004bc6:	e02b      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bc8:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bca:	623b      	str	r3, [r7, #32]
      break;
 8004bcc:	e02b      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	0c9b      	lsrs	r3, r3, #18
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	3328      	adds	r3, #40	; 0x28
 8004bd8:	443b      	add	r3, r7
 8004bda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bde:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d012      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0c5b      	lsrs	r3, r3, #17
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	3328      	adds	r3, #40	; 0x28
 8004bf6:	443b      	add	r3, r7
 8004bf8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bfc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	4a0e      	ldr	r2, [pc, #56]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c02:	fb03 f202 	mul.w	r2, r3, r2
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0e:	e004      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c14:	fb02 f303 	mul.w	r3, r2, r3
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	623b      	str	r3, [r7, #32]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c22:	623b      	str	r3, [r7, #32]
      break;
 8004c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c26:	6a3b      	ldr	r3, [r7, #32]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc90      	pop	{r4, r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	0800563c 	.word	0x0800563c
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	007a1200 	.word	0x007a1200
 8004c40:	003d0900 	.word	0x003d0900

08004c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	20000000 	.word	0x20000000

08004c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c5c:	f7ff fff2 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4903      	ldr	r1, [pc, #12]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	0800565c 	.word	0x0800565c

08004c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <RCC_Delay+0x34>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <RCC_Delay+0x38>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	0a5b      	lsrs	r3, r3, #9
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c9c:	bf00      	nop
  }
  while (Delay --);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	60fa      	str	r2, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f9      	bne.n	8004c9c <RCC_Delay+0x1c>
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr
 8004cb4:	20000000 	.word	0x20000000
 8004cb8:	10624dd3 	.word	0x10624dd3

08004cbc <__errno>:
 8004cbc:	4b01      	ldr	r3, [pc, #4]	; (8004cc4 <__errno+0x8>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	2600      	movs	r6, #0
 8004ccc:	4d0c      	ldr	r5, [pc, #48]	; (8004d00 <__libc_init_array+0x38>)
 8004cce:	4c0d      	ldr	r4, [pc, #52]	; (8004d04 <__libc_init_array+0x3c>)
 8004cd0:	1b64      	subs	r4, r4, r5
 8004cd2:	10a4      	asrs	r4, r4, #2
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	f000 fc9c 	bl	8005614 <_init>
 8004cdc:	2600      	movs	r6, #0
 8004cde:	4d0a      	ldr	r5, [pc, #40]	; (8004d08 <__libc_init_array+0x40>)
 8004ce0:	4c0a      	ldr	r4, [pc, #40]	; (8004d0c <__libc_init_array+0x44>)
 8004ce2:	1b64      	subs	r4, r4, r5
 8004ce4:	10a4      	asrs	r4, r4, #2
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	08005698 	.word	0x08005698
 8004d04:	08005698 	.word	0x08005698
 8004d08:	08005698 	.word	0x08005698
 8004d0c:	0800569c 	.word	0x0800569c

08004d10 <memcpy>:
 8004d10:	440a      	add	r2, r1
 8004d12:	4291      	cmp	r1, r2
 8004d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d18:	d100      	bne.n	8004d1c <memcpy+0xc>
 8004d1a:	4770      	bx	lr
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d22:	4291      	cmp	r1, r2
 8004d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d28:	d1f9      	bne.n	8004d1e <memcpy+0xe>
 8004d2a:	bd10      	pop	{r4, pc}

08004d2c <memset>:
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4402      	add	r2, r0
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d100      	bne.n	8004d36 <memset+0xa>
 8004d34:	4770      	bx	lr
 8004d36:	f803 1b01 	strb.w	r1, [r3], #1
 8004d3a:	e7f9      	b.n	8004d30 <memset+0x4>

08004d3c <siprintf>:
 8004d3c:	b40e      	push	{r1, r2, r3}
 8004d3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d42:	b500      	push	{lr}
 8004d44:	b09c      	sub	sp, #112	; 0x70
 8004d46:	ab1d      	add	r3, sp, #116	; 0x74
 8004d48:	9002      	str	r0, [sp, #8]
 8004d4a:	9006      	str	r0, [sp, #24]
 8004d4c:	9107      	str	r1, [sp, #28]
 8004d4e:	9104      	str	r1, [sp, #16]
 8004d50:	4808      	ldr	r0, [pc, #32]	; (8004d74 <siprintf+0x38>)
 8004d52:	4909      	ldr	r1, [pc, #36]	; (8004d78 <siprintf+0x3c>)
 8004d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d58:	9105      	str	r1, [sp, #20]
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	a902      	add	r1, sp, #8
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	f000 f868 	bl	8004e34 <_svfiprintf_r>
 8004d64:	2200      	movs	r2, #0
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	b01c      	add	sp, #112	; 0x70
 8004d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d70:	b003      	add	sp, #12
 8004d72:	4770      	bx	lr
 8004d74:	2000000c 	.word	0x2000000c
 8004d78:	ffff0208 	.word	0xffff0208

08004d7c <__ssputs_r>:
 8004d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d80:	688e      	ldr	r6, [r1, #8]
 8004d82:	4682      	mov	sl, r0
 8004d84:	429e      	cmp	r6, r3
 8004d86:	460c      	mov	r4, r1
 8004d88:	4690      	mov	r8, r2
 8004d8a:	461f      	mov	r7, r3
 8004d8c:	d838      	bhi.n	8004e00 <__ssputs_r+0x84>
 8004d8e:	898a      	ldrh	r2, [r1, #12]
 8004d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d94:	d032      	beq.n	8004dfc <__ssputs_r+0x80>
 8004d96:	6825      	ldr	r5, [r4, #0]
 8004d98:	6909      	ldr	r1, [r1, #16]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	eba5 0901 	sub.w	r9, r5, r1
 8004da0:	6965      	ldr	r5, [r4, #20]
 8004da2:	444b      	add	r3, r9
 8004da4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dac:	106d      	asrs	r5, r5, #1
 8004dae:	429d      	cmp	r5, r3
 8004db0:	bf38      	it	cc
 8004db2:	461d      	movcc	r5, r3
 8004db4:	0553      	lsls	r3, r2, #21
 8004db6:	d531      	bpl.n	8004e1c <__ssputs_r+0xa0>
 8004db8:	4629      	mov	r1, r5
 8004dba:	f000 fb61 	bl	8005480 <_malloc_r>
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	b950      	cbnz	r0, 8004dd8 <__ssputs_r+0x5c>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	f8ca 3000 	str.w	r3, [sl]
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd8:	464a      	mov	r2, r9
 8004dda:	6921      	ldr	r1, [r4, #16]
 8004ddc:	f7ff ff98 	bl	8004d10 <memcpy>
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dea:	81a3      	strh	r3, [r4, #12]
 8004dec:	6126      	str	r6, [r4, #16]
 8004dee:	444e      	add	r6, r9
 8004df0:	6026      	str	r6, [r4, #0]
 8004df2:	463e      	mov	r6, r7
 8004df4:	6165      	str	r5, [r4, #20]
 8004df6:	eba5 0509 	sub.w	r5, r5, r9
 8004dfa:	60a5      	str	r5, [r4, #8]
 8004dfc:	42be      	cmp	r6, r7
 8004dfe:	d900      	bls.n	8004e02 <__ssputs_r+0x86>
 8004e00:	463e      	mov	r6, r7
 8004e02:	4632      	mov	r2, r6
 8004e04:	4641      	mov	r1, r8
 8004e06:	6820      	ldr	r0, [r4, #0]
 8004e08:	f000 fab8 	bl	800537c <memmove>
 8004e0c:	68a3      	ldr	r3, [r4, #8]
 8004e0e:	2000      	movs	r0, #0
 8004e10:	1b9b      	subs	r3, r3, r6
 8004e12:	60a3      	str	r3, [r4, #8]
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	4433      	add	r3, r6
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	e7db      	b.n	8004dd4 <__ssputs_r+0x58>
 8004e1c:	462a      	mov	r2, r5
 8004e1e:	f000 fba3 	bl	8005568 <_realloc_r>
 8004e22:	4606      	mov	r6, r0
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d1e1      	bne.n	8004dec <__ssputs_r+0x70>
 8004e28:	4650      	mov	r0, sl
 8004e2a:	6921      	ldr	r1, [r4, #16]
 8004e2c:	f000 fac0 	bl	80053b0 <_free_r>
 8004e30:	e7c7      	b.n	8004dc2 <__ssputs_r+0x46>
	...

08004e34 <_svfiprintf_r>:
 8004e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e38:	4698      	mov	r8, r3
 8004e3a:	898b      	ldrh	r3, [r1, #12]
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	061b      	lsls	r3, r3, #24
 8004e40:	460d      	mov	r5, r1
 8004e42:	4614      	mov	r4, r2
 8004e44:	b09d      	sub	sp, #116	; 0x74
 8004e46:	d50e      	bpl.n	8004e66 <_svfiprintf_r+0x32>
 8004e48:	690b      	ldr	r3, [r1, #16]
 8004e4a:	b963      	cbnz	r3, 8004e66 <_svfiprintf_r+0x32>
 8004e4c:	2140      	movs	r1, #64	; 0x40
 8004e4e:	f000 fb17 	bl	8005480 <_malloc_r>
 8004e52:	6028      	str	r0, [r5, #0]
 8004e54:	6128      	str	r0, [r5, #16]
 8004e56:	b920      	cbnz	r0, 8004e62 <_svfiprintf_r+0x2e>
 8004e58:	230c      	movs	r3, #12
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e60:	e0d1      	b.n	8005006 <_svfiprintf_r+0x1d2>
 8004e62:	2340      	movs	r3, #64	; 0x40
 8004e64:	616b      	str	r3, [r5, #20]
 8004e66:	2300      	movs	r3, #0
 8004e68:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6a:	2320      	movs	r3, #32
 8004e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e70:	2330      	movs	r3, #48	; 0x30
 8004e72:	f04f 0901 	mov.w	r9, #1
 8004e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005020 <_svfiprintf_r+0x1ec>
 8004e7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e82:	4623      	mov	r3, r4
 8004e84:	469a      	mov	sl, r3
 8004e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e8a:	b10a      	cbz	r2, 8004e90 <_svfiprintf_r+0x5c>
 8004e8c:	2a25      	cmp	r2, #37	; 0x25
 8004e8e:	d1f9      	bne.n	8004e84 <_svfiprintf_r+0x50>
 8004e90:	ebba 0b04 	subs.w	fp, sl, r4
 8004e94:	d00b      	beq.n	8004eae <_svfiprintf_r+0x7a>
 8004e96:	465b      	mov	r3, fp
 8004e98:	4622      	mov	r2, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f7ff ff6d 	bl	8004d7c <__ssputs_r>
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	f000 80aa 	beq.w	8004ffc <_svfiprintf_r+0x1c8>
 8004ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eaa:	445a      	add	r2, fp
 8004eac:	9209      	str	r2, [sp, #36]	; 0x24
 8004eae:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80a2 	beq.w	8004ffc <_svfiprintf_r+0x1c8>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ec2:	f10a 0a01 	add.w	sl, sl, #1
 8004ec6:	9304      	str	r3, [sp, #16]
 8004ec8:	9307      	str	r3, [sp, #28]
 8004eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ece:	931a      	str	r3, [sp, #104]	; 0x68
 8004ed0:	4654      	mov	r4, sl
 8004ed2:	2205      	movs	r2, #5
 8004ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed8:	4851      	ldr	r0, [pc, #324]	; (8005020 <_svfiprintf_r+0x1ec>)
 8004eda:	f000 fa41 	bl	8005360 <memchr>
 8004ede:	9a04      	ldr	r2, [sp, #16]
 8004ee0:	b9d8      	cbnz	r0, 8004f1a <_svfiprintf_r+0xe6>
 8004ee2:	06d0      	lsls	r0, r2, #27
 8004ee4:	bf44      	itt	mi
 8004ee6:	2320      	movmi	r3, #32
 8004ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eec:	0711      	lsls	r1, r2, #28
 8004eee:	bf44      	itt	mi
 8004ef0:	232b      	movmi	r3, #43	; 0x2b
 8004ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8004efa:	2b2a      	cmp	r3, #42	; 0x2a
 8004efc:	d015      	beq.n	8004f2a <_svfiprintf_r+0xf6>
 8004efe:	4654      	mov	r4, sl
 8004f00:	2000      	movs	r0, #0
 8004f02:	f04f 0c0a 	mov.w	ip, #10
 8004f06:	9a07      	ldr	r2, [sp, #28]
 8004f08:	4621      	mov	r1, r4
 8004f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f0e:	3b30      	subs	r3, #48	; 0x30
 8004f10:	2b09      	cmp	r3, #9
 8004f12:	d94e      	bls.n	8004fb2 <_svfiprintf_r+0x17e>
 8004f14:	b1b0      	cbz	r0, 8004f44 <_svfiprintf_r+0x110>
 8004f16:	9207      	str	r2, [sp, #28]
 8004f18:	e014      	b.n	8004f44 <_svfiprintf_r+0x110>
 8004f1a:	eba0 0308 	sub.w	r3, r0, r8
 8004f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f22:	4313      	orrs	r3, r2
 8004f24:	46a2      	mov	sl, r4
 8004f26:	9304      	str	r3, [sp, #16]
 8004f28:	e7d2      	b.n	8004ed0 <_svfiprintf_r+0x9c>
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	1d19      	adds	r1, r3, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	9103      	str	r1, [sp, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	bfbb      	ittet	lt
 8004f36:	425b      	neglt	r3, r3
 8004f38:	f042 0202 	orrlt.w	r2, r2, #2
 8004f3c:	9307      	strge	r3, [sp, #28]
 8004f3e:	9307      	strlt	r3, [sp, #28]
 8004f40:	bfb8      	it	lt
 8004f42:	9204      	strlt	r2, [sp, #16]
 8004f44:	7823      	ldrb	r3, [r4, #0]
 8004f46:	2b2e      	cmp	r3, #46	; 0x2e
 8004f48:	d10c      	bne.n	8004f64 <_svfiprintf_r+0x130>
 8004f4a:	7863      	ldrb	r3, [r4, #1]
 8004f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f4e:	d135      	bne.n	8004fbc <_svfiprintf_r+0x188>
 8004f50:	9b03      	ldr	r3, [sp, #12]
 8004f52:	3402      	adds	r4, #2
 8004f54:	1d1a      	adds	r2, r3, #4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	9203      	str	r2, [sp, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	bfb8      	it	lt
 8004f5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f62:	9305      	str	r3, [sp, #20]
 8004f64:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005024 <_svfiprintf_r+0x1f0>
 8004f68:	2203      	movs	r2, #3
 8004f6a:	4650      	mov	r0, sl
 8004f6c:	7821      	ldrb	r1, [r4, #0]
 8004f6e:	f000 f9f7 	bl	8005360 <memchr>
 8004f72:	b140      	cbz	r0, 8004f86 <_svfiprintf_r+0x152>
 8004f74:	2340      	movs	r3, #64	; 0x40
 8004f76:	eba0 000a 	sub.w	r0, r0, sl
 8004f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f7e:	9b04      	ldr	r3, [sp, #16]
 8004f80:	3401      	adds	r4, #1
 8004f82:	4303      	orrs	r3, r0
 8004f84:	9304      	str	r3, [sp, #16]
 8004f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f8a:	2206      	movs	r2, #6
 8004f8c:	4826      	ldr	r0, [pc, #152]	; (8005028 <_svfiprintf_r+0x1f4>)
 8004f8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f92:	f000 f9e5 	bl	8005360 <memchr>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d038      	beq.n	800500c <_svfiprintf_r+0x1d8>
 8004f9a:	4b24      	ldr	r3, [pc, #144]	; (800502c <_svfiprintf_r+0x1f8>)
 8004f9c:	bb1b      	cbnz	r3, 8004fe6 <_svfiprintf_r+0x1b2>
 8004f9e:	9b03      	ldr	r3, [sp, #12]
 8004fa0:	3307      	adds	r3, #7
 8004fa2:	f023 0307 	bic.w	r3, r3, #7
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fac:	4433      	add	r3, r6
 8004fae:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb0:	e767      	b.n	8004e82 <_svfiprintf_r+0x4e>
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fba:	e7a5      	b.n	8004f08 <_svfiprintf_r+0xd4>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f04f 0c0a 	mov.w	ip, #10
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	3401      	adds	r4, #1
 8004fc6:	9305      	str	r3, [sp, #20]
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fce:	3a30      	subs	r2, #48	; 0x30
 8004fd0:	2a09      	cmp	r2, #9
 8004fd2:	d903      	bls.n	8004fdc <_svfiprintf_r+0x1a8>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0c5      	beq.n	8004f64 <_svfiprintf_r+0x130>
 8004fd8:	9105      	str	r1, [sp, #20]
 8004fda:	e7c3      	b.n	8004f64 <_svfiprintf_r+0x130>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	2301      	movs	r3, #1
 8004fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fe4:	e7f0      	b.n	8004fc8 <_svfiprintf_r+0x194>
 8004fe6:	ab03      	add	r3, sp, #12
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	462a      	mov	r2, r5
 8004fec:	4638      	mov	r0, r7
 8004fee:	4b10      	ldr	r3, [pc, #64]	; (8005030 <_svfiprintf_r+0x1fc>)
 8004ff0:	a904      	add	r1, sp, #16
 8004ff2:	f3af 8000 	nop.w
 8004ff6:	1c42      	adds	r2, r0, #1
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	d1d6      	bne.n	8004faa <_svfiprintf_r+0x176>
 8004ffc:	89ab      	ldrh	r3, [r5, #12]
 8004ffe:	065b      	lsls	r3, r3, #25
 8005000:	f53f af2c 	bmi.w	8004e5c <_svfiprintf_r+0x28>
 8005004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005006:	b01d      	add	sp, #116	; 0x74
 8005008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500c:	ab03      	add	r3, sp, #12
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	462a      	mov	r2, r5
 8005012:	4638      	mov	r0, r7
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <_svfiprintf_r+0x1fc>)
 8005016:	a904      	add	r1, sp, #16
 8005018:	f000 f87c 	bl	8005114 <_printf_i>
 800501c:	e7eb      	b.n	8004ff6 <_svfiprintf_r+0x1c2>
 800501e:	bf00      	nop
 8005020:	08005664 	.word	0x08005664
 8005024:	0800566a 	.word	0x0800566a
 8005028:	0800566e 	.word	0x0800566e
 800502c:	00000000 	.word	0x00000000
 8005030:	08004d7d 	.word	0x08004d7d

08005034 <_printf_common>:
 8005034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005038:	4616      	mov	r6, r2
 800503a:	4699      	mov	r9, r3
 800503c:	688a      	ldr	r2, [r1, #8]
 800503e:	690b      	ldr	r3, [r1, #16]
 8005040:	4607      	mov	r7, r0
 8005042:	4293      	cmp	r3, r2
 8005044:	bfb8      	it	lt
 8005046:	4613      	movlt	r3, r2
 8005048:	6033      	str	r3, [r6, #0]
 800504a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800504e:	460c      	mov	r4, r1
 8005050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005054:	b10a      	cbz	r2, 800505a <_printf_common+0x26>
 8005056:	3301      	adds	r3, #1
 8005058:	6033      	str	r3, [r6, #0]
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	0699      	lsls	r1, r3, #26
 800505e:	bf42      	ittt	mi
 8005060:	6833      	ldrmi	r3, [r6, #0]
 8005062:	3302      	addmi	r3, #2
 8005064:	6033      	strmi	r3, [r6, #0]
 8005066:	6825      	ldr	r5, [r4, #0]
 8005068:	f015 0506 	ands.w	r5, r5, #6
 800506c:	d106      	bne.n	800507c <_printf_common+0x48>
 800506e:	f104 0a19 	add.w	sl, r4, #25
 8005072:	68e3      	ldr	r3, [r4, #12]
 8005074:	6832      	ldr	r2, [r6, #0]
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	42ab      	cmp	r3, r5
 800507a:	dc28      	bgt.n	80050ce <_printf_common+0x9a>
 800507c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005080:	1e13      	subs	r3, r2, #0
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	bf18      	it	ne
 8005086:	2301      	movne	r3, #1
 8005088:	0692      	lsls	r2, r2, #26
 800508a:	d42d      	bmi.n	80050e8 <_printf_common+0xb4>
 800508c:	4649      	mov	r1, r9
 800508e:	4638      	mov	r0, r7
 8005090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005094:	47c0      	blx	r8
 8005096:	3001      	adds	r0, #1
 8005098:	d020      	beq.n	80050dc <_printf_common+0xa8>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	68e5      	ldr	r5, [r4, #12]
 800509e:	f003 0306 	and.w	r3, r3, #6
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	bf18      	it	ne
 80050a6:	2500      	movne	r5, #0
 80050a8:	6832      	ldr	r2, [r6, #0]
 80050aa:	f04f 0600 	mov.w	r6, #0
 80050ae:	68a3      	ldr	r3, [r4, #8]
 80050b0:	bf08      	it	eq
 80050b2:	1aad      	subeq	r5, r5, r2
 80050b4:	6922      	ldr	r2, [r4, #16]
 80050b6:	bf08      	it	eq
 80050b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050bc:	4293      	cmp	r3, r2
 80050be:	bfc4      	itt	gt
 80050c0:	1a9b      	subgt	r3, r3, r2
 80050c2:	18ed      	addgt	r5, r5, r3
 80050c4:	341a      	adds	r4, #26
 80050c6:	42b5      	cmp	r5, r6
 80050c8:	d11a      	bne.n	8005100 <_printf_common+0xcc>
 80050ca:	2000      	movs	r0, #0
 80050cc:	e008      	b.n	80050e0 <_printf_common+0xac>
 80050ce:	2301      	movs	r3, #1
 80050d0:	4652      	mov	r2, sl
 80050d2:	4649      	mov	r1, r9
 80050d4:	4638      	mov	r0, r7
 80050d6:	47c0      	blx	r8
 80050d8:	3001      	adds	r0, #1
 80050da:	d103      	bne.n	80050e4 <_printf_common+0xb0>
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e4:	3501      	adds	r5, #1
 80050e6:	e7c4      	b.n	8005072 <_printf_common+0x3e>
 80050e8:	2030      	movs	r0, #48	; 0x30
 80050ea:	18e1      	adds	r1, r4, r3
 80050ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050f6:	4422      	add	r2, r4
 80050f8:	3302      	adds	r3, #2
 80050fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050fe:	e7c5      	b.n	800508c <_printf_common+0x58>
 8005100:	2301      	movs	r3, #1
 8005102:	4622      	mov	r2, r4
 8005104:	4649      	mov	r1, r9
 8005106:	4638      	mov	r0, r7
 8005108:	47c0      	blx	r8
 800510a:	3001      	adds	r0, #1
 800510c:	d0e6      	beq.n	80050dc <_printf_common+0xa8>
 800510e:	3601      	adds	r6, #1
 8005110:	e7d9      	b.n	80050c6 <_printf_common+0x92>
	...

08005114 <_printf_i>:
 8005114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	7e0f      	ldrb	r7, [r1, #24]
 800511a:	4691      	mov	r9, r2
 800511c:	2f78      	cmp	r7, #120	; 0x78
 800511e:	4680      	mov	r8, r0
 8005120:	460c      	mov	r4, r1
 8005122:	469a      	mov	sl, r3
 8005124:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800512a:	d807      	bhi.n	800513c <_printf_i+0x28>
 800512c:	2f62      	cmp	r7, #98	; 0x62
 800512e:	d80a      	bhi.n	8005146 <_printf_i+0x32>
 8005130:	2f00      	cmp	r7, #0
 8005132:	f000 80d9 	beq.w	80052e8 <_printf_i+0x1d4>
 8005136:	2f58      	cmp	r7, #88	; 0x58
 8005138:	f000 80a4 	beq.w	8005284 <_printf_i+0x170>
 800513c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005144:	e03a      	b.n	80051bc <_printf_i+0xa8>
 8005146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800514a:	2b15      	cmp	r3, #21
 800514c:	d8f6      	bhi.n	800513c <_printf_i+0x28>
 800514e:	a101      	add	r1, pc, #4	; (adr r1, 8005154 <_printf_i+0x40>)
 8005150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005154:	080051ad 	.word	0x080051ad
 8005158:	080051c1 	.word	0x080051c1
 800515c:	0800513d 	.word	0x0800513d
 8005160:	0800513d 	.word	0x0800513d
 8005164:	0800513d 	.word	0x0800513d
 8005168:	0800513d 	.word	0x0800513d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800513d 	.word	0x0800513d
 8005174:	0800513d 	.word	0x0800513d
 8005178:	0800513d 	.word	0x0800513d
 800517c:	0800513d 	.word	0x0800513d
 8005180:	080052cf 	.word	0x080052cf
 8005184:	080051f1 	.word	0x080051f1
 8005188:	080052b1 	.word	0x080052b1
 800518c:	0800513d 	.word	0x0800513d
 8005190:	0800513d 	.word	0x0800513d
 8005194:	080052f1 	.word	0x080052f1
 8005198:	0800513d 	.word	0x0800513d
 800519c:	080051f1 	.word	0x080051f1
 80051a0:	0800513d 	.word	0x0800513d
 80051a4:	0800513d 	.word	0x0800513d
 80051a8:	080052b9 	.word	0x080052b9
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	602a      	str	r2, [r5, #0]
 80051b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051bc:	2301      	movs	r3, #1
 80051be:	e0a4      	b.n	800530a <_printf_i+0x1f6>
 80051c0:	6820      	ldr	r0, [r4, #0]
 80051c2:	6829      	ldr	r1, [r5, #0]
 80051c4:	0606      	lsls	r6, r0, #24
 80051c6:	f101 0304 	add.w	r3, r1, #4
 80051ca:	d50a      	bpl.n	80051e2 <_printf_i+0xce>
 80051cc:	680e      	ldr	r6, [r1, #0]
 80051ce:	602b      	str	r3, [r5, #0]
 80051d0:	2e00      	cmp	r6, #0
 80051d2:	da03      	bge.n	80051dc <_printf_i+0xc8>
 80051d4:	232d      	movs	r3, #45	; 0x2d
 80051d6:	4276      	negs	r6, r6
 80051d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051dc:	230a      	movs	r3, #10
 80051de:	485e      	ldr	r0, [pc, #376]	; (8005358 <_printf_i+0x244>)
 80051e0:	e019      	b.n	8005216 <_printf_i+0x102>
 80051e2:	680e      	ldr	r6, [r1, #0]
 80051e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051e8:	602b      	str	r3, [r5, #0]
 80051ea:	bf18      	it	ne
 80051ec:	b236      	sxthne	r6, r6
 80051ee:	e7ef      	b.n	80051d0 <_printf_i+0xbc>
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	1d19      	adds	r1, r3, #4
 80051f6:	6029      	str	r1, [r5, #0]
 80051f8:	0601      	lsls	r1, r0, #24
 80051fa:	d501      	bpl.n	8005200 <_printf_i+0xec>
 80051fc:	681e      	ldr	r6, [r3, #0]
 80051fe:	e002      	b.n	8005206 <_printf_i+0xf2>
 8005200:	0646      	lsls	r6, r0, #25
 8005202:	d5fb      	bpl.n	80051fc <_printf_i+0xe8>
 8005204:	881e      	ldrh	r6, [r3, #0]
 8005206:	2f6f      	cmp	r7, #111	; 0x6f
 8005208:	bf0c      	ite	eq
 800520a:	2308      	moveq	r3, #8
 800520c:	230a      	movne	r3, #10
 800520e:	4852      	ldr	r0, [pc, #328]	; (8005358 <_printf_i+0x244>)
 8005210:	2100      	movs	r1, #0
 8005212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005216:	6865      	ldr	r5, [r4, #4]
 8005218:	2d00      	cmp	r5, #0
 800521a:	bfa8      	it	ge
 800521c:	6821      	ldrge	r1, [r4, #0]
 800521e:	60a5      	str	r5, [r4, #8]
 8005220:	bfa4      	itt	ge
 8005222:	f021 0104 	bicge.w	r1, r1, #4
 8005226:	6021      	strge	r1, [r4, #0]
 8005228:	b90e      	cbnz	r6, 800522e <_printf_i+0x11a>
 800522a:	2d00      	cmp	r5, #0
 800522c:	d04d      	beq.n	80052ca <_printf_i+0x1b6>
 800522e:	4615      	mov	r5, r2
 8005230:	fbb6 f1f3 	udiv	r1, r6, r3
 8005234:	fb03 6711 	mls	r7, r3, r1, r6
 8005238:	5dc7      	ldrb	r7, [r0, r7]
 800523a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800523e:	4637      	mov	r7, r6
 8005240:	42bb      	cmp	r3, r7
 8005242:	460e      	mov	r6, r1
 8005244:	d9f4      	bls.n	8005230 <_printf_i+0x11c>
 8005246:	2b08      	cmp	r3, #8
 8005248:	d10b      	bne.n	8005262 <_printf_i+0x14e>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	07de      	lsls	r6, r3, #31
 800524e:	d508      	bpl.n	8005262 <_printf_i+0x14e>
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	6861      	ldr	r1, [r4, #4]
 8005254:	4299      	cmp	r1, r3
 8005256:	bfde      	ittt	le
 8005258:	2330      	movle	r3, #48	; 0x30
 800525a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800525e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005262:	1b52      	subs	r2, r2, r5
 8005264:	6122      	str	r2, [r4, #16]
 8005266:	464b      	mov	r3, r9
 8005268:	4621      	mov	r1, r4
 800526a:	4640      	mov	r0, r8
 800526c:	f8cd a000 	str.w	sl, [sp]
 8005270:	aa03      	add	r2, sp, #12
 8005272:	f7ff fedf 	bl	8005034 <_printf_common>
 8005276:	3001      	adds	r0, #1
 8005278:	d14c      	bne.n	8005314 <_printf_i+0x200>
 800527a:	f04f 30ff 	mov.w	r0, #4294967295
 800527e:	b004      	add	sp, #16
 8005280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005284:	4834      	ldr	r0, [pc, #208]	; (8005358 <_printf_i+0x244>)
 8005286:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800528a:	6829      	ldr	r1, [r5, #0]
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005292:	6029      	str	r1, [r5, #0]
 8005294:	061d      	lsls	r5, r3, #24
 8005296:	d514      	bpl.n	80052c2 <_printf_i+0x1ae>
 8005298:	07df      	lsls	r7, r3, #31
 800529a:	bf44      	itt	mi
 800529c:	f043 0320 	orrmi.w	r3, r3, #32
 80052a0:	6023      	strmi	r3, [r4, #0]
 80052a2:	b91e      	cbnz	r6, 80052ac <_printf_i+0x198>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	f023 0320 	bic.w	r3, r3, #32
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	2310      	movs	r3, #16
 80052ae:	e7af      	b.n	8005210 <_printf_i+0xfc>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	f043 0320 	orr.w	r3, r3, #32
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	2378      	movs	r3, #120	; 0x78
 80052ba:	4828      	ldr	r0, [pc, #160]	; (800535c <_printf_i+0x248>)
 80052bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052c0:	e7e3      	b.n	800528a <_printf_i+0x176>
 80052c2:	0659      	lsls	r1, r3, #25
 80052c4:	bf48      	it	mi
 80052c6:	b2b6      	uxthmi	r6, r6
 80052c8:	e7e6      	b.n	8005298 <_printf_i+0x184>
 80052ca:	4615      	mov	r5, r2
 80052cc:	e7bb      	b.n	8005246 <_printf_i+0x132>
 80052ce:	682b      	ldr	r3, [r5, #0]
 80052d0:	6826      	ldr	r6, [r4, #0]
 80052d2:	1d18      	adds	r0, r3, #4
 80052d4:	6961      	ldr	r1, [r4, #20]
 80052d6:	6028      	str	r0, [r5, #0]
 80052d8:	0635      	lsls	r5, r6, #24
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	d501      	bpl.n	80052e2 <_printf_i+0x1ce>
 80052de:	6019      	str	r1, [r3, #0]
 80052e0:	e002      	b.n	80052e8 <_printf_i+0x1d4>
 80052e2:	0670      	lsls	r0, r6, #25
 80052e4:	d5fb      	bpl.n	80052de <_printf_i+0x1ca>
 80052e6:	8019      	strh	r1, [r3, #0]
 80052e8:	2300      	movs	r3, #0
 80052ea:	4615      	mov	r5, r2
 80052ec:	6123      	str	r3, [r4, #16]
 80052ee:	e7ba      	b.n	8005266 <_printf_i+0x152>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	2100      	movs	r1, #0
 80052f4:	1d1a      	adds	r2, r3, #4
 80052f6:	602a      	str	r2, [r5, #0]
 80052f8:	681d      	ldr	r5, [r3, #0]
 80052fa:	6862      	ldr	r2, [r4, #4]
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f82f 	bl	8005360 <memchr>
 8005302:	b108      	cbz	r0, 8005308 <_printf_i+0x1f4>
 8005304:	1b40      	subs	r0, r0, r5
 8005306:	6060      	str	r0, [r4, #4]
 8005308:	6863      	ldr	r3, [r4, #4]
 800530a:	6123      	str	r3, [r4, #16]
 800530c:	2300      	movs	r3, #0
 800530e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005312:	e7a8      	b.n	8005266 <_printf_i+0x152>
 8005314:	462a      	mov	r2, r5
 8005316:	4649      	mov	r1, r9
 8005318:	4640      	mov	r0, r8
 800531a:	6923      	ldr	r3, [r4, #16]
 800531c:	47d0      	blx	sl
 800531e:	3001      	adds	r0, #1
 8005320:	d0ab      	beq.n	800527a <_printf_i+0x166>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	079b      	lsls	r3, r3, #30
 8005326:	d413      	bmi.n	8005350 <_printf_i+0x23c>
 8005328:	68e0      	ldr	r0, [r4, #12]
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	4298      	cmp	r0, r3
 800532e:	bfb8      	it	lt
 8005330:	4618      	movlt	r0, r3
 8005332:	e7a4      	b.n	800527e <_printf_i+0x16a>
 8005334:	2301      	movs	r3, #1
 8005336:	4632      	mov	r2, r6
 8005338:	4649      	mov	r1, r9
 800533a:	4640      	mov	r0, r8
 800533c:	47d0      	blx	sl
 800533e:	3001      	adds	r0, #1
 8005340:	d09b      	beq.n	800527a <_printf_i+0x166>
 8005342:	3501      	adds	r5, #1
 8005344:	68e3      	ldr	r3, [r4, #12]
 8005346:	9903      	ldr	r1, [sp, #12]
 8005348:	1a5b      	subs	r3, r3, r1
 800534a:	42ab      	cmp	r3, r5
 800534c:	dcf2      	bgt.n	8005334 <_printf_i+0x220>
 800534e:	e7eb      	b.n	8005328 <_printf_i+0x214>
 8005350:	2500      	movs	r5, #0
 8005352:	f104 0619 	add.w	r6, r4, #25
 8005356:	e7f5      	b.n	8005344 <_printf_i+0x230>
 8005358:	08005675 	.word	0x08005675
 800535c:	08005686 	.word	0x08005686

08005360 <memchr>:
 8005360:	4603      	mov	r3, r0
 8005362:	b510      	push	{r4, lr}
 8005364:	b2c9      	uxtb	r1, r1
 8005366:	4402      	add	r2, r0
 8005368:	4293      	cmp	r3, r2
 800536a:	4618      	mov	r0, r3
 800536c:	d101      	bne.n	8005372 <memchr+0x12>
 800536e:	2000      	movs	r0, #0
 8005370:	e003      	b.n	800537a <memchr+0x1a>
 8005372:	7804      	ldrb	r4, [r0, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	428c      	cmp	r4, r1
 8005378:	d1f6      	bne.n	8005368 <memchr+0x8>
 800537a:	bd10      	pop	{r4, pc}

0800537c <memmove>:
 800537c:	4288      	cmp	r0, r1
 800537e:	b510      	push	{r4, lr}
 8005380:	eb01 0402 	add.w	r4, r1, r2
 8005384:	d902      	bls.n	800538c <memmove+0x10>
 8005386:	4284      	cmp	r4, r0
 8005388:	4623      	mov	r3, r4
 800538a:	d807      	bhi.n	800539c <memmove+0x20>
 800538c:	1e43      	subs	r3, r0, #1
 800538e:	42a1      	cmp	r1, r4
 8005390:	d008      	beq.n	80053a4 <memmove+0x28>
 8005392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800539a:	e7f8      	b.n	800538e <memmove+0x12>
 800539c:	4601      	mov	r1, r0
 800539e:	4402      	add	r2, r0
 80053a0:	428a      	cmp	r2, r1
 80053a2:	d100      	bne.n	80053a6 <memmove+0x2a>
 80053a4:	bd10      	pop	{r4, pc}
 80053a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053ae:	e7f7      	b.n	80053a0 <memmove+0x24>

080053b0 <_free_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4605      	mov	r5, r0
 80053b4:	2900      	cmp	r1, #0
 80053b6:	d040      	beq.n	800543a <_free_r+0x8a>
 80053b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053bc:	1f0c      	subs	r4, r1, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bfb8      	it	lt
 80053c2:	18e4      	addlt	r4, r4, r3
 80053c4:	f000 f910 	bl	80055e8 <__malloc_lock>
 80053c8:	4a1c      	ldr	r2, [pc, #112]	; (800543c <_free_r+0x8c>)
 80053ca:	6813      	ldr	r3, [r2, #0]
 80053cc:	b933      	cbnz	r3, 80053dc <_free_r+0x2c>
 80053ce:	6063      	str	r3, [r4, #4]
 80053d0:	6014      	str	r4, [r2, #0]
 80053d2:	4628      	mov	r0, r5
 80053d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053d8:	f000 b90c 	b.w	80055f4 <__malloc_unlock>
 80053dc:	42a3      	cmp	r3, r4
 80053de:	d908      	bls.n	80053f2 <_free_r+0x42>
 80053e0:	6820      	ldr	r0, [r4, #0]
 80053e2:	1821      	adds	r1, r4, r0
 80053e4:	428b      	cmp	r3, r1
 80053e6:	bf01      	itttt	eq
 80053e8:	6819      	ldreq	r1, [r3, #0]
 80053ea:	685b      	ldreq	r3, [r3, #4]
 80053ec:	1809      	addeq	r1, r1, r0
 80053ee:	6021      	streq	r1, [r4, #0]
 80053f0:	e7ed      	b.n	80053ce <_free_r+0x1e>
 80053f2:	461a      	mov	r2, r3
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	b10b      	cbz	r3, 80053fc <_free_r+0x4c>
 80053f8:	42a3      	cmp	r3, r4
 80053fa:	d9fa      	bls.n	80053f2 <_free_r+0x42>
 80053fc:	6811      	ldr	r1, [r2, #0]
 80053fe:	1850      	adds	r0, r2, r1
 8005400:	42a0      	cmp	r0, r4
 8005402:	d10b      	bne.n	800541c <_free_r+0x6c>
 8005404:	6820      	ldr	r0, [r4, #0]
 8005406:	4401      	add	r1, r0
 8005408:	1850      	adds	r0, r2, r1
 800540a:	4283      	cmp	r3, r0
 800540c:	6011      	str	r1, [r2, #0]
 800540e:	d1e0      	bne.n	80053d2 <_free_r+0x22>
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4401      	add	r1, r0
 8005416:	6011      	str	r1, [r2, #0]
 8005418:	6053      	str	r3, [r2, #4]
 800541a:	e7da      	b.n	80053d2 <_free_r+0x22>
 800541c:	d902      	bls.n	8005424 <_free_r+0x74>
 800541e:	230c      	movs	r3, #12
 8005420:	602b      	str	r3, [r5, #0]
 8005422:	e7d6      	b.n	80053d2 <_free_r+0x22>
 8005424:	6820      	ldr	r0, [r4, #0]
 8005426:	1821      	adds	r1, r4, r0
 8005428:	428b      	cmp	r3, r1
 800542a:	bf01      	itttt	eq
 800542c:	6819      	ldreq	r1, [r3, #0]
 800542e:	685b      	ldreq	r3, [r3, #4]
 8005430:	1809      	addeq	r1, r1, r0
 8005432:	6021      	streq	r1, [r4, #0]
 8005434:	6063      	str	r3, [r4, #4]
 8005436:	6054      	str	r4, [r2, #4]
 8005438:	e7cb      	b.n	80053d2 <_free_r+0x22>
 800543a:	bd38      	pop	{r3, r4, r5, pc}
 800543c:	200000fc 	.word	0x200000fc

08005440 <sbrk_aligned>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4e0e      	ldr	r6, [pc, #56]	; (800547c <sbrk_aligned+0x3c>)
 8005444:	460c      	mov	r4, r1
 8005446:	6831      	ldr	r1, [r6, #0]
 8005448:	4605      	mov	r5, r0
 800544a:	b911      	cbnz	r1, 8005452 <sbrk_aligned+0x12>
 800544c:	f000 f8bc 	bl	80055c8 <_sbrk_r>
 8005450:	6030      	str	r0, [r6, #0]
 8005452:	4621      	mov	r1, r4
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f8b7 	bl	80055c8 <_sbrk_r>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	d00a      	beq.n	8005474 <sbrk_aligned+0x34>
 800545e:	1cc4      	adds	r4, r0, #3
 8005460:	f024 0403 	bic.w	r4, r4, #3
 8005464:	42a0      	cmp	r0, r4
 8005466:	d007      	beq.n	8005478 <sbrk_aligned+0x38>
 8005468:	1a21      	subs	r1, r4, r0
 800546a:	4628      	mov	r0, r5
 800546c:	f000 f8ac 	bl	80055c8 <_sbrk_r>
 8005470:	3001      	adds	r0, #1
 8005472:	d101      	bne.n	8005478 <sbrk_aligned+0x38>
 8005474:	f04f 34ff 	mov.w	r4, #4294967295
 8005478:	4620      	mov	r0, r4
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	20000100 	.word	0x20000100

08005480 <_malloc_r>:
 8005480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005484:	1ccd      	adds	r5, r1, #3
 8005486:	f025 0503 	bic.w	r5, r5, #3
 800548a:	3508      	adds	r5, #8
 800548c:	2d0c      	cmp	r5, #12
 800548e:	bf38      	it	cc
 8005490:	250c      	movcc	r5, #12
 8005492:	2d00      	cmp	r5, #0
 8005494:	4607      	mov	r7, r0
 8005496:	db01      	blt.n	800549c <_malloc_r+0x1c>
 8005498:	42a9      	cmp	r1, r5
 800549a:	d905      	bls.n	80054a8 <_malloc_r+0x28>
 800549c:	230c      	movs	r3, #12
 800549e:	2600      	movs	r6, #0
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	4630      	mov	r0, r6
 80054a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a8:	4e2e      	ldr	r6, [pc, #184]	; (8005564 <_malloc_r+0xe4>)
 80054aa:	f000 f89d 	bl	80055e8 <__malloc_lock>
 80054ae:	6833      	ldr	r3, [r6, #0]
 80054b0:	461c      	mov	r4, r3
 80054b2:	bb34      	cbnz	r4, 8005502 <_malloc_r+0x82>
 80054b4:	4629      	mov	r1, r5
 80054b6:	4638      	mov	r0, r7
 80054b8:	f7ff ffc2 	bl	8005440 <sbrk_aligned>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	4604      	mov	r4, r0
 80054c0:	d14d      	bne.n	800555e <_malloc_r+0xde>
 80054c2:	6834      	ldr	r4, [r6, #0]
 80054c4:	4626      	mov	r6, r4
 80054c6:	2e00      	cmp	r6, #0
 80054c8:	d140      	bne.n	800554c <_malloc_r+0xcc>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	4631      	mov	r1, r6
 80054ce:	4638      	mov	r0, r7
 80054d0:	eb04 0803 	add.w	r8, r4, r3
 80054d4:	f000 f878 	bl	80055c8 <_sbrk_r>
 80054d8:	4580      	cmp	r8, r0
 80054da:	d13a      	bne.n	8005552 <_malloc_r+0xd2>
 80054dc:	6821      	ldr	r1, [r4, #0]
 80054de:	3503      	adds	r5, #3
 80054e0:	1a6d      	subs	r5, r5, r1
 80054e2:	f025 0503 	bic.w	r5, r5, #3
 80054e6:	3508      	adds	r5, #8
 80054e8:	2d0c      	cmp	r5, #12
 80054ea:	bf38      	it	cc
 80054ec:	250c      	movcc	r5, #12
 80054ee:	4638      	mov	r0, r7
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7ff ffa5 	bl	8005440 <sbrk_aligned>
 80054f6:	3001      	adds	r0, #1
 80054f8:	d02b      	beq.n	8005552 <_malloc_r+0xd2>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	442b      	add	r3, r5
 80054fe:	6023      	str	r3, [r4, #0]
 8005500:	e00e      	b.n	8005520 <_malloc_r+0xa0>
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	1b52      	subs	r2, r2, r5
 8005506:	d41e      	bmi.n	8005546 <_malloc_r+0xc6>
 8005508:	2a0b      	cmp	r2, #11
 800550a:	d916      	bls.n	800553a <_malloc_r+0xba>
 800550c:	1961      	adds	r1, r4, r5
 800550e:	42a3      	cmp	r3, r4
 8005510:	6025      	str	r5, [r4, #0]
 8005512:	bf18      	it	ne
 8005514:	6059      	strne	r1, [r3, #4]
 8005516:	6863      	ldr	r3, [r4, #4]
 8005518:	bf08      	it	eq
 800551a:	6031      	streq	r1, [r6, #0]
 800551c:	5162      	str	r2, [r4, r5]
 800551e:	604b      	str	r3, [r1, #4]
 8005520:	4638      	mov	r0, r7
 8005522:	f104 060b 	add.w	r6, r4, #11
 8005526:	f000 f865 	bl	80055f4 <__malloc_unlock>
 800552a:	f026 0607 	bic.w	r6, r6, #7
 800552e:	1d23      	adds	r3, r4, #4
 8005530:	1af2      	subs	r2, r6, r3
 8005532:	d0b6      	beq.n	80054a2 <_malloc_r+0x22>
 8005534:	1b9b      	subs	r3, r3, r6
 8005536:	50a3      	str	r3, [r4, r2]
 8005538:	e7b3      	b.n	80054a2 <_malloc_r+0x22>
 800553a:	6862      	ldr	r2, [r4, #4]
 800553c:	42a3      	cmp	r3, r4
 800553e:	bf0c      	ite	eq
 8005540:	6032      	streq	r2, [r6, #0]
 8005542:	605a      	strne	r2, [r3, #4]
 8005544:	e7ec      	b.n	8005520 <_malloc_r+0xa0>
 8005546:	4623      	mov	r3, r4
 8005548:	6864      	ldr	r4, [r4, #4]
 800554a:	e7b2      	b.n	80054b2 <_malloc_r+0x32>
 800554c:	4634      	mov	r4, r6
 800554e:	6876      	ldr	r6, [r6, #4]
 8005550:	e7b9      	b.n	80054c6 <_malloc_r+0x46>
 8005552:	230c      	movs	r3, #12
 8005554:	4638      	mov	r0, r7
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	f000 f84c 	bl	80055f4 <__malloc_unlock>
 800555c:	e7a1      	b.n	80054a2 <_malloc_r+0x22>
 800555e:	6025      	str	r5, [r4, #0]
 8005560:	e7de      	b.n	8005520 <_malloc_r+0xa0>
 8005562:	bf00      	nop
 8005564:	200000fc 	.word	0x200000fc

08005568 <_realloc_r>:
 8005568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800556c:	4680      	mov	r8, r0
 800556e:	4614      	mov	r4, r2
 8005570:	460e      	mov	r6, r1
 8005572:	b921      	cbnz	r1, 800557e <_realloc_r+0x16>
 8005574:	4611      	mov	r1, r2
 8005576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800557a:	f7ff bf81 	b.w	8005480 <_malloc_r>
 800557e:	b92a      	cbnz	r2, 800558c <_realloc_r+0x24>
 8005580:	f7ff ff16 	bl	80053b0 <_free_r>
 8005584:	4625      	mov	r5, r4
 8005586:	4628      	mov	r0, r5
 8005588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800558c:	f000 f838 	bl	8005600 <_malloc_usable_size_r>
 8005590:	4284      	cmp	r4, r0
 8005592:	4607      	mov	r7, r0
 8005594:	d802      	bhi.n	800559c <_realloc_r+0x34>
 8005596:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800559a:	d812      	bhi.n	80055c2 <_realloc_r+0x5a>
 800559c:	4621      	mov	r1, r4
 800559e:	4640      	mov	r0, r8
 80055a0:	f7ff ff6e 	bl	8005480 <_malloc_r>
 80055a4:	4605      	mov	r5, r0
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d0ed      	beq.n	8005586 <_realloc_r+0x1e>
 80055aa:	42bc      	cmp	r4, r7
 80055ac:	4622      	mov	r2, r4
 80055ae:	4631      	mov	r1, r6
 80055b0:	bf28      	it	cs
 80055b2:	463a      	movcs	r2, r7
 80055b4:	f7ff fbac 	bl	8004d10 <memcpy>
 80055b8:	4631      	mov	r1, r6
 80055ba:	4640      	mov	r0, r8
 80055bc:	f7ff fef8 	bl	80053b0 <_free_r>
 80055c0:	e7e1      	b.n	8005586 <_realloc_r+0x1e>
 80055c2:	4635      	mov	r5, r6
 80055c4:	e7df      	b.n	8005586 <_realloc_r+0x1e>
	...

080055c8 <_sbrk_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	2300      	movs	r3, #0
 80055cc:	4d05      	ldr	r5, [pc, #20]	; (80055e4 <_sbrk_r+0x1c>)
 80055ce:	4604      	mov	r4, r0
 80055d0:	4608      	mov	r0, r1
 80055d2:	602b      	str	r3, [r5, #0]
 80055d4:	f7fb feaa 	bl	800132c <_sbrk>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_sbrk_r+0x1a>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_sbrk_r+0x1a>
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	20000104 	.word	0x20000104

080055e8 <__malloc_lock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__malloc_lock+0x8>)
 80055ea:	f000 b811 	b.w	8005610 <__retarget_lock_acquire_recursive>
 80055ee:	bf00      	nop
 80055f0:	20000108 	.word	0x20000108

080055f4 <__malloc_unlock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__malloc_unlock+0x8>)
 80055f6:	f000 b80c 	b.w	8005612 <__retarget_lock_release_recursive>
 80055fa:	bf00      	nop
 80055fc:	20000108 	.word	0x20000108

08005600 <_malloc_usable_size_r>:
 8005600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005604:	1f18      	subs	r0, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfbc      	itt	lt
 800560a:	580b      	ldrlt	r3, [r1, r0]
 800560c:	18c0      	addlt	r0, r0, r3
 800560e:	4770      	bx	lr

08005610 <__retarget_lock_acquire_recursive>:
 8005610:	4770      	bx	lr

08005612 <__retarget_lock_release_recursive>:
 8005612:	4770      	bx	lr

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr
